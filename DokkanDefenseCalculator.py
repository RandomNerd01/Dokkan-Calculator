# DokkanDefenseCalculator.py

# Specify the encoding used in your script, such as UTF-8
# -*- coding: utf-8 -*-
import requests
import sys
import os
import cloudscraper
import subprocess
__version__ = "1.0.5"
# URL of the latest version of your script on GitHub Pages (This is To Teq LR Grandpa Gohan)
SCRIPT_URL = 'https://raw.githubusercontent.com/RandomNerd01/Dokkan-Calculator/main/DokkanDefenseCalculator.py'

# Path to the current local script
LOCAL_SCRIPT_PATH = os.path.abspath(__file__)
required_packages = ["requests", "cloudscraper"]
def install(package):
    subprocess.check_call(
        [sys.executable, "-m", "pip", "install", package],
        stdout=subprocess.DEVNULL,  # Suppress standard output
        stderr=subprocess.DEVNULL   # Suppress standard error
    )



scraper = cloudscraper.create_scraper()
def check_for_updates():
    response = requests.get(SCRIPT_URL)
    remote_script_content = response.text
    remote_version_line = next(line for line in remote_script_content.split('\n') if line.startswith('__version__'))
    remote_version = remote_version_line.split('=')[1].strip().strip('"')

    if remote_version > __version__:
        print(f"Updating script from version {__version__} to {remote_version}")
        with open(LOCAL_SCRIPT_PATH, 'w') as script_file:
            script_file.write(remote_script_content)
        print("Update complete. Please restart the script.")
        exit()
def get_latest_script():
    response = requests.get(SCRIPT_URL)
    if response.status_code == 200:
        return response.text
    else:
        return None

def get_current_script_version():
    with open(LOCAL_SCRIPT_PATH, 'r') as file:
        for line in file:
            if line.startswith('__version__'):
                return line.split('=')[1].strip().strip('"')
    return None

def get_latest_script_version(script_text):
    for line in script_text.split('\n'):
        if line.startswith('__version__'):
            return line.split('=')[1].strip().strip('"')
    return None

def update_script(new_script_text):
    with open(LOCAL_SCRIPT_PATH, 'w') as file:
        file.write(new_script_text)




def check_url_validity(url):
    try:
        response = scraper.get(url)
        return response.status_code == 200
    except requests.RequestException:
        return False




def retrieve_passive(character_id):
    # Start a session
    session = requests.Session()
    base_url = f"https://dokkaninfo.com/cards/{character_id}"
    eza_parameter = "?eza=true"


    headers = {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:91.0) Gecko/20100101 Firefox/91.0',
        'Referer': 'https://jpnen.dokkaninfo.com',
        'Accept-Language': 'en-US,en;q=0.9'
    }

    # Add ?eza=true to the base URL
    url_with_eza = base_url + eza_parameter




    # Check if the URL with ?eza=true is valid
    if check_url_validity(url_with_eza):
        final_url = url_with_eza
    else:
        final_url = base_url



    # Send a GET request to fetch the webpage content
    response = scraper.get(final_url)
    if response.status_code == 200:
        # Convert the HTML content to a string
        html_content = str(response.text)




        # Find the start and end indices of the passive information
        start_index = html_content.find('HP,')
        end_index = html_content.find('">', start_index)
        if start_index == -1:
            start_index_atk = html_content.find('ATK')
            start_index_def=html_content.find('DEF')
            start_index_KI=html_content.find('Ki')
            start_index= min(start_index_def, start_index_atk, start_index_KI)
            end_index = html_content.find('">', start_index)



        passive1 = html_content[start_index:end_index]
        passive = html_content[start_index+53:end_index]
        while passive1.__contains__("HP,"):
            start_index += 1
            end_index = html_content.find('">', start_index)
            passive1 = html_content[start_index:end_index]
        passive= html_content[start_index+40:end_index]

        return passive
    else:
        print("Failed to retrieve character information.")
        return None




import re

def kiSpheres(bullet_points, KiSpheres1):
    for point in bullet_points:
        if 'DEF' in point and '-' not in point:
            if  ('Ki orb' in point or 'Ki Sphere' in point) and ('Per k' in point or 'per K' in point or 'Per K' in point or 'per k' in point or 'Per I' in point or 'per I' in point or 'Per T' in point or 'per T' in point or 'Per S' in point or 'per S' in point or 'Per A' in point or 'per A' in point or 'Per P' in point or 'per P' in point or 'Per R' in point or 'per R' in point ) and 'when attacking' not in point:

                def_index = point.find('DEF')
                # Initialize left and right pointers
                left_pointer = def_index - 1
                right_pointer = def_index + 3  # Skip "DEF" and the space after it


                # Initialize variables to store the multipliers found by each pointer
                left_multiplier = None
                right_multiplier = None
                # Iterate right pointer
                while right_pointer<=(len(point)-1) and point[right_pointer] != '%'  :
                    right_pointer += 1

                    if (right_pointer==len(point)-1):
                        break


                    # Initialize a string to store the digits
                if right_pointer<= len(point)-1 and point[right_pointer] == '%':
                    # Initialize a string to store the digits
                    right_digits = ""

                    # Iterate right pointer to gather digits
                    while right_pointer >= def_index and point[right_pointer - 1].isdigit():
                        right_digits = point[right_pointer - 1] + right_digits
                        right_pointer -= 1

                    if right_digits:
                        right_multiplier = float(right_digits)
                    # Add the multiplier found by the left pointer

                # Add the multiplier found by the right pointer
                if right_multiplier is not None:
                    KiSpheres1 += right_multiplier / 100
                    continue 

                # Iterate left pointer
                while (left_pointer>=0) and point[left_pointer] != '%':
                    left_pointer -= 1
                    if (left_pointer==0):
                        break


                if point[left_pointer] == '%':
                    # Initialize a string to store the digits
                    left_digits = ""

                    # Iterate left pointer to gather digits
                    while left_pointer <= def_index and point[left_pointer - 1].isdigit():
                        left_digits = point[left_pointer - 1] + left_digits
                        left_pointer -= 1

                    if left_digits:
                        left_multiplier = float(left_digits)
                if(left_multiplier != None):
                    KiSpheres1 += left_multiplier / 100
                    continue



            if ('ki orb' in point or 'ki sphere' in point)  and ('Per k' in point or 'per K' in point or 'Per K' in point or 'per k' in point or 'Per I' in point or 'per I' in point or 'Per T' in point or 'per T' in point or 'Per S' in point or 'per S' in point or 'Per A' in point or 'per A' in point or 'Per P' in point or 'per P' in point or 'Per R' in point or 'per R' in point ) and 'attacking' not in point:
                def_index = point.find('DEF')
                # Initialize left and right pointers
                left_pointer = def_index - 1
                right_pointer = def_index + 3  # Skip "DEF" and the space after it


                # Initialize variables to store the multipliers found by each pointer
                left_multiplier = None
                right_multiplier = None
                # Iterate right pointer
                while right_pointer<=(len(point)-1) and point[right_pointer] != '%'  :
                    right_pointer += 1
                    if (right_pointer==len(point)-1):
                        break


                    # Initialize a string to store the digits
                if point[right_pointer] == '%':
                    # Initialize a string to store the digits
                    right_digits = ""

                    # Iterate right pointer to gather digits
                    while right_pointer >= def_index and point[right_pointer - 1].isdigit():
                        right_digits = point[right_pointer - 1] + right_digits
                        right_pointer -= 1

                    if right_digits:
                        right_multiplier = float(right_digits)
                    # Add the multiplier found by the left pointer
                


                # Add the multiplier found by the right pointer
                if right_multiplier is not None:
                    KiSpheres1 += right_multiplier / 100
                    continue

                # Iterate left pointer
                while (left_pointer>=0) and point[left_pointer] != '%':
                    left_pointer -= 1
                    if (left_pointer==0):
                        break


                if point[left_pointer] == '%':
                    # Initialize a string to store the digits
                    left_digits = ""

                    # Iterate left pointer to gather digits
                    while left_pointer <= def_index and point[left_pointer - 1].isdigit():
                        left_digits = point[left_pointer - 1] + left_digits
                        left_pointer -= 1

                    if left_digits:
                        left_multiplier = float(left_digits)
                    if left_multiplier is not None:
                        KiSpheres1 += left_multiplier / 100
                    continue


    return KiSpheres1
def kiSphereslol(bullet_points, KiSpheres1):
    for point in bullet_points:
        if 'DEF'  in point:
            if  ('Ki orb' in point or 'Ki Sphere' in point) and ('Per k' not in point or 'per K' not in point or 'Per K' not in point or 'per k' not in point or 'Per I' not in point or 'per I' not in point or 'Per T' not in point or 'per T' not in point or 'Per S' not in point or 'per S' not in point or 'Per A' not in point or 'per A' not in point or 'Per P' not in point or 'per P' not in point or 'Per R' not in point or 'per R' not in point) and 'attacking' not in point:
                def_index = point.find('DEF')
                # Initialize left and right pointers
                left_pointer = def_index - 1
                right_pointer = def_index + 3  # Skip "DEF" and the space after it


                # Initialize variables to store the multipliers found by each pointer
                left_multiplier = None
                right_multiplier = None
                # Iterate right pointer
                while right_pointer<=(len(point)-1) and point[right_pointer] != '%'  :
                    right_pointer += 1
                    if (right_pointer==len(point)-1):
                        break


                    # Initialize a string to store the digits
                if point[right_pointer] == '%':
                    # Initialize a string to store the digits
                    right_digits = ""

                    # Iterate right pointer to gather digits
                    while right_pointer <= def_index and point[right_pointer - 1].isdigit():
                        right_digits = point[right_pointer - 1] + right_digits
                        right_pointer -= 1

                    if right_digits:
                        right_multiplier = float(right_digits)
                    # Add the multiplier found by the left pointer
                # Add the multiplier found by the right pointer
                if right_multiplier is not None:
                    KiSpheres1 += right_multiplier / 100
                    continue

                # Iterate left pointer
                while (left_pointer>=0) and point[left_pointer] != '%':
                    left_pointer -= 1
                    if (left_pointer==0):
                        break


                if point[left_pointer] == '%':
                    # Initialize a string to store the digits
                    left_digits = ""

                    # Iterate left pointer to gather digits
                    while left_pointer <= def_index and point[left_pointer - 1].isdigit():
                        left_digits = point[left_pointer - 1] + left_digits
                        left_pointer -= 1

                    if left_digits:
                        left_multiplier = float(left_digits)



                    
                if left_multiplier is not None:
                    KiSpheres1 += left_multiplier / 100




            if ('ki orb' in point or 'ki sphere' in point)  and ('Per k' not in point or 'per K' not in point or 'Per K' not in point or 'per k' not in point or 'Per I' not in point or 'per I' not in point or 'Per T' not in point or 'per T' not in point or 'Per S' not in point or 'per S' not in point or 'Per A' not in point or 'per A' not in point or 'Per P' not in point or 'per P' not in point or 'Per R' not in point or 'per R' not in point) and 'attacking' not in point:
                def_index = point.find('DEF')
                # Initialize left and right pointers
                left_pointer = def_index - 1
                right_pointer = def_index + 3  # Skip "DEF" and the space after it


                # Initialize variables to store the multipliers found by each pointer
                left_multiplier = None
                right_multiplier = None
                # Iterate right pointer
                while right_pointer<=(len(point)-1) and point[right_pointer] != '%'  :
                    right_pointer += 1
                    if (right_pointer==len(point)-1):
                        break


                    # Initialize a string to store the digits
                if point[right_pointer] == '%':
                    # Initialize a string to store the digits
                    right_digits = ""

                    # Iterate right pointer to gather digits
                    while right_pointer >= def_index and point[right_pointer - 1].isdigit():
                        right_digits = point[right_pointer - 1] + right_digits
                        right_pointer -= 1

                    if right_digits:
                        right_multiplier = float(right_digits)

                # Add the multiplier found by the right pointer
                if right_multiplier is not None:
                    KiSpheres1 += right_multiplier / 100
                    continue

                # Iterate left pointer
                while (left_pointer>=0) and point[left_pointer] != '%':
                    left_pointer -= 1
                    if (left_pointer==0):
                        break


                if point[left_pointer] == '%':
                    # Initialize a string to store the digits
                    left_digits = ""

                    # Iterate left pointer to gather digits
                    while left_pointer <= def_index and point[left_pointer - 1].isdigit():
                        left_digits = point[left_pointer - 1] + left_digits
                        left_pointer -= 1

                    if left_digits:
                        left_multiplier = float(left_digits)


                      
                    # Add the multiplier found by the left pointer
                if left_multiplier is not None:
                    KiSpheres1 += left_multiplier / 100


    return KiSpheres1
def search_defense_multiplier(bullet_points):
    defense_multiplier = 0
    for point in bullet_points:
        if 'DEF' in point and '-' not in point:
            
            if '(m' not in point and'(u' not in point and 'Ki Sphere' not in point and 'Ki orb' not in point and 'ki orb' not in point and 'Meter' not in point and 'perform' not in point and 'receiving' not in point and 'evading' not in point and 'when attacking' not in point and 'does' not in point:
                def_index = point.find('DEF')
            # Initialize left and right pointers
                left_pointer = def_index - 1
                right_pointer = def_index + 3  # Skip "DEF" and the space after it


                # Initialize variables to store the multipliers found by each pointer
                left_multiplier = None
                right_multiplier = None
                # Iterate right pointer
                while right_pointer<=(len(point)-1) and point[right_pointer] != '%'  :
                    right_pointer += 1
                    if (right_pointer==len(point)-1):
                        break


                    # Initialize a string to store the digits
                if right_pointer<= len(point)-1 and point[right_pointer] == '%':
                    # Initialize a string to store the digits
                    right_digits = ""

                    # Iterate right pointer to gather digits
                    while right_pointer >= def_index and point[right_pointer - 1].isdigit():
                        right_digits = point[right_pointer - 1] + right_digits
                        right_pointer -= 1

                    if right_digits:
                        right_multiplier = float(right_digits)



                # Add the multiplier found by the right pointer
                if right_multiplier is not None:
                    defense_multiplier += right_multiplier / 100
                    continue

                # Iterate left pointer
                while (left_pointer>=0) and point[left_pointer] != '%':
                    left_pointer -= 1
                    if (left_pointer==0):
                        break


                if point[left_pointer] == '%':
                    # Initialize a string to store the digits
                    left_digits = ""

                    # Iterate left pointer to gather digits
                    while left_pointer <= def_index and point[left_pointer - 1].isdigit():
                        left_digits = point[left_pointer - 1] + left_digits
                        left_pointer -= 1

                    if left_digits:
                        left_multiplier = float(left_digits)
                if(left_multiplier != None):
                    defense_multiplier += left_multiplier / 100
                



    return defense_multiplier
def search_defense_multiplier2(bullet_points):
    defense_multiplier_lol = 0
    for point in bullet_points:
        if 'DEF' in point:
                if ('Per k' in point or 'per K' in point or 'Per K' in point or 'per k' in point or 'Per I' in point or 'per I' in point or 'Per T' in point or 'per T' in point or 'Per S' in point or 'per S' in point or 'Per A' in point or 'per A' in point or 'Per P' in point or 'per P' in point or 'Per R' in point or 'per R' in point) and ('Meter' in point or 'perform'  in point or 'Perform'  in point or 'receiving' in point or 'evading' in point or 'when attacking' in point):
                    def_index = point.find('DEF')
                    # Initialize left and right pointers
                    left_pointer = def_index - 1
                    right_pointer = def_index + 3  # Skip "DEF" and the space after it


                    # Initialize variables to store the multipliers found by each pointer
                    left_multiplier = None
                    right_multiplier = None

                    # Iterate right pointer
                    while right_pointer<=(len(point)-1) and point[right_pointer] != '%'  :
                        right_pointer += 1
                        if (right_pointer==len(point)-1):
                            break


                        # Initialize a string to store the digits
                    if right_pointer<= len(point)-1 and point[right_pointer] == '%':
                        # Initialize a string to store the digits
                        right_digits = ""

                        # Iterate right pointer to gather digits
                        while right_pointer >= def_index and point[right_pointer - 1].isdigit():
                            right_digits = point[right_pointer - 1] + right_digits
                            right_pointer -= 1

                        if right_digits:
                            right_multiplier = float(right_digits)



                    # Add the multiplier found by the right pointer
                    if right_multiplier is not None:
                        defense_multiplier_lol += right_multiplier / 100
                        continue
                    # Iterate left pointer
                    while (left_pointer>=0) and point[left_pointer] != '%':
                        left_pointer -= 1
                        if (left_pointer==0):
                            break


                    if point[left_pointer] == '%':
                        # Initialize a string to store the digits
                        left_digits = ""

                        # Iterate left pointer to gather digits
                        while left_pointer <= def_index and point[left_pointer - 1].isdigit():
                            left_digits = point[left_pointer - 1] + left_digits
                            left_pointer -= 1

                        if left_digits:
                            left_multiplier = float(left_digits)

                        # Add the multiplier found by the left pointer
                    if left_multiplier is not None:
                        defense_multiplier_lol += left_multiplier / 100



    return defense_multiplier_lol
def search_defense_multiplier1(bullet_points):
    defense_multiplier_lol = 0
    for point in bullet_points:
        if 'DEF' in point:

            if '(m' in point or '(u' in point or('(' in point and ('up' in point or 'max' in point) ):
                # Find the index of '(' and ')'
                start_index = point.find('(')
                end_index = point.find(')')
                # Check if 'DEF' is between '(' and ')'
                if 'DEF' in point[start_index:end_index]:
                    def_index = point[start_index:end_index].find('DEF')
                    # Use regular expression to extract DEF multipliers
                    percent_index = point[def_index+start_index:end_index].find('%')
                    multiplier = ''
                    for char in point[def_index+start_index+percent_index-1:start_index:-1]:
                        if char.isdigit():
                            multiplier = char + multiplier
                        else:
                            break
                    # Add multiplier to the defense multiplier
                    defense_multiplier_lol += float(multiplier) / 100
                    continue
                elif '(m' in point or '(u' in point:
                    def_index = point.find('DEF')
                    start_index = point[def_index:len(point)-1].find('(')
                    end_index = point[def_index:len(point)-1].find(')')
                    def_multipliers = re.findall(r'(\d+)%', point[start_index+def_index:def_index+end_index])
                    def_multipliers1 = re.findall(r'(\d+)%', point[start_index+def_index:end_index])
                    # Add multipliers to the defense multiplier
                    for multiplier in def_multipliers:
                        defense_multiplier_lol += float(multiplier) / 100
                        continue
                    for multiplier in def_multipliers1:
                        defense_multiplier_lol += float(multiplier) / 100
                        continue
                else:
                    # Find the index of '(' and ')'
                    start_index=0
                    end_index=0
                    for i in range(len(point) - 1, -1, -1):
                        if (point[i]==')'):
                            end_index=i
                            for j in range(end_index, -1, -1):
                                if point[j] == '(':
                                    start_index = j
                                    break  # Stop the loop once the opening bracket is found
                            break  # Stop the outer loop once the closing bracket is found

                    def_multipliers = re.findall(r'(\d+)%', point[start_index:end_index])
                    # Add multipliers to the defense multiplier
                    for multiplier in def_multipliers:
                        defense_multiplier_lol += float(multiplier) / 100
                        continue
            elif ('Per k' not in point or 'per K' not in point or 'Per K' not in point or 'per k' not in point or 'Per I' not in point or 'per I' not in point or 'Per T' not in point or 'per T' not in point or 'Per S' not in point or 'per S' not in point or 'Per A' not in point or 'per A' not in point or 'Per P' not in point or 'per P' not in point or 'Per R' not in point or 'per R' not in point) and ('Ki is' in point or 'Meter' in point or 'perform'  in point or 'Perform'  in point or 'receiving' in point or 'evading' in point or 'when attacking' in point):
                def_index = point.find('DEF')
            # Initialize left and right pointers
                left_pointer = def_index - 1
                right_pointer = def_index + 3  # Skip "DEF" and the space after it


                # Initialize variables to store the multipliers found by each pointer
                left_multiplier = None
                right_multiplier = None
                # Iterate right pointer
                while right_pointer<=(len(point)-1) and point[right_pointer] != '%'  :
                    right_pointer += 1
                    if (right_pointer==len(point)-1):
                        break


                    # Initialize a string to store the digits
                if right_pointer<= len(point)-1 and point[right_pointer] == '%':
                    # Initialize a string to store the digits
                    right_digits = ""

                    # Iterate right pointer to gather digits
                    while right_pointer >= def_index and point[right_pointer - 1].isdigit():
                        right_digits = point[right_pointer - 1] + right_digits
                        right_pointer -= 1

                    if right_digits:
                        right_multiplier = float(right_digits)

                # Add the multiplier found by the right pointer
                if right_multiplier is not None:
                    defense_multiplier_lol += right_multiplier / 100
                    continue                        




                # Iterate left pointer
                while (left_pointer>=0) and point[left_pointer] != '%':
                    left_pointer -= 1
                    if (left_pointer==0):
                        break


                if point[left_pointer] == '%':
                    # Initialize a string to store the digits
                    left_digits = ""

                    # Iterate left pointer to gather digits
                    while left_pointer <= def_index and point[left_pointer - 1].isdigit():
                        left_digits = point[left_pointer - 1] + left_digits
                        left_pointer -= 1

                    if left_digits:
                        left_multiplier = float(left_digits)
                    # Add the multiplier found by the left pointer
                if left_multiplier is not None:
                    defense_multiplier_lol += left_multiplier / 100




    return defense_multiplier_lol



def extract_bullet_points(passive):
    # Split the passive string into bullet points
    bullet_points = passive.split('; ')




    # Check if the last bullet point ends with a comma
    last_point = bullet_points[-1]
    if last_point.endswith(','):
        # Remove the comma from the last bullet point
        bullet_points[-1] = last_point[:-1]




    # Join any bullet points that were split incorrectly due to '&amp;'
    i = 0
    while i < len(bullet_points) - 1:
        if bullet_points[i].endswith('&amp'):
            bullet_points[i] += '; ' + bullet_points[i + 1]
            bullet_points.pop(i + 1)
        else:
            i += 1
    return bullet_points








def main():
    current_script_version = get_current_script_version()
    latest_script_text = get_latest_script()

    if latest_script_text is None:
        print("Failed to fetch the latest update for the calculator.")
        return

    latest_script_version = get_latest_script_version(latest_script_text)

    if latest_script_version > current_script_version:
        print(f"Updating script from version {current_script_version} to {latest_script_version}")
        update_script(latest_script_text)
        print("Script updated successfully. Please re-run the Calculator.")
    else:
        print("You are using the latest version of the Calculator.")
    character_id = input("Enter the character's id from DokkanInfo: ")
    passive = retrieve_passive(character_id)
    if character_id == "1015231"  or character_id == "1015241":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)

            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            ki_Spheres_obtained1 = input("Enter number of non-agl Ki Spheres Obtained : ")
            ki_Spheres_obtained2 = input("Enter number of agl Ki Spheres Obtained : ")
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+int(ki_Spheres_obtained1 )*0.5+int(ki_Spheres_obtained2)*0.7 + float(support)) * float(defense_input)  *(1+float(Leader_Skill))*(1) *  (1+float(Support_from_Super) + int(Super_Attacks_Performed)*float(Super_Attacks_Performed1)+int(UltraOrUnitSuper) *float(UltraOrUnitSuper1)+float(Stack_Defense))

            print("Defense: " + str(defense))
        else:
            print("Character information not found.")
    elif character_id == "1019851" :
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)

            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            ki_Spheres_obtained1 = input("Enter number of Ki Spheres Obtained : ")
            if (int(ki_Spheres_obtained1)==3 or int(ki_Spheres_obtained1)==4):
                ki_Spheres_obtained1=0.5
            elif(int(ki_Spheres_obtained1)>=5):
                ki_Spheres_obtained1 =1
            else:
                ki_Spheres_obtained1 =0
                
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+1.3+ float(support)) * float(defense_input)  *(1+float(Leader_Skill))*(1+ki_Spheres_obtained1) *  (1+float(Support_from_Super))


            print("Defense: " + str(defense))
        else:
            print("Character information not found.")

    elif character_id == "1011461" :
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)

            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            ki_Spheres_obtained1 = input("Enter number of non-agl Ki Spheres Obtained : ")
            ki_Spheres_obtained1 =int(ki_Spheres_obtained1)*0.2
            ki_Spheres_obtained2 = input("Enter number of agl Ki Spheres Obtained : ")
            ki_Spheres_obtained2 =int(ki_Spheres_obtained2)*0.3
            ki_Spheres_obtained3 = input("Enter How Many Future Saga allies attacking in the same turn (self excluded)(2-Type 2, 1- Type 1 )  : ")
            ki_Spheres_obtained3 =int(ki_Spheres_obtained3)*0.5
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+ki_Spheres_obtained2+ki_Spheres_obtained3+ki_Spheres_obtained1+1.5+ float(support)) * float(defense_input)  *(1+float(Leader_Skill))*(1) *  (1+float(Support_from_Super) + int(Super_Attacks_Performed)*0.3+float(Stack_Defense))


            print("Defense: " + str(defense))
        else:
            print("Character information not found.")
    elif character_id == "1023661" :
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)

            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
          
            ki_Spheres_obtained3 = input("Enter How Many KI Spheres Obtained(2-Type 2, 1- Type 1 )  : ")
            if (int(ki_Spheres_obtained3)>=3 and int(ki_Spheres_obtained3)<=6):
                non=0.3
                yes=0
            elif (int(ki_Spheres_obtained3)>=7):
                non=0.3
                yes=0.7
            else:
                non=0
                yes=0
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+1.5+non+ float(support)) * float(defense_input)  *(1+float(Leader_Skill))*(1+yes) *  (1+float(Support_from_Super) + int(Super_Attacks_Performed)*0.3)


            print("Defense: " + str(defense))
    elif character_id == "1014741" :
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)

            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
          
            ki_Spheres_obtained3 = input("Enter How Many Androids Category Allies(2-Type 2, 1- Type 1 )  : ")
            if (int(ki_Spheres_obtained3)>=4):
                ki_Spheres_obtained3=1.6
            else:
                ki_Spheres_obtained3=int(ki_Spheres_obtained3)*0.4

            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+1+ki_Spheres_obtained3+ float(support)) * float(defense_input)  *(1+float(Leader_Skill))*(1) *  (1+float(Support_from_Super) + int(Super_Attacks_Performed)*0.5)


            print("Defense: " + str(defense))
    elif character_id == "1023671" :
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)

            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
          
            ki_Spheres_obtained3 = input("Enter How Many Exreme Class allies attacking in the same turn (self excluded)(2-Type 2, 1- Type 1 )  : ")
            ki_Spheres_obtained3 =int(ki_Spheres_obtained3)*0.6
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+ki_Spheres_obtained3+1.2+ float(support)) * float(defense_input)  *(1+float(Leader_Skill))*(1) *  (1+float(Support_from_Super) + int(Super_Attacks_Performed)*0.3+float(Stack_Defense))


            print("Defense: " + str(defense))
    elif character_id == "1023631" :
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)

            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            ki_Spheres_obtained3 = input("Enter How Many Saviours Category allies attacking in the same turn (self excluded)(2-Type 2, 1- Type 1 )  : ")
            ki_Spheres_obtained3 =int(ki_Spheres_obtained3)*0.4
            if(int(ki_Spheres_obtained3)==2):
                ki_Spheres_obtained3=0.9
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+ki_Spheres_obtained3+1.7+ float(support)) * float(defense_input)  *(1+float(Leader_Skill))*(1) *  (1+float(Support_from_Super) + int(Super_Attacks_Performed)*0.3)


            print("Defense: " + str(defense))
    elif character_id == "1014641" :
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)

            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            ki_Spheres_obtained = input("Enter How Many Androids allies attacking in the same turn (2-Type 2, 1- Type 1 )  : ")
            ki_Spheres_obtained =int(ki_Spheres_obtained)*0.21
            ki_Spheres_obtained1 = input("Enter How Many Power Absorbtion allies attacking in the same turn (2-Type 2, 1- Type 1 )  : ")
            ki_Spheres_obtained1 =int(ki_Spheres_obtained1)*0.21
            ki_Spheres_obtained2 = input("Enter whether rotation is full Androids or Power Absorption Category characters and HP is 60% or more when attacking(Yes-Type 1, No- Type 0 )  : ")
            ki_Spheres_obtained2 =int(ki_Spheres_obtained2)*1.21
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+1.51+ki_Spheres_obtained+ki_Spheres_obtained1+ float(support)) * float(defense_input)  *(1+float(Leader_Skill))*(1+ki_Spheres_obtained2) *  (1+float(Support_from_Super))


            print("Defense: " + str(defense))
        else:
            print("Character information not found.")
    elif character_id == "4014751" :
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)

            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
         
            ki_Spheres_obtained2 = input("Enter whether HP is 60% or more when performing a super attack(Yes-Type 1, No- Type 0 )  : ")
            ki_Spheres_obtained2 =int(ki_Spheres_obtained2)*0.21
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+1.5+ float(support)) * float(defense_input)  *(1+float(Leader_Skill))*(1+ki_Spheres_obtained2+0.21) *  (1+float(Support_from_Super))


            print("Defense: " + str(defense))
    elif character_id == "1013731" :
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)

            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
         
            ki_Spheres_obtained2 = input("Enter whether HP is 77% or less at start of turn(Yes-Type 1, No- Type 0 )  : ")
            ki_Spheres_obtained2 =int(ki_Spheres_obtained2)*0.77
            ki_Spheres_obtained = input("Enter whether there is a Piccolo character in your team.(Yes-Type 1, No- Type 0 )  : ")
            ki_Spheres_obtained =int(ki_Spheres_obtained)*0.33            
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+0.77+ float(support)+ki_Spheres_obtained2+ki_Spheres_obtained) * float(defense_input)  *(1+float(Leader_Skill))*(1) *  (1+float(Support_from_Super))


            print("Defense: " + str(defense))
    elif character_id == "4029101" :
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)

            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
         
         
          
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+3.5+ float(support)) * float(defense_input)  *(1+float(Leader_Skill))*(1+1) *  (1+float(Support_from_Super)+int(Super_Attacks_Performed)*0+int(UltraOrUnitSuper)*0)


            print("Defense: " + str(defense))
    elif character_id == "4029111" :
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)

            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
         
         
            ki_Spheres_obtained = input("Enter whether this defense stat is calculated before or after this character attacks(Before-Type 0, After- Type 1 )  : ")
            ki_Spheres_obtained =int(ki_Spheres_obtained)*1.11          
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+4+ float(support)) * float(defense_input)  *(1+float(Leader_Skill))*(1+ki_Spheres_obtained) *  (1+float(Support_from_Super)+int(Super_Attacks_Performed)*0.3+int(UltraOrUnitSuper)*0.5)


            print("Defense: " + str(defense))
    elif character_id == "1029091" :
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)

            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
         
         
            ki_Spheres_obtained = input("Enter whether this defense stat is calculated before or after this character attacks(Before-Type 0, After- Type 1 )  : ")
            ki_Spheres_obtained =int(ki_Spheres_obtained)*0.5           
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+3.5+ float(support)) * float(defense_input)  *(1+float(Leader_Skill))*(1+ki_Spheres_obtained) *  (1+float(Support_from_Super)+int(Super_Attacks_Performed)*0.3+int(UltraOrUnitSuper)*0.5)


            print("Defense: " + str(defense))
    elif character_id == "1019371" :
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)

            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
         
            ki_Spheres_obtained2 = input("Enter whether it has been more than 7 turns since this character's starting turn(Yes-Type 1, No- Type 0 )  : ")
            if (int(ki_Spheres_obtained2)==0):
                ki_Spheres_obtained2 =2
            else:
                ki_Spheres_obtained2 =0
            ki_Spheres_obtained = input("Enter number of Reps of U7 Allies Attacking in the same turn as this character(1-Type 1, 2- Type 2 )  : ")
            ki_Spheres_obtained=int(ki_Spheres_obtained)*0.1
            ki_Spheres_obtained1 = input("Enter number of attacks evaded by this character(1-Type 1, 2- Type 2 )  : ")
            ki_Spheres_obtained1=int(ki_Spheres_obtained1)*0.07
            if(ki_Spheres_obtained1>=0.77):
                ki_Spheres_obtained1=0.77
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+2+ float(support)+ki_Spheres_obtained2+ki_Spheres_obtained) * float(defense_input)  *(1+float(Leader_Skill))*(1+ki_Spheres_obtained1) *  (1+float(Support_from_Super))


            print("Defense: " + str(defense))
    elif character_id == "1012701" :
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)

            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
         
            ki_Spheres_obtained2 = input("Enter whether facing 2 or more enemies(Yes-Type 1, No- Type 0 )  : ")
            ki_Spheres_obtained2 =int(ki_Spheres_obtained2)*0.6
          
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+0.8+ float(support)+ki_Spheres_obtained2) * float(defense_input)  *(1+float(Leader_Skill))*(1) *  (1+float(Support_from_Super))


            print("Defense: " + str(defense))
    elif character_id == "1007191" :
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)

            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
         
            ki_Spheres_obtained2 = input("Enter whether facing 2 or more enemies(Yes-Type 1, No- Type 0 )  : ")
            ki_Spheres_obtained2 =int(ki_Spheres_obtained2)*0.4
          
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+0.8+ ki_Spheres_obtained2+float(support)+ki_Spheres_obtained2) * float(defense_input)  *(1+float(Leader_Skill))*(1) *  (1+float(Support_from_Super)+int(Super_Attacks_Performed)*0.3)


            print("Defense: " + str(defense))
    elif character_id == "1020151" :
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)

            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
         
            ki_Spheres_obtained2 = input("Enter whether there is a Goku's Family Category enemy(Yes-Type 1, No- Type 0 )  : ")
            ki_Spheres_obtained2 =int(ki_Spheres_obtained2)*0.2
          
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+1+ float(support)+ki_Spheres_obtained2) * float(defense_input)  *(1+float(Leader_Skill))*(1) *  (1+float(Support_from_Super))


            print("Defense: " + str(defense))
    elif character_id == "4017751" :
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)

            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
         
            ki_Spheres_obtained2 = input("Enter whether there is a Androids/Cell Saga Category enemy(Yes-Type 1, No- Type 0 )  : ")
            ki_Spheres_obtained2 =int(ki_Spheres_obtained2)*0.5
          
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+0.9+ float(support)+ki_Spheres_obtained2) * float(defense_input)  *(1+float(Leader_Skill))*(1) *  (1+float(Support_from_Super)+int(Super_Attacks_Performed)*0.3)


            print("Defense: " + str(defense))
    elif character_id == "1019681" :
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)

            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            hits = input("Enter number of hits received by this character(Yes-Type 1, No- Type 0 )  : ")
            hits1 = int(hits) * 0.2
            if (hits1>=0.8):
                hits1 = 0.8
            else:
                hits1 = hits1
            if (int(hits)>=8):
                hits2 = 0.2
            else:
                hits2 = 0
                
         
            ki_Spheres_obtained2 = input("Enter whether there is a Goku's Family Category ally on the team(Yes-Type 1, No- Type 0 )  : ")
            ki_Spheres_obtained2 =int(ki_Spheres_obtained2)*1.8
            ki_Spheres_obtained1 = input("Enter whether buff of DEF +180% before the character receives an attack 8 times in battle is up(Yes-Type 1, No- Type 0 )  : ")
            ki_Spheres_obtained3 = int(ki_Spheres_obtained1)*1.8
            
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+ float(support)+ki_Spheres_obtained2 + ki_Spheres_obtained3) * float(defense_input)  *(1+float(Leader_Skill))*(1+ hits1 +hits2) *  ((1+float(Support_from_Super)))


            print("Defense: " + str(defense))
    elif character_id == "1029161" :
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)

            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
         
           
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+ float(support)+2) * float(defense_input)  *(1+float(Leader_Skill))*(1+1.86) *  (1+float(Support_from_Super)+int(Super_Attacks_Performed)*0.86)


            print("Defense: " + str(defense))
    elif character_id == "1029141" :
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)

            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
         
            ki_Spheres_obtained2 = input("Enter whether there are another 2 or more Turtle School Category allies in the team(Yes-Type 1, No- Type 0 )  : ")
            ki_Spheres_obtained2 =int(ki_Spheres_obtained2)*1.5
            ki_Spheres_obtained = input("Enter number of peppy gal allies attacking on the same turn(1-Type 1, 2- Type 2 )  : ")
            ki_Spheres_obtained =int(ki_Spheres_obtained)*0.82         
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+ float(support)+ki_Spheres_obtained+1.5) * float(defense_input)  *(1+float(Leader_Skill))*(1+ki_Spheres_obtained2) *  (1+float(Support_from_Super)+int(Super_Attacks_Performed)*0.3+int(UltraOrUnitSuper)*0.5)


            print("Defense: " + str(defense))
    elif character_id == "1029511" :
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)

            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")

            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+ float(support)+1.5) * float(defense_input)  *(1+float(Leader_Skill))*(1+1.5 + int(UltraOrUnitSuper)*1.5) *  (1+float(Support_from_Super)+int(Super_Attacks_Performed)*0.3+ int(UltraOrUnitSuper)*0.5)


            print("Defense: " + str(defense))
    elif character_id == "1023171" :
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)

            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            ki_Spheres_obtained = input("Enter number of Super Attacks Performed by this character(1-Type 1, 2- Type 2 )  : ")
            ki_Spheres_obtained =int(ki_Spheres_obtained)*0.2
            if(ki_Spheres_obtained>=0.8):
                ki_Spheres_obtained = 0.8
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+ float(support)+1.6) * float(defense_input)  *(1+float(Leader_Skill))*(1+1.2+ki_Spheres_obtained) *  (1+float(Support_from_Super)+int(Super_Attacks_Performed)*0.3)


            print("Defense: " + str(defense))
    elif character_id == "1020071" :
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)

            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
         
            ki_Spheres_obtained2 = input("Enter whether facing 1 enemy(Yes-Type 1, No- Type 0 )  : ")
            ki_Spheres_obtained2 =int(ki_Spheres_obtained2)*1.5
            ki_Spheres_obtained = input("Enter number of Tournament Participants Category allies on the team(1-Type 1, 2- Type 2 )  : ")
            ki_Spheres_obtained =int(ki_Spheres_obtained)*0.1       
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+ float(support)+ki_Spheres_obtained+2+ki_Spheres_obtained2) * float(defense_input)  *(1+float(Leader_Skill))*(1) *  (1+float(Support_from_Super)+int(Super_Attacks_Performed)*0.5)


            print("Defense: " + str(defense))
    elif character_id == "1021481" :
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")
    


            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
         
            ki_Spheres_obtained2 = input("Enter whether there is 5 or more allies in the Reps of Universe 7 category on the team(Yes-Type 1, No- Type 0 )  : ")
            ki_Spheres_obtained2 =int(ki_Spheres_obtained2)*0.77
            support1 = input("Enter no of rainbow ki spheres obtained(1- Type 1, 0-Type 0) : ")
            support1=int(support1)*0.07
            support2 = input("Enter amount of ki this character has(10- Type 10, 20-Type 20) : ")
            if (int(support2)>=17 and int(support2)<=21):
                support2=0.77
            elif(int(support2)>=22):
                support2=1.54
            else:
                support2=0
                
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
   

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
  

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
   

                
            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")

            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+ float(support)+ki_Spheres_obtained2+1.77+support1) * float(defense_input)  *(1+float(Leader_Skill))*(1+support2) *  (1+float(Support_from_Super)+int(Super_Attacks_Performed)*0.3+int(UltraOrUnitSuper)*0.3)
            

            print("Defense: " + str(defense))

   


    elif character_id == "1029291" :
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)

            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
         

            support2 = input("Enter amount of ki spheres this character has obtained(10- Type 10, 2-Type 2) : ")
            support1=int(support2)*0.5

            if (int(support2)>=3):
                support2=2

            else:
                support2=0
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+ float(support)+support1) * float(defense_input)  *(1+float(Leader_Skill))*(1+support2) *  (1+float(Support_from_Super)+int(Super_Attacks_Performed)*0+int(UltraOrUnitSuper)*0)


            print("Defense: " + str(defense))
    elif character_id == "1017241" :
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)

            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
         
            ki_Spheres_obtained2 = input("Enter whether there is a Goku's Family Category ally on the team(Yes-Type 1, No- Type 0 )  : ")
            ki_Spheres_obtained2 =int(ki_Spheres_obtained2)*0.2
            ki_Spheres_obtained = input("Enter whether there is a Vegeta's Family Category ally on the team(Yes-Type 1, No- Type 0 )  : ")
            ki_Spheres_obtained =int(ki_Spheres_obtained2)*0.2
            
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+0.77+ float(support)+ki_Spheres_obtained2+ki_Spheres_obtained) * float(defense_input)  *(1+float(Leader_Skill))*(1) *  (1+float(Support_from_Super))


            print("Defense: " + str(defense))
    elif character_id == "1010801" :
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)

            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
         
            ki_Spheres_obtained2 = input("Enter whether there there are 3 or more Androids Category allies on the team(Yes-Type 1, No- Type 0 )  : ")
            ki_Spheres_obtained2 =int(ki_Spheres_obtained2)*0.3
          
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+ float(support)+ki_Spheres_obtained2) * float(defense_input)  *(1+float(Leader_Skill))*(1+0.8) *  (1+float(Support_from_Super))


            print("Defense: " + str(defense))
    elif character_id == "1029181" :
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)

            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
         

          
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+ float(support)+1.5) * float(defense_input)  *(1+float(Leader_Skill))*(1+1.5) *  (1+float(Support_from_Super)+int(Super_Attacks_Performed)*0.5)


            print("Defense: " + str(defense))
    elif character_id == "1029201" :
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)

            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
         
            ki_Spheres_obtained2 = input("Enter whether there there are 3 or more Peppy Gals or DB Saga Category allies on the team(Yes-Type 1, No- Type 0 )  : ")
            ki_Spheres_obtained2 =int(ki_Spheres_obtained2)*0.3
          
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+ float(support)+1.5+ki_Spheres_obtained2+0.3) * float(defense_input)  *(1+float(Leader_Skill))*(1+1.5) *  (1+float(Support_from_Super)+int(Super_Attacks_Performed)*0.5)


            print("Defense: " + str(defense))
    elif character_id == "1014661" :
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)

            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
         
            ki_Spheres_obtained2 = input("Enter whether HP is 80% or more when performing a super attack(Yes-Type 1, No- Type 0 )  : ")
            ki_Spheres_obtained2 =int(ki_Spheres_obtained2)*0.21
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+1.21+ float(support)) * float(defense_input)  *(1+float(Leader_Skill))*(1+ki_Spheres_obtained2+0.21) *  (1+float(Support_from_Super))


            print("Defense: " + str(defense))
    elif character_id == "1024171" :
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)

            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            ki_Spheres_obtained2 = input("Enter whether HP is 60% or more at start of turn(Yes-Type 1, No- Type 0 )  : ")
            ki_Spheres_obtained2 =int(ki_Spheres_obtained2)*1
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+1.8+ki_Spheres_obtained2+ float(support)) * float(defense_input)  *(1+float(Leader_Skill))*(1+0.5) *  (1+float(Support_from_Super)+int(Super_Attacks_Performed)*0.3)


            print("Defense: " + str(defense))
        else:
            print("Character information not found.")
    elif character_id == "1028421" :
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)

            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            ki_Spheres_obtained = input("Enter How Many Turns elasped with this character (2-Type 2, 1- Type 1 )  : ")
            if(int(ki_Spheres_obtained)>=5):
                ki_Spheres_obtained =5
            ki_Spheres_obtained =int(ki_Spheres_obtained)*0.2
            ki_Spheres_obtained2 = input("Enter whether when there is another Androids or Crossover Category ally attacking in the same turn or an Androids or Crossover Category enemy(Yes-Type 1, No- Type 0 )  : ")
            ki_Spheres_obtained2 =int(ki_Spheres_obtained2)*1
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+1.5+ki_Spheres_obtained2+ float(support)) * float(defense_input)  *(1+float(Leader_Skill))*(1+ki_Spheres_obtained+0.5) *  (1+float(Support_from_Super))


            print("Defense: " + str(defense))
        else:
            print("Character information not found.")
    elif character_id == "1015471" :
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)

            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            ki_Spheres_obtained = input("Enter How Many Turns elasped with this character (2-Type 2, 1- Type 1 )  : ")
            if(int(ki_Spheres_obtained)>=2):
                ki_Spheres_obtained =2
            ki_Spheres_obtained =int(ki_Spheres_obtained)*0.3
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+0.8+ float(support)) * float(defense_input)  *(1+float(Leader_Skill))*(1+ki_Spheres_obtained) *  (1+float(Support_from_Super)+Stack_Defense+int(Super_Attacks_Performed)*0.5)


            print("Defense: " + str(defense))
        else:
            print("Character information not found.")
    elif character_id == "1011111" :
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)

            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            ki_Spheres_obtained = input("Enter How Many Turns elasped with this character (2-Type 2, 1- Type 1 )  : ")
            if(int(ki_Spheres_obtained)>=3):
                ki_Spheres_obtained =1.59
            else:
                ki_Spheres_obtained=int(ki_Spheres_obtained)*0.59

            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+1+ float(support)) * float(defense_input)  *(1+float(Leader_Skill))*(1+ki_Spheres_obtained+0.59) *  (1+float(Support_from_Super)+int(Super_Attacks_Performed)*0.3)


            print("Defense: " + str(defense))
        else:
            print("Character information not found.")
    elif character_id == "1026201" :
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)

            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            ki_Spheres_obtained1 = input("Enter whether all allies attacking in the same turn are Extreme Class  (Yes-Type 1, No- Type 0 )  : ")
            ki_Spheres_obtained1=int(ki_Spheres_obtained1)*0.7
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+1+ki_Spheres_obtained1+ float(support)) * float(defense_input)  *(1+float(Leader_Skill))*(1+0.7) *  (1+float(Support_from_Super)+int(Super_Attacks_Performed)*0.3)


            print("Defense: " + str(defense))
    elif character_id == "1026231" :
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)

            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            ki_Spheres_obtained = input("Enter How Many KI Spheres Obtained with this character (2-Type 2, 1- Type 1 )  : ")
            if(int(ki_Spheres_obtained)>=3):
                ki_Spheres_obtained =0.5
            else:
                ki_Spheres_obtained=0.3
            ki_Spheres_obtained1 = input("Enter whether facing a enemy whose name contains Goku (Youth, Captain Ginyu, Jr., etc. excluded)  (Yes-Type 1, No- Type 0 )  : ")
            ki_Spheres_obtained1=int(ki_Spheres_obtained1)*1.5
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+1.5+ki_Spheres_obtained+ki_Spheres_obtained1+ float(support)) * float(defense_input)  *(1+float(Leader_Skill))*(1+1) *  (1+float(Support_from_Super)+int(Super_Attacks_Performed)*0.5)


            print("Defense: " + str(defense))
 
    elif character_id == "1029401" :
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)

            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            ki_Spheres_obtained = input("Enter How Many turns has passed from this character's first entry turn (2-Type 2, 1- Type 1 )  : ")
            if(int(ki_Spheres_obtained)>1):
                ki_Spheres_obtained =0
            else:
                ki_Spheres_obtained=1
            ki_Spheres_obtained=int(ki_Spheres_obtained)*0.6
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+2+ki_Spheres_obtained+ float(support)) * float(defense_input)  *(1+float(Leader_Skill))*(1) *  (1+float(Support_from_Super))


            print("Defense: " + str(defense))
    elif character_id == "1029641" :
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)

            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            ki_Spheres_obtained = input("Enter How Many turns has passed from this character's first entry turn (2-Type 2, 1- Type 1 )  : ")
            if(int(ki_Spheres_obtained)>5):
                ki_Spheres_obtained =0
            else:
                ki_Spheres_obtained=1
            ki_Spheres_obtained1 = input("Enter whether there is a ally whose name contains Broly on the team   (Yes-Type 1, No- Type 0 )  : ")
            ki_Spheres_obtained1=int(ki_Spheres_obtained1)*1*ki_Spheres_obtained
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+1.8+ki_Spheres_obtained1+0.25+ float(support)) * float(defense_input)  *(1+float(Leader_Skill))*(1+1) *  (1+float(Support_from_Super)+int(Super_Attacks_Performed)*0.5)


            print("Defense: " + str(defense))
    elif character_id == "1021291" :
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)

            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            support1 = input("Enter no of Type Ki Spheres Obtained with this character(1- Type 1) : ")
            if (support1>=4):
                support1=0.3
 
               
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+1.2+ float(support)+support1) * float(defense_input)  *(1+float(Leader_Skill))*(1) *  (1+float(Support_from_Super)+int(Super_Attacks_Performed)*0.3)


            print("Defense: " + str(defense))
    elif character_id == "1020431" :
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)

            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            support1 = input("Enter no of turns this character has been on rotation when there is a Pure Saiyans or Hybrid Saiyans Category enemy(1- Type 1) : ")

            support1=0.3 *int(support1)
            if (support1>=0.9):
                support1=0.9
 
               
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+0.6+ float(support)+support1) * float(defense_input)  *(1+float(Leader_Skill))*(1) *  (1+float(Support_from_Super))


            print("Defense: " + str(defense))
    elif character_id == "1022191" :
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)

            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            support1 = input("Enter whether its this character's first turn or whether hp was 70% or less at start of turn(Yes- Type 1, No - Type 0) : ")
            support1 = int(support1)*0.5

 
               
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+2+ float(support)+support1) * float(defense_input)  *(1+float(Leader_Skill))*(1+0.5) *  (1+float(Support_from_Super) + int(Super_Attacks_Performed)*0.5 + int(UltraOrUnitSuper)*0.5)


            print("Defense: " + str(defense))
    elif character_id == "1021031" :
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)

            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            support1 = input("Enter no of Space-Traveling Warriors Category ally on the team(1- Type 1) : ")

            support1=0.3 *int(support1)
 
               
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+ float(support)+support1) * float(defense_input)  *(1+float(Leader_Skill))*(1) *  (1+float(Support_from_Super))


            print("Defense: " + str(defense))
    elif character_id == "1010791" :
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)

            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            support1 = input("Enter no of Androids Category ally on the team(1- Type 1) : ")

            support1=0.13 *int(support1)
 
               
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+ 0.5+float(support)+support1) * float(defense_input)  *(1+float(Leader_Skill))*(1) *  (1+float(Support_from_Super))


            print("Defense: " + str(defense))
    elif character_id == "1008541" :
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)

            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            support1 = input("Enter no of Super Attacks Performed by this character(1- Type 1) : ")
            if (support1>=3):
                support1=0.3
 
               
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+ float(support)) * float(defense_input)  *(1+float(Leader_Skill))*(1+support1+0.6) *  (1+float(Support_from_Super)+int(Super_Attacks_Performed)*0.3)


            print("Defense: " + str(defense))
    elif character_id == "1021331" :
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)

            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            support1 = input("Enter no of Type Ki Spheres Obtained with this character(1- Type 1) : ")
            if (support1>=3):
                support1=0.3
 
               
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+1.5+ float(support)+support1) * float(defense_input)  *(1+float(Leader_Skill))*(1) *  (1+float(Support_from_Super))


            print("Defense: " + str(defense))
    elif character_id == "1021561" :
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)

            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            support1 = input("Enter no of hits received by this character(1- Type 1) : ")
            support1=int(support1)*0.1
            if (support1>=0.5):
                support1=0.5
 
               
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+0.5+ float(support)) * float(defense_input)  *(1+float(Leader_Skill))*(1+support1) *  (1+float(Support_from_Super))


            print("Defense: " + str(defense))
    elif character_id == "1028190" :
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)

            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            support1 = input("Enter no of tournament participants category characters on the team(1- Type 1) : ")
            support1=int(support1)*0.2
            if (support1>=1):
                support1=1
            support3 = input("Enter no of tournament participants category characters attacking in the same turn as this character other than this character(1- Type 1) : ")
            support3=int(support3)*1               

               
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+1.5+support1+ float(support)) * float(defense_input)  *(1+float(Leader_Skill))*(1+support3) *  (1+float(Support_from_Super)+int(Super_Attacks_Performed)*0.3)


            print("Defense: " + str(defense))
    elif character_id == "1020051" :
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)

            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            support1 = input("Enter no of attacks performed by this character(1- Type 1) : ")
            support1=int(support1)*0.2
            if (support1>=0.58):
                support1=0.58
            support2 = input("Enter Whether there is a extreme class enemy(If no, type 0. If yes, type 1.)  : ")
            support2=int(support2)*0.58
               
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+2.2+support2+ float(support)) * float(defense_input)  *(1+float(Leader_Skill))*(1+support1) *  (1+float(Support_from_Super)+int(Super_Attacks_Performed)*0.5)


            print("Defense: " + str(defense))
    elif character_id == "4022201" :
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)

            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            Character_Stacks10 = input("Enter Whether before or after super. (After Super - Type 1, Before Super - Type 0)  : ")
            Character_Stacks11 = int(Character_Stacks10)*0.77
            Character_Stacks10 = int(Character_Stacks10)

               
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+2.5+ float(support)) * float(defense_input)  *(1+float(Leader_Skill))*(1+Character_Stacks11) *  (Character_Stacks10*(1+float(Support_from_Super)+int(Super_Attacks_Performed)*0.3+int(UltraOrUnitSuper)*0.5))


            print("Defense: " + str(defense))
    elif character_id == "4017791" :
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)

            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            dodge = input("Enter Whether rotation is full extreme class. (Yes - Type 1, No - Type 0)  : ")
            dodge = int(dodge)*0.66
            dodge1 = input("What slot is this character in?(1 - Type 1, 2 - Type 2 )  : ")
            if (dodge1 > 1):
                dodge1=0
            else:
                dodge1=1

               
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+dodge+ float(support) +1 + dodge1) * float(defense_input)  *(1+float(Leader_Skill))*(1) *  (1*(1+float(Support_from_Super)+int(Super_Attacks_Performed)*0.5+int(UltraOrUnitSuper)*1))


            print("Defense: " + str(defense))
    elif character_id == "1017781" :
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)

            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            Character_Stacks10 = input("Enter Whether before or after attacking. (Before attacking - Type 1, After attacking - Type 0)  : ")
            Character_Stacks11 = int(Character_Stacks10)*1
            Character_Stacks10 = int(Character_Stacks10)
            if (Character_Stacks10==0):
                Character_Stacks10= 1
            else:
                Character_Stacks10= 0
                
            dodge = input("Enter Whether rotation is full extreme class. (Yes - Type 1, No - Type 0)  : ")
            dodge = int(dodge)*0.6
            dodge1 = input("What slot is this character in?(1 - Type 1, 2 - Type 2 )  : ")
            if (dodge1 > 1):
                dodge1=0
            else:
                dodge1=1

               
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+dodge+ float(support) +Character_Stacks11 + dodge1) * float(defense_input)  *(1+float(Leader_Skill))*(1) *  (Character_Stacks10*(1+float(Support_from_Super)+int(Super_Attacks_Performed)*0.3+int(UltraOrUnitSuper)*1))


            print("Defense: " + str(defense))
    elif character_id == "1022591" :
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)

            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            support1 = input("Enter no of attacks performed by this character(1- Type 1) : ")
            support1=int(support1)*0.66
            if (support1>=1.66):
                support1=1.66

               
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+1.66+ float(support)) * float(defense_input)  *(1+float(Leader_Skill))*(1+support1) *  (1+float(Support_from_Super)+int(Super_Attacks_Performed)*0.3+int(UltraOrUnitSuper)*0.5)


            print("Defense: " + str(defense))
    elif character_id == "1017801" :
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)

            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            support1 = input("Enter no of hits received by this character(1- Type 1) : ")
            support1=int(support1)*0.5
            if (support1>=2):
                support1=2
            support2 = input("Enter Whether  there is an enemy of the Earthling or Tournament Participants category(If no, type 0. If yes, type 1.)  : ")
            support2=int(support2)*1
               
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+support2+ float(support)) * float(defense_input)  *(1+float(Leader_Skill))*(1+support1+2) *  (1+float(Support_from_Super)+int(Super_Attacks_Performed)*0.3)


            print("Defense: " + str(defense))
    elif character_id == "1019951" :
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)

            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            support2 = input("Enter Whether this character is attacking a super class character(If no, type 0. If yes, type 1.)  : ")
            support2=int(support2)*1
               
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+2.4+ float(support)) * float(defense_input)  *(1+float(Leader_Skill))*(1+support2) *  (1+float(Support_from_Super)+int(Super_Attacks_Performed)*1)


            print("Defense: " + str(defense))
    elif character_id == "4013551" :
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)

            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")


 
               
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+1+ float(support)) * float(defense_input)  *(1+float(Leader_Skill))*(1) *  (1+float(Support_from_Super)+int(Super_Attacks_Performed)*0.2+Stack_Defense)


            print("Defense: " + str(defense))
    elif character_id == "1023891" :
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)

            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")


 
            ki_Spheres_obtained2 = input("Enter whether 5 or more Representatives of Universe 7 Category allies on the team (Yes-Type 1, No- Type 0 )  : ")
            ki_Spheres_obtained2=int(ki_Spheres_obtained2)*0.7            
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+0.7+ki_Spheres_obtained2+ float(support)) * float(defense_input)  *(1+float(Leader_Skill))*(1) *  (1+float(Support_from_Super)+int(Super_Attacks_Performed)*0.3+int(UltraOrUnitSuper)*0.3)


            print("Defense: " + str(defense))
    elif character_id == "1020401" :
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)

            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            ki_Spheres_obtained2 = input("Enter whether ally whose name contains cauliflia on the Team (Yes-Type 1, No- Type 0 )  : ")
            ki_Spheres_obtained2=int(ki_Spheres_obtained2)*0.7 
            ki_Spheres_obtained1 = input("Enter whether ally whose name contains Caulifla on the turn (Yes-Type 1, No- Type 0 )  : ")
            ki_Spheres_obtained1=int(ki_Spheres_obtained1)*0.16
           
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+0.3+ki_Spheres_obtained1+ki_Spheres_obtained2+ float(support)) * float(defense_input)  *(1+float(Leader_Skill))*(1+1.2) *  (1+float(Support_from_Super)+int(Super_Attacks_Performed)*0)


            print("Defense: " + str(defense))
    elif character_id == "1025901" :
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)

            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            ki_Spheres_obtained = input("Enter whether a Goku's Family Category ally on the team (Yes-Type 1, No- Type 0 )  : ")
            ki_Spheres_obtained=int(ki_Spheres_obtained)*0.7
            ki_Spheres_obtained1 = input("Enter whether an ally whose name includes Goten (Kid) attacking in the same turn (Yes-Type 1, No- Type 0 )  : ")
            ki_Spheres_obtained1=int(ki_Spheres_obtained1)*0.7
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+1.2+ki_Spheres_obtained+ki_Spheres_obtained1+ float(support)) * float(defense_input)  *(1+float(Leader_Skill))*(1) *  (1+float(Support_from_Super)+int(Super_Attacks_Performed)*0.3+Stack_Defense)


            print("Defense: " + str(defense))
    elif character_id == "1019861" :
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)

            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            ki_Spheres_obtained = input("Enter whether an ally whose name includes Goten (Kid) on the team (Yes-Type 1, No- Type 0 )  : ")
            ki_Spheres_obtained3 = input("Enter number of attacks evaded by this character so far (1-Type 1, 0- Type 0 )  : ")
            if(int(ki_Spheres_obtained)==1):       
                ki_Spheres_obtained=int(ki_Spheres_obtained3)*0.2
            else:
                ki_Spheres_obtained=0
            if(ki_Spheres_obtained>=0.6):
                ki_Spheres_obtained=0.59
            ki_Spheres_obtained1 = input("Enter whether an ally whose name includes Goten (Kid) attacking in the same turn (Yes-Type 1, No- Type 0 )  : ")
            ki_Spheres_obtained1=int(ki_Spheres_obtained1)*0.59
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+1.89+ki_Spheres_obtained1+ float(support)) * float(defense_input)  *(1+float(Leader_Skill))*(1+ki_Spheres_obtained) *  (1+float(Support_from_Super)+int(Super_Attacks_Performed)*0.3)


            print("Defense: " + str(defense))
    elif character_id == "1019701" :
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)

            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            ki_Spheres_obtained = input("Enter number of Goku's Family Category ally attacking in the same turn (1-Type 1, 0- Type 0 )  : ")
    
            ki_Spheres_obtained=int(ki_Spheres_obtained)*0.2
   
            if(ki_Spheres_obtained>=0.6):
                ki_Spheres_obtained=0.59
            ki_Spheres_obtained2 = input("Enter number of times this character has been on rotation (1-Type 1, 2- Type 2 )  : ")
    
            ki_Spheres_obtained2=int(ki_Spheres_obtained2)*0.2
   
            if(ki_Spheres_obtained2>=0.6):
                ki_Spheres_obtained2=0.59
            ki_Spheres_obtained1 = input("Enter whether an ally whose name includes Goten (Kid) attacking in the same turn (Yes-Type 1, No- Type 0 )  : ")
            ki_Spheres_obtained1=int(ki_Spheres_obtained1)*0.59
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+ki_Spheres_obtained+ float(support)) * float(defense_input)  *(1+float(Leader_Skill))*(1+ki_Spheres_obtained2) *  (1+float(Support_from_Super)+int(Super_Attacks_Performed)*0.3+int(UltraOrUnitSuper)*0.3)


            print("Defense: " + str(defense))
    elif character_id == "1019881" :
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)

            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            ki_Spheres_obtained = input("Enter whether there is an Goku's Family Category ally attacking in the same turn (Yes-Type 1, No- Type 0 )  : ")
            ki_Spheres_obtained=int(ki_Spheres_obtained)*0.58
            ki_Spheres_obtained1 = input("Enter number of Super Attacks Performed (1-Type 1, 0- Type 0 )  : ")
            
            ki_Spheres_obtained1=int(ki_Spheres_obtained1)*0.2
            if (float(ki_Spheres_obtained1)>=0.6):
                ki_Spheres_obtained1=0.58
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+0.78+ki_Spheres_obtained+ float(support)) * float(defense_input)  *(1+float(Leader_Skill))*(1+ki_Spheres_obtained1) *  (1+float(Support_from_Super)+int(Super_Attacks_Performed)*0)


            print("Defense: " + str(defense))
    elif character_id == "1019891" :
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)

            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            ki_Spheres_obtained = input("Enter whether there is an ally whose name includes Goku (Angel) or Trunks (Kid) on the team (Yes-Type 1, No- Type 0 )  : ")
            ki_Spheres_obtained=int(ki_Spheres_obtained)*0.5
            ki_Spheres_obtained1 = input("Enter whether an ally whose name includes Goku (Angel) or Trunks (Kid) attacking in the same turn (Yes-Type 1, No- Type 0 )  : ")
            ki_Spheres_obtained1=int(ki_Spheres_obtained1)*0.1
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+1.8+ki_Spheres_obtained+ki_Spheres_obtained1+ float(support)) * float(defense_input)  *(1+float(Leader_Skill))*(1) *  (1+float(Support_from_Super)+int(Super_Attacks_Performed)*0.5)


            print("Defense: " + str(defense))
    elif character_id == "1026001" :
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)

            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            ki_Spheres_obtained = input("Enter whether a Vegeta's Family Category ally on the team (Yes-Type 1, No- Type 0 )  : ")
            ki_Spheres_obtained=int(ki_Spheres_obtained)*0.7
            ki_Spheres_obtained1 = input("Enter whether an ally whose name includes Trunks (Kid) attacking in the same turn (Yes-Type 1, No- Type 0 )  : ")
            ki_Spheres_obtained1=int(ki_Spheres_obtained1)*0.7
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+1.2+ki_Spheres_obtained+ki_Spheres_obtained1+ float(support)) * float(defense_input)  *(1+float(Leader_Skill))*(1+0.7) *  (1+float(Support_from_Super)+int(Super_Attacks_Performed)*0.3)


            print("Defense: " + str(defense))
    elif character_id == "1026391" :
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)

            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            ki_Spheres_obtained1 = input("Enter whether attacking an extreme class enemy  (Yes-Type 1, No- Type 0 )  : ")
            ki_Spheres_obtained1=int(ki_Spheres_obtained1)*0.3
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+1.7+ float(support)) * float(defense_input)  *(1+float(Leader_Skill))*(1+ki_Spheres_obtained1) *  (1+float(Support_from_Super)+int(Super_Attacks_Performed)*0.5+int(UltraOrUnitSuper)*0.5)


            print("Defense: " + str(defense))
    elif character_id == "1011451" :
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)

            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            ki_Spheres_obtained1 = input("Enter number of Ki Spheres Obtained : ")
            ki_Spheres_obtained1 =int(ki_Spheres_obtained1)*0.2
            ki_Spheres_obtained3 = input("Enter How Many Future Saga allies attacking in the same turn (self excluded)(2-Type 2, 1- Type 1 )  : ")
            ki_Spheres_obtained3 =int(ki_Spheres_obtained3)*0.5
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+ki_Spheres_obtained3+ki_Spheres_obtained1+1.5+ float(support)) * float(defense_input)  *(1+float(Leader_Skill))*(1) *  (1+float(Support_from_Super) + int(Super_Attacks_Performed)*0.3)


            print("Defense: " + str(defense))
        else:
            print("Character information not found.")
    elif character_id == "1022861" :
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)

            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")

            ki_Spheres_obtained3 = input("Enter How Many Universe Survival Saga Category ally on the team(2-Type 2, 1- Type 1 )  : ")
            ki_Spheres_obtained3 =int(ki_Spheres_obtained3)*0.06
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+ki_Spheres_obtained3+1.7+ float(support)) * float(defense_input)  *(1+float(Leader_Skill))*(1+1.2) *  (1+float(Support_from_Super) + int(UltraOrUnitSuper)*0.2+Stack_Defense)


            print("Defense: " + str(defense))
    elif character_id == "1013531" :
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)

            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")

            ki_Spheres_obtained3 = input("Enter How Many Universe Survival Saga Category ally on the team(2-Type 2, 1- Type 1 )  : ")
            ki_Spheres_obtained3 =int(ki_Spheres_obtained3)*0.07
            if (float(ki_Spheres_obtained3)>=0.49):
                ki_Spheres_obtained3=0.49
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+ki_Spheres_obtained3+ float(support)) * float(defense_input)  *(1+float(Leader_Skill))*(1+1.2) *  (1+float(Support_from_Super) + int(Super_Attacks_Performed)*0.6)


            print("Defense: " + str(defense))
    elif character_id == "1020391" :
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)

            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")

            ki_Spheres_obtained3 = input("Enter How Many Universe Survival Saga Category ally on the team(2-Type 2, 1- Type 1 )  : ")
            ki_Spheres_obtained3 =int(ki_Spheres_obtained3)*0.3
            if (float(ki_Spheres_obtained3)>=1.6):
                ki_Spheres_obtained3=1.6
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+ki_Spheres_obtained3+ float(support)) * float(defense_input)  *(1+float(Leader_Skill))*(1) *  (1+float(Support_from_Super) + int(Super_Attacks_Performed)*0.3+Stack_Defense)


            print("Defense: " + str(defense))
    elif character_id == "1015131" or character_id == "1015141":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)

            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            ki_Spheres_obtained1 = input("Enter number of non-teq Ki Spheres Obtained : ")
            ki_Spheres_obtained2 = input("Enter number of teq Ki Spheres Obtained : ")
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+int(ki_Spheres_obtained1 )*0.5+int(ki_Spheres_obtained2)*0.7 + float(support)) * float(defense_input)  *(1+float(Leader_Skill))*(1) *  (1+float(Support_from_Super) + int(Super_Attacks_Performed)*float(Super_Attacks_Performed1)+int(UltraOrUnitSuper) *float(UltraOrUnitSuper1)+float(Stack_Defense))


            print("Defense: " + str(defense))
    elif character_id == "1027121":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)

            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            intro_buff = input("Enter whether there is another Future Saga Category ally attacking in the same turn at start of character's first turn and is 4 or less turns from character's first turn(Yes- Type 1, No - Type 0) : ")
            if(int(intro_buff)==1):
                intro_buff=1
            else:
                intro_buff=0

            slot_1 = input("Enter what slot character is in(1- type 1, 2- type 2, 3- type 3) : ")
            if (int(slot_1)==1):
                slot_1_def=1.5
            if (int(slot_1)>=2):
                slot_1_def=0.5
            ki_Spheres_obtained = input("Enter whether there is a realm of gods category enemy (Yes-Type 1, No-Type 0) : ")
            if(int(ki_Spheres_obtained)==1):
                realm_of_gods=0.5
            else:
                realm_of_gods=0

            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+1+slot_1_def+intro_buff+realm_of_gods) * float(defense_input)  *(1+float(Leader_Skill))*(1) *  (1+float(Support_from_Super)+int(UltraOrUnitSuper) *0.3+float(Stack_Defense))





            print("Defense: " + str(defense))
        else:
            print("Character information not found.")
    elif character_id == "1024111":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)

            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            slot_1 = input("Enter what slot character is in(1- type 1, 2- type 2, 3- type 3) : ")
            if (int(slot_1)==3):
                slot_1_def=1.45
            else:
                slot_1_def=0
            
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+1.2+slot_1_def+float(support)) * float(defense_input)  *(1+float(Leader_Skill))*(1) *  (1+float(Support_from_Super)+int(Super_Attacks_Performed)*0.3+float(Stack_Defense))





            print("Defense: " + str(defense))
    elif character_id == "1026031":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)

            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
           
            slot_1 = input("Enter what slot character is in(1- type 1, 2- type 2, 3- type 3) : ")
            if (int(slot_1)==3):
                slot_1_def=1.2
            else:
                slot_1_def=0.5
           

            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+1.5+slot_1_def+float(support)) * float(defense_input)  *(1+float(Leader_Skill))*(1) *  (1+float(Support_from_Super)+int(Super_Attacks_Performed) *1)





            print("Defense: " + str(defense))
        else:
            print("Character information not found.")
    elif character_id == "1009941":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)

            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            

            
  
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+1.7+float(support)) * float(defense_input)  *(1+float(Leader_Skill))*(1+0.5) *  (1+float(Support_from_Super)+int(Super_Attacks_Performed) *0.5)





            print("Defense: " + str(defense))
    elif character_id == "1011391":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)

            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            

            slot_1 = input("Enter what slot character is in(1- type 1, 2- type 2, 3- type 3) : ")
            if (int(slot_1)==3):
                slot_1_def=1.4
            else:
                slot_1_def=0
  
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+1.5+slot_1_def+float(support)) * float(defense_input)  *(1+float(Leader_Skill))*(1+0.4) *  (1+float(Support_from_Super)+int(Super_Attacks_Performed) *0.3+float(Stack_Defense))





            print("Defense: " + str(defense))
    elif character_id == "1009231":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)

            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            
            slot_0=input("Enter whether character with the name Gohan (Kid) is in the team(Yes- type 1, No - Type 0) : ")
            slot_0_def=int(slot_0)*0.2
            slot_2=input("Enter whether character with the name Gohan (Kid) is in the same turn(Yes- type 1, No - Type 0) : ")
            slot_2=int(slot_2)
            slot_1 = input("Enter what slot character is in(1- type 1, 2- type 2, 3- type 3) : ")
            if (int(slot_1)==1 and slot_2==1):
                slot_1_def=1
            else:
                slot_1_def=0
  
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+2+slot_0_def+slot_1_def+float(support)) * float(defense_input)  *(1+float(Leader_Skill))*(1) *  (1+float(Support_from_Super))





            print("Defense: " + str(defense))
    elif character_id == "1027191":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)

            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")

            ki_Spheres_obtained = input("Enter whether there is a Turtle School category enemy (Yes-Type 1, No-Type 0) : ")
            if(int(ki_Spheres_obtained)==1):
                realm_of_gods=1.5
            else:
                realm_of_gods=0

            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+1.5+realm_of_gods+float(support)) * float(defense_input)  *(1+float(Leader_Skill))*(1) *  (1+float(Support_from_Super)+int(Super_Attacks_Performed) *0.5)





            print("Defense: " + str(defense))
        else:
            print("Character information not found.")
    elif character_id == "1026851":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)

            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")

            ki_Spheres_obtained = input("Enter whether there is a Turtle School category ally on the turn (Yes-Type 1, No-Type 0) : ")
            if(int(ki_Spheres_obtained)==1):
                ki_Spheres_obtained=1.5
            else:
                ki_Spheres_obtained=0
            ki_Spheres_obtained1 = input("Enter whether there is a World Tournament category ally on the turn (Yes-Type 1, No-Type 0) : ")
            if(int(ki_Spheres_obtained1)==1):
                ki_Spheres_obtained1=0.15
            else:
                ki_Spheres_obtained1=0
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+1.8+ki_Spheres_obtained1+ki_Spheres_obtained+float(support)) * float(defense_input)  *(1+float(Leader_Skill))*(1) *  (1+float(Support_from_Super)+int(Super_Attacks_Performed) *0.5)





            print("Defense: " + str(defense))
        else:
            print("Character information not found.")
    elif character_id == "1022271":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)

            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")

            ki_Spheres_obtained = input("Enter number of attacks performed by this character so far (1-Type 1, 0-Type 0) : ")
            if(int(ki_Spheres_obtained)>=10):
                ki_Spheres_obtained=0.7
            else:
                ki_Spheres_obtained=int(ki_Spheres_obtained)*0.07
            ki_Spheres_obtained1 = input("Enter whether there is a World Tournament category ally on the turn (Yes-Type 1, No-Type 0) : ")
            if(int(ki_Spheres_obtained1)==1):
                ki_Spheres_obtained1=1.59
            else:
                ki_Spheres_obtained1=0
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+1.59+ki_Spheres_obtained1+float(support)) * float(defense_input)  *(1+float(Leader_Skill))*(1+ki_Spheres_obtained) *  (1+float(Support_from_Super)+int(Super_Attacks_Performed) *0)





            print("Defense: " + str(defense))
    elif character_id == "1024551":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)

            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            intro_buff = input("Enter whether there is another Bond of Parent and Child ally attacking in the same turn at start of character's first turn and is 5 or less turns from character's first turn(Yes- type 1, No- Type 0) : ")
            if(int(intro_buff)==1):
                intro_buff=0.7
            else:
                intro_buff=0

            slot_1 = input("Enter what slot character is in(1- type 1, 2- type 2, 3- type 3) : ")
            if (int(slot_1)==1):
                slot_1_def=0.7
            else:
                slot_1_def=0
            ki_Spheres_obtained = input("Enter number of hits received (Yes-Type 1, No-Type 0) : ")
            if(int(ki_Spheres_obtained)>=5):
                realm_of_gods=0.75
            else:
                realm_of_gods=int(ki_Spheres_obtained)*0.15

            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+1.4+slot_1_def+intro_buff+float(support)) * float(defense_input)  *(1+float(Leader_Skill))*(1+realm_of_gods) *  (1+float(Support_from_Super)+int(UltraOrUnitSuper) *0.2+float(Stack_Defense)+int(Super_Attacks_Performed)*0.3)





            print("Defense: " + str(defense))
        else:
            print("Character information not found.")
    elif character_id == "1027251":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)

            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            intro_buff = input("Enter how many Future Saga Category allies (self excluded) attacking in the same turn a(1- type 1, 2- type 2) : ")
            if(int(intro_buff)>=2):
                intro_buff=1
            else:
                intro_buff=0.5 * int(intro_buff)

            slot_1 = input("Enter how many attacks character performed so far(1- type 1, 2- type 2, 3- type 3) : ")
            if (int(slot_1)>=4):
                slot_1=1
            else:
                slot_1=int(slot_1)*0.25


            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+1+float(support)) * float(defense_input)  *(1+float(Leader_Skill))*(1+slot_1+intro_buff) *  (1+float(Support_from_Super)+int(Super_Attacks_Performed)*0.3)





            print("Defense: " + str(defense))
        else:
            print("Character information not found.")
    elif character_id == "1018491":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)

            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            ki_spheres= input("Enter number of Ki Spheres Obtaine by this character(1- type 1, 2- type 2) : ")
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            intro_buff = input("Enter how many Super Saiyan Category allies (self excluded) attacking in the same turn (1- type 1, 2- type 2) : ")

            intro_buff=0.07 * int(intro_buff)
            intro_buff=int(ki_spheres) *(0.1+intro_buff)
            
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+1.59+intro_buff+float(support)) * float(defense_input)  *(1+float(Leader_Skill))*(1+slot_1+intro_buff) *  (1+float(Support_from_Super)+int(Super_Attacks_Performed)*0.5+int(UltraOrUnitSuper)*0.5)





            print("Defense: " + str(defense))
    elif character_id == "1028601":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)

            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            intro_buff = input("Enter when there is another Movie Heroes or Pure Saiyan Enemy(Yes- type 1, No- type 0) : ")
            if(int(intro_buff)==1):
                intro_buff=0.5
            else:
                intro_buff=0

            slot_1 = input("Enter number of attacks performed by this character so far(1- type 1, 2- type 2, 3- type 3) : ")
            if (int(slot_1)>=4):
                slot_1=1
            else:
                slot_1=0.25*int(slot_1)
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+1+intro_buff) * float(defense_input)  *(1+float(Leader_Skill))*(1+slot_1) *  (1+float(Support_from_Super)+int(Super_Attacks_Performed) *0.5)





            print("Defense: " + str(defense))
        else:
            print("Character information not found.")
    elif character_id == "1015251" or character_id == "1015261":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)

            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            ki_Spheres_obtained1 = input("Enter number of non-phy Ki Spheres Obtained : ")
            ki_Spheres_obtained2 = input("Enter number of phy Ki Spheres Obtained : ")
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+int(ki_Spheres_obtained1 )*0.5+int(ki_Spheres_obtained2)*0.7 + float(support)) * float(defense_input)  *(1+float(Leader_Skill))*(1) *  (1+float(Support_from_Super) + int(Super_Attacks_Performed)*float(Super_Attacks_Performed1)+int(UltraOrUnitSuper) *float(UltraOrUnitSuper1)+float(Stack_Defense))


            print("Defense: " + str(defense))
    elif character_id == "1015001" or character_id == "1014991":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)

            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            ki_Spheres_obtained1 = input("Enter number of non-int Ki Spheres Obtained : ")
            ki_Spheres_obtained2 = input("Enter number of int Ki Spheres Obtained : ")
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+int(ki_Spheres_obtained1 )*0.5+int(ki_Spheres_obtained2)*0.7 + float(support)) * float(defense_input)  *(1+float(Leader_Skill))*(1) *  (1+float(Support_from_Super) + int(Super_Attacks_Performed)*float(Super_Attacks_Performed1)+int(UltraOrUnitSuper) *float(UltraOrUnitSuper1)+float(Stack_Defense))


            print("Defense: " + str(defense))
    elif character_id == "1028771":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)

            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            ki_Spheres_obtained1 = input("Enter number of non-int Ki Spheres Obtained : ")
            ki_Spheres_obtained1=int(ki_Spheres_obtained1)*0.3
            ki_Spheres_obtained2 = input("Enter number of int Ki Spheres Obtained : ")
            ki_Spheres_obtained2=int(ki_Spheres_obtained2)*0.6
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+ki_Spheres_obtained2+ki_Spheres_obtained1 + float(support)) * float(defense_input)  *(1+float(Leader_Skill))*(1) *  (1+float(Support_from_Super) + int(Super_Attacks_Performed)*0.5)


            print("Defense: " + str(defense))
    elif character_id == "1015221" or character_id == "1015211":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)

            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            ki_Spheres_obtained1 = input("Enter number of non-str Ki Spheres Obtained : ")
            ki_Spheres_obtained2 = input("Enter number of str Ki Spheres Obtained : ")
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+int(ki_Spheres_obtained1 )*0.5+int(ki_Spheres_obtained2)*0.7 + float(support)) * float(defense_input)  *(1+float(Leader_Skill))*(1) *  (1+float(Support_from_Super) + int(Super_Attacks_Performed)*float(Super_Attacks_Performed1)+int(UltraOrUnitSuper) *float(UltraOrUnitSuper1)+float(Stack_Defense))


            print("Defense: " + str(defense))
    elif character_id == "1018741" :
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)

            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            ki_Spheres_obtained1 = input("Enter number of non-phy Ki Spheres Obtained : ")
            ki_Spheres_obtained2 = input("Enter number of phy Ki Spheres Obtained : ")
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+int(ki_Spheres_obtained1 )*0.2+int(ki_Spheres_obtained2)*0.3 + float(support)) * float(defense_input)  *(1+float(Leader_Skill))*(1) *  (1+float(Support_from_Super) + int(Super_Attacks_Performed)*float(Super_Attacks_Performed1)+int(UltraOrUnitSuper) *float(UltraOrUnitSuper1)+float(Stack_Defense))


            print("Defense: " + str(defense))
    elif character_id == "1018501" :
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)

            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            ki_Spheres_obtained1 = input("Enter number of non-teq Ki Spheres Obtained : ")
            ki_Spheres_obtained2 = input("Enter number of teq Ki Spheres Obtained : ")
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+int(ki_Spheres_obtained1 )*0.1+int(ki_Spheres_obtained2)*0.2 + float(support)) * float(defense_input)  *(1+float(Leader_Skill))*(1) *  (1+float(Support_from_Super) + int(Super_Attacks_Performed)*float(Super_Attacks_Performed1)+int(UltraOrUnitSuper) *float(UltraOrUnitSuper1)+float(Stack_Defense))


            print("Defense: " + str(defense))
    elif character_id == "1018791" :
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)

            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            ki_Spheres_obtained1 = input("Enter number of non-teq Ki Spheres Obtained : ")
            ki_Spheres_obtained2 = input("Enter number of teq Ki Spheres Obtained : ")
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+int(ki_Spheres_obtained1 )*0.2+int(ki_Spheres_obtained2)*0.3 + float(support)) * float(defense_input)  *(1+float(Leader_Skill))*(1) *  (1+float(Support_from_Super) + int(Super_Attacks_Performed)*float(Super_Attacks_Performed1)+int(UltraOrUnitSuper) *float(UltraOrUnitSuper1)+float(Stack_Defense))


            print("Defense: " + str(defense))
    elif character_id == "1017951" :
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            dodge_activated=input("Enter whether your team has Android 17 (Future) attacking in the same turn (Yes-Type 1, No-Type 0): ")
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            ki_Spheres_obtained1 = input("Enter number of rainbow Ki Spheres Obtained : ")
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+1+int(dodge_activated)*0.7+int(ki_Spheres_obtained1 )*0.18 + float(support)) * float(defense_input)  *(1+float(Leader_Skill))*(1) *  (1+float(Support_from_Super) + int(Super_Attacks_Performed)*float(Super_Attacks_Performed1)+int(UltraOrUnitSuper) *float(UltraOrUnitSuper1)+float(Stack_Defense))


            print("Defense: " + str(defense))
    elif character_id == "4024451" :
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            dodge_activated=input("Enter whether your team has Android 17 (Future) attacking in the same turn (Yes-Type 1, No-Type 0): ")
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            ki_Spheres_obtained1 = input("Enter number of rainbow Ki Spheres Obtained : ")
            if (int(ki_Spheres_obtained1)==1 or int(ki_Spheres_obtained1)==2):
                ki_Spheres_obtained1=1
            elif (int(ki_Spheres_obtained1)==3):
                ki_Spheres_obtained1=1.5
            else:
                ki_Spheres_obtained1=0

            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+1.5+ki_Spheres_obtained1 + float(support)) * float(defense_input)  *(1+float(Leader_Skill))*(1+0.5) *  (1+float(Support_from_Super) + int(Super_Attacks_Performed)*0.5)


            print("Defense: " + str(defense))
    elif character_id == "1027851" :
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            ki_Spheres_obtained = input("Enter number of Ki Spheres Obtained : ")
            ki_Spheres_obtained=int(ki_Spheres_obtained)*0.4
            dodge_activated=input("Enter whether your team has a character whose name includes Android 17 attacking in the same turn (Yes-Type 1, No-Type 0): ")
            dodge_activated=int(dodge_activated)*0.3
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            ki_Spheres_obtained1 = input("Enter number of rainbow Ki Spheres Obtained : ")
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+float(support)+dodge_activated+ki_Spheres_obtained) * float(defense_input)  *(1+float(Leader_Skill))*(1+0.7) *  (1+float(Support_from_Super))


            print("Defense: " + str(defense))
    elif character_id == "1023001" :
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            dodge_activated=input("Enter whether your team has a character whose name includes Frieza attacking in the same turn (Yes-Type 1, No-Type 0): ")
            dodge_activated=int(dodge_activated)*0.7
            dodge_activated1=input("Enter no of attacks performed (1-Type 1, 0-Type 0): ")
            dodge_activated1=int(dodge_activated1)*0.1
            if (float(dodge_activated1)>=0.7):
                dodge_activated1=0.7
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+float(support)+dodge_activated+1.3) * float(defense_input)  *(1+float(Leader_Skill))*(1+dodge_activated1) *  (1+float(Support_from_Super))


            print("Defense: " + str(defense))
    elif character_id == "1013871" :
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)

            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            ki_Spheres_obtained = input("Enter number of Ki Spheres Obtained : ")
            ki_Spheres_obtained=int(ki_Spheres_obtained)*0.3

            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+1.8+ki_Spheres_obtained + float(support)) * float(defense_input)  *(1+float(Leader_Skill))*(1+0.5) *  (1+float(Support_from_Super) + int(Super_Attacks_Performed)*0.5+int(UltraOrUnitSuper) *0+Stack_Defense)


            print("Defense: " + str(defense))
    elif character_id == "1013811" :
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)

            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            ki_Spheres_obtained = input("Enter number of Ki Spheres Obtained : ")
            ki_Spheres_obtained=int(ki_Spheres_obtained)*0.17
            ki_Spheres_obtained1 = input("Enter number of teq Ki Spheres Obtained : ")
            ki_Spheres_obtained1=int(ki_Spheres_obtained1)*0.2
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+1.7+ki_Spheres_obtained1+ki_Spheres_obtained + float(support)) * float(defense_input)  *(1+float(Leader_Skill))*(1+0.5) *  (1+float(Support_from_Super) + int(Super_Attacks_Performed)*0.5+int(UltraOrUnitSuper) *0)


            print("Defense: " + str(defense))
    elif character_id == "1015111" :
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)

            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            ki_Spheres_obtained1 = input("Enter number of STR Ki Spheres Obtained : ")
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+1.5+int(ki_Spheres_obtained1 )*0.5 + float(support)) * float(defense_input)  *(1+float(Leader_Skill))*(1) *  (1+float(Support_from_Super) + int(Super_Attacks_Performed)*0.3)


            print("Defense: " + str(defense))
    elif character_id == "1018411" :
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)

            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            ki_Spheres_obtained1 = input("Enter number of rainbow Ki Spheres Obtained : ")
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+int(ki_Spheres_obtained1 )*0.3 + float(support)) * float(defense_input)  *(1+float(Leader_Skill))*(1) *  (1+float(Support_from_Super) + int(Super_Attacks_Performed)*float(Super_Attacks_Performed1)+int(UltraOrUnitSuper) *float(UltraOrUnitSuper1)+float(Stack_Defense))


            print("Defense: " + str(defense))
    elif character_id == "1010261" :
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)

            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            ki_Spheres_obtained1 = input("Enter number of rainbow Ki Spheres Obtained : ")
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+1.3+int(ki_Spheres_obtained1 )*0.3 + float(support)) * float(defense_input)  *(1+float(Leader_Skill))*(1) *  (1+float(Support_from_Super) + int(Super_Attacks_Performed)*float(Super_Attacks_Performed1)+int(UltraOrUnitSuper) *float(UltraOrUnitSuper1)+float(Stack_Defense))


            print("Defense: " + str(defense))
    elif character_id == "4016321" :
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            dodge_activated= input("Is There another Majin Power Ally attacking in the same turn?(Yes- Type 1, No- Type 0) : ")
            if(int(dodge_activated)==1):
                dodge_activated=0.4
            else:
                dodge_activated=1.2
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            ki_Spheres_obtained1 = input("Enter number of rainbow Ki Spheres Obtained : ")
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+1.2+int(ki_Spheres_obtained1 )*0.2 +dodge_activated+ float(support)) * float(defense_input)  *(1+float(Leader_Skill))*(1) *  (1+float(Support_from_Super) + int(Super_Attacks_Performed)*float(Super_Attacks_Performed1)+int(UltraOrUnitSuper) *float(UltraOrUnitSuper1)+float(Stack_Defense))


            print("Defense: " + str(defense))
    elif character_id == "1008851" :
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            dodge_activated= input("Is the character on a full Super Bosses Rotation or is the character facing a Goku's Family Enemy?(Yes- Type 1, No- Type 0) : ")
            if(int(dodge_activated)==1):
                dodge_activated=0.6
            else:
                dodge_activated=0.5
            ki_Spheres_obtained1 = input("Enter number of Ki Spheres Obtained : ")
            if(int(ki_Spheres_obtained1)>=3):
                dodge_activated1=1.5
            else:
                dodge_activated1=0
            dodge_activated2= input("Enter number of hits received by this character so far(1- Type 1, 2- Type 2) : ")
            if(int(dodge_activated2)>=5):
                dodge_activated2=1.5
            else:
                dodge_activated2=int(dodge_activated2)*0.3

            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")

            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1.3+int(ki_Spheres_obtained1 )* dodge_activated+ float(support)) * float(defense_input)  *(1+float(Leader_Skill))*(1+dodge_activated2+dodge_activated1) *  (1+float(Support_from_Super))


            print("Defense: " + str(defense))
    elif character_id == "1023361":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)

            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            ki_Spheres_obtained1 = input("Enter number of non-teq Ki Spheres Obtained : ")
            ki_Spheres_obtained2 = input("Enter number of teq Ki Spheres Obtained : ")
            ki_Sphere_Condition=0
            if (int(ki_Spheres_obtained1)!=0 and int(ki_Spheres_obtained1)>=8):
                ki_Sphere_Condition=0.8
            if (int(ki_Spheres_obtained2)!=0 and int(ki_Spheres_obtained2)>=8):
                ki_Sphere_Condition=0.8
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (ki_Sphere_Condition + 1+1.8+int(ki_Spheres_obtained1 )*0.17+int(ki_Spheres_obtained2)*0.35 + float(support)) * float(defense_input)  *(1+float(Leader_Skill))*(1) *  (1+float(Support_from_Super) + int(Super_Attacks_Performed)*float(Super_Attacks_Performed1)+int(UltraOrUnitSuper) *float(UltraOrUnitSuper1)+float(Stack_Defense))


            print("Defense: " + str(defense))
    elif character_id == "1019001":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)

            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            ki_Spheres_obtained1 = input("Enter number of non-phy Ki Spheres Obtained : ")
            ki_Spheres_obtained2 = input("Enter number of phy Ki Spheres Obtained : ")
            ki_Spheres_obtained3 = input("Enter whether character collected teq or int ki Spheres(0 if none, 1 if got any) : ")
            ki_Spheres_obtained4 = input("Enter whether character collected rainbow ki Spheres(0 if none, 1 if got any) : ")
            ki_Sphere_condition=0
            if (int(ki_Spheres_obtained3)==1):
                ki_Sphere_condition+=0.39
            if (int(ki_Spheres_obtained4)==1):
                ki_Sphere_condition+=0.15
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (ki_Sphere_condition+1+int(ki_Spheres_obtained1 )*0.3+int(ki_Spheres_obtained2)*0.4 + float(support)) * float(defense_input)  *(1+float(Leader_Skill))*(1) *  (1+float(Support_from_Super) + int(Super_Attacks_Performed)*float(Super_Attacks_Performed1)+int(UltraOrUnitSuper) *float(UltraOrUnitSuper1)+float(Stack_Defense))


            print("Defense: " + str(defense))
    elif character_id == "1027581":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)

            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            ki_Spheres_obtained3 = input("Enter whether character collected teq ki Spheres(0 if none, 1 if got any) : ")
            ki_Spheres_obtained4 = input("Enter whether character collected agl ki Spheres(0 if none, 1 if got any) : ")
            ki_Sphere_condition=0
            if (int(ki_Spheres_obtained3)==1):
                ki_Sphere_condition+=1
            if (int(ki_Spheres_obtained4)==1):
                ki_Sphere_condition+=0.7
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (ki_Sphere_condition+1+1.2 + float(support)) * float(defense_input)  *(1+float(Leader_Skill))*(1+0.8) *  (1+float(Support_from_Super) )


            print("Defense: " + str(defense))
    elif character_id == "1024731":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)

            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            no_of_attacks_in_battle= input("Enter no of attacks performed so far: ")
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+float(support)) * float(defense_input)  *(1+float(Leader_Skill)) *(1+float(Support_from_Super)) +   103000 + 10300 * int(no_of_attacks_in_battle)


            print("Defense: " + str(defense))
    elif character_id == "1025601":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)

            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            no_of_attacks_in_battle= input("Enter no of attacks performed so far: ")
            if (int(no_of_attacks_in_battle)>=3):
                no_of_attacks_in_battle=0.58
            else:
                no_of_Sattacks_in_battle=int(no_of_attacks_in_battle)*0.2
            no_of_Sattacks_in_battle= input("Enter no of super attacks performed so far: ")
            if (int(Sno_of_attacks_in_battle)>=3):
                no_of_Sattacks_in_battle=0.58
            else:
                no_of_Sattacks_in_battle=int(no_of_Sattacks_in_battle)*0.2
            no_of_ttacks_in_battle = input("Enter Whether there is a Androids Category Enemy. (If yes, type 1. If no, type 0.)  : ")

            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect)* (1+no_of_attacks_in_battle+no_of_Sattacks_in_battle) * (1+float(support)+1.58+int(no_of_ttacks_in_battle)*0.58) * float(defense_input)  *(1+float(Leader_Skill)) *(1+float(Support_from_Super))


            print("Defense: " + str(defense))
    elif character_id == "1021011":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)

            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            whether_enemy_is_debuffed= input("Enter whether enemy is debuffed(0 if not debuffed, 1 if debuffed): ")
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+float(support)) * float(defense_input)  *(1+float(Leader_Skill))*(1+float(Support_from_Super)) +   40000 + 30000 * int(whether_enemy_is_debuffed)


            print("Defense: " + str(defense))
    elif character_id == "1029591":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)

            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+float(support) + 1.5) * float(defense_input)* (1+1.5)  *(1+float(Leader_Skill))*(1+float(Support_from_Super) + int(Super_Attacks_Performed)*0.5) 


            print("Defense: " + str(defense))
    elif character_id == "4015981":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)

            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+float(support)+1.5) * float(defense_input)  *(1+float(Leader_Skill))*(1+float(Support_from_Super)+int(Super_Attacks_Performed)*0.3+Stack_Defense)  * (1+0.5)

            print("Defense: " + str(defense))
    elif character_id == "1015971":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)

            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+float(support)+1.4) * float(defense_input)  *(1+float(Leader_Skill))*(1+float(Support_from_Super)+int(Super_Attacks_Performed)*0.3)  * (1+0.5)

            print("Defense: " + str(defense))
    elif character_id == "1016751":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)

            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            whether_enemy_is_debuffed= input("Enter whether enemy is in ATK Down status(Type 0 if not debuffed, Type 1 if debuffed): ")
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+1.2+float(whether_enemy_is_debuffed)*0.6+float(support)) * float(defense_input)  *(1+float(Leader_Skill))*(1+float(Support_from_Super)+Stack_Defense+int(Super_Attacks_Performed)*0.2)


            print("Defense: " + str(defense))
    elif character_id == "1016401":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)

            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            whether_enemy_is_debuffed= input("Enter whether there is a pure saiyans or hybrid saiyan enemy(Type 0 if no, Type 1 if yes): ")
            whether_enemy_is_debuffed=int(whether_enemy_is_debuffed)*1
            dodge_activated= input("Enter whether Hp is 40% or more when performing a super attack(Yes- Type 1, No - Type 0) : ")
            if (int(dodge_activated)==1):
                dodge_activated=1
            else:
                dodge_activated=1.5
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+1.5+float(whether_enemy_is_debuffed)+float(support)) * float(defense_input) * (1+dodge_activated) *(1+float(Leader_Skill))*(1+float(Support_from_Super)+int(Super_Attacks_Performed)*0.5+int(UltraOrUnitSuper)*0.5)

           
            print("Defense: " + str(defense))
    elif character_id == "1026871":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)

            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            whether_enemy_is_debuffed= input("Enter whether there is a pure saiyans or hybrid saiyan enemy(Type 0 if no, Type 1 if yes): ")
            whether_enemy_is_debuffed=int(whether_enemy_is_debuffed)*1
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+1.5+float(whether_enemy_is_debuffed)+float(support)) * float(defense_input) * (1+1) *(1+float(Leader_Skill))*(1+float(Support_from_Super)+int(Super_Attacks_Performed)*0.5)


            print("Defense: " + str(defense))
    elif character_id == "1026731":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)

            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            no_of_enemies=input("Enter number of enemies(Eg: Type 1 if 1 enemy, Type 2 if 2 enemies) : ")
            if (int(no_of_enemies)==1):
                multiple_enemy_defense= 60000
            if (int(no_of_enemies)>=2):
                multiple_enemy_defense= 40000
            is_intro_up= input("Enter whether character's intro is still up(1 for up, 0 for not up) : ")
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+ float(support)) * float(defense_input)  *(1+float(Leader_Skill)) *  (1+float(Support_from_Super) + int(Super_Attacks_Performed)*float(Super_Attacks_Performed1)+int(UltraOrUnitSuper) *float(UltraOrUnitSuper1)+float(Stack_Defense))   + 80000 * int(is_intro_up) + 100000   + multiple_enemy_defense
            print("Defense: " + str(defense))
    elif character_id == "1029271":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)

            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0

                
 
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+ 1.8+ float(support)) * float(defense_input)  *(1+float(Leader_Skill)) *  (1+1.8) *(1+float(Support_from_Super) + int(Super_Attacks_Performed)*0 + int(UltraOrUnitSuper)*0.5)
            print("Defense: " + str(defense))
    elif character_id == "1005441":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)

            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            no_of_enemies=input("Enter number of turns passed from this character's first turn(Eg: Type 1 if 1, Type 4 if 4) : ")
            if (int(no_of_enemies)>=10):
                multiple_enemy_defense= 1
            else:
                multiple_enemy_defense= 0
                
 
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+ 1.02+ float(support)+multiple_enemy_defense) * float(defense_input)  *(1+float(Leader_Skill)) *  (1+1.8) *(1+float(Support_from_Super) + int(Super_Attacks_Performed)*0)
            print("Defense: " + str(defense))
    elif character_id == "4024401":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)

            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            no_of_enemies=input("Enter number of enemies(Eg: Type 1 if 1 enemy, Type 2 if 2 enemies) : ")
            if (int(no_of_enemies)==1):
                multiple_enemy_defense= 0.5
            if (int(no_of_enemies)>=2):
                multiple_enemy_defense= 0

           
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+2.5+multiple_enemy_defense+ float(support)) * float(defense_input)  *(1+float(Leader_Skill))* (1+0.5) *  (1+float(Support_from_Super) + int(Super_Attacks_Performed)*0.3)
            print("Defense: " + str(defense))
    elif character_id == "4024391":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)

            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            no_of_enemies=input("Enter number of enemies(Eg: Type 1 if 1 enemy, Type 2 if 2 enemies) : ")
            if (int(no_of_enemies)==1):
                multiple_enemy_defense= 0
            if (int(no_of_enemies)>=2):
                multiple_enemy_defense= 1.2

           
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+1.8+multiple_enemy_defense+ float(support)) * float(defense_input)  *(1+float(Leader_Skill))* (1+0.4) *  (1+float(Support_from_Super) + int(Super_Attacks_Performed)*0.3)
            print("Defense: " + str(defense))
    elif character_id == "1024381":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)

            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            no_of_enemies=input("Enter number of enemies(Eg: Type 1 if 1 enemy, Type 2 if 2 enemies) : ")
            if (int(no_of_enemies)==1):
                multiple_enemy_defense= 0
            if (int(no_of_enemies)==2):
                multiple_enemy_defense= 0.8
            if (int(no_of_enemies)>=3):
                multiple_enemy_defense= 1.5
           
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+1.7+multiple_enemy_defense+ float(support)) * float(defense_input)  *(1+float(Leader_Skill))* (1+0.3) *  (1+float(Support_from_Super) + int(Super_Attacks_Performed)*0.3)
            print("Defense: " + str(defense))
    elif character_id == "1009961":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)

            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            no_of_enemies=input("Enter number of enemies(Eg: Type 1 if 1 enemy, Type 2 if 2 enemies) : ")
            if (int(no_of_enemies)==1):
                multiple_enemy_defense= 0
            if (int(no_of_enemies)>=2):
                multiple_enemy_defense= 0.58
            no_of_enemies1=input("Enter number of Super Attacks Performed by this character so far(Eg: Type 1 if 1 enemy, Type 2 if 2 enemies) : ")
            if (int(no_of_enemies1)>=5):
                multiple_enemy_defense1= 1
            else:
                multiple_enemy_defense1=int(no_of_enemies1)*0.2
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+ 1.58+multiple_enemy_defense+float(support)) * float(defense_input)  *(1+float(Leader_Skill)) *  (1+float(Support_from_Super) ) *(1+multiple_enemy_defense1)
            print("Defense: " + str(defense))
    elif character_id == "4016011":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)

            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            no_of_enemies=input("Enter number of enemies(Eg: Type 1 if 1 enemy, Type 2 if 2 enemies) : ")
            if (int(no_of_enemies)==1):
                multiple_enemy_defense= 1
            if (int(no_of_enemies)>=2):
                multiple_enemy_defense= 1.2
           
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+ 2+multiple_enemy_defense+float(support)) * float(defense_input)  *(1+float(Leader_Skill)) *  (1+float(Support_from_Super)+int(Super_Attacks_Performed)*0.3 ) *(1)
            print("Defense: " + str(defense))
    elif character_id == "1016001":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)

            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            no_of_enemies=input("Enter number of enemies(Eg: Type 1 if 1 enemy, Type 2 if 2 enemies) : ")
            if (int(no_of_enemies)==1):
                multiple_enemy_defense= 1.2
            if (int(no_of_enemies)>=2):
                multiple_enemy_defense= 1.5
           
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+ 1.5+multiple_enemy_defense+float(support)) * float(defense_input)  *(1+float(Leader_Skill)) *  (1+float(Support_from_Super)+int(Super_Attacks_Performed)*0.5 ) *(1)
            print("Defense: " + str(defense))
    elif character_id == "1019531":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)

            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            no_of_enemies=input("Enter number of enemies(Eg: Type 1 if 1 enemy, Type 2 if 2 enemies) : ")
            if (int(no_of_enemies)==1):
                multiple_enemy_defense= 0.6
            if (int(no_of_enemies)>=2):
                multiple_enemy_defense= (int(no_of_enemies) -1) *0.2

            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+ 1.6+float(support) + multiple_enemy_defense) * float(defense_input)  *(1+float(Leader_Skill)) *  (1+float(Support_from_Super) + int(Super_Attacks_Performed)*0.3+int(UltraOrUnitSuper) *0.2+float(Stack_Defense))
            print("Defense: " + str(defense))
    elif character_id == "1026821":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)

            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            no_of_enemies=input("Enter number of enemies(1 - Type 1, 2 - Type 2) : ")
            multiple_enemy_defense=0
            if (int(no_of_enemies)==1):
                multiple_enemy_defense= 1
            else:
                multiple_enemy_defense= 0.3 * (int(no_of_enemies)-1)
                if multiple_enemy_defense>=1.5:
                    multiple_enemy_defense=1.5
            ki_defense=input("Enter amount of ki character has(16 - Type 16, 12 - Type 12) : ")
            if (int(ki_defense)>=21):
                ki_defense=1
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0

            is_intro_up= input("Enter whether character's intro is still up(1 for up, 0 for not up) : ")
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+ float(support)+1.5) * float(defense_input)  *(1+float(Leader_Skill)) *  (1+float(Support_from_Super) +int(UltraOrUnitSuper) *0.5)  *(1+multiple_enemy_defense+ki_defense)
            print("Defense: " + str(defense))
    elif character_id == "1017411":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)

            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            no_of_enemies=input("Enter number of Ki Spheres Obtained(1 - Type 1, 2 - Type 2) : ")
            multiple_enemy_defense=0
            if (int(no_of_enemies)>=3):
                multiple_enemy_defense= 0.3
            support1 = input("Enter amount of HP(30%- Type 30, 50%-Type 50) : ")
            support1=((float(support1))/100) *0.6
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0

            is_intro_up= input("Enter whether character's intro is still up(1 for up, 0 for not up) : ")
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+ float(support)+1+support1) * float(defense_input)  *(1+float(Leader_Skill)) *  (1+float(Support_from_Super))  *(1+multiple_enemy_defense)
            print("Defense: " + str(defense))
    elif character_id == "1019911":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)

            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: LR Teq Jiren gets DEF + 30% on his active so type 0.3) : "))
            
            support1 = input("Enter amount of HP at start of turn(30%- Type 30, 50%-Type 50) : ")
            if(support1>=40):
                support1=1
            else:
                support1=0
                
            support2 = input("Enter whether HP has fallen to 40% or below at start of turn while this character is on the turn(Yes- Type 1, No - Type 0) : ")
            support2=int(support2)*2
            if(support2==0):
                no_of_enemies=input("Enter number of turns elasped from start of this character's first attacking turn(1 - Type 1, 2 - Type 2) : ")
                support2 = input("Enter whether HP has fallen to 80% or below at start of turn while this character is on the turn (Yes- Type 1, No - Type 0) : ")
                if(no_of_enemies>=5 and int(support2)==1):
                    support2=2
                else:
                    support2=0
           

            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0

            is_intro_up= input("Enter whether character's intro is still up(1 for up, 0 for not up) : ")
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+ float(support)+support2+support1+3) * float(defense_input)  *(1+float(Leader_Skill)) *  (1+int(UltraOrUnitSuper)*1+float(Support_from_Super)+int(Super_Attacks_Performed)*0.5)  *(1)
            print("Defense: " + str(defense))
    elif character_id == "4018761":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)

            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            no_of_enemies=input("Enter number of Ki Spheres Obtained(1 - Type 1, 2 - Type 2) : ")
            multiple_enemy_defense=0
            if (int(no_of_enemies)>=3):
                multiple_enemy_defense= 0.3
            support1 = input("Enter amount of HP(30%- Type 30, 50%-Type 50) : ")
            support1=((float(support1))/100) *0.77
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0

            is_intro_up= input("Enter whether character's intro is still up(1 for up, 0 for not up) : ")
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+ float(support)+1.2+support1) * float(defense_input)  *(1+float(Leader_Skill)) *  (1+float(Support_from_Super))  *(1+multiple_enemy_defense)
            print("Defense: " + str(defense))
    elif character_id == "1017421":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)

            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            no_of_enemies=input("Enter number of Ki Spheres Obtained(1 - Type 1, 2 - Type 2) : ")
            multiple_enemy_defense=0
            if (int(no_of_enemies)>=3):
                multiple_enemy_defense= 0.3
            support1 = input("Enter amount of HP(30%- Type 30, 50%-Type 50) : ")
            support1=((100-float(support1))/100) *0.6
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0

            is_intro_up= input("Enter whether character's intro is still up(1 for up, 0 for not up) : ")
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+ float(support)+1+support1) * float(defense_input)  *(1+float(Leader_Skill)) *  (1+float(Support_from_Super) +int(UltraOrUnitSuper) *0.3)  *(1+multiple_enemy_defense)
            print("Defense: " + str(defense))
    elif character_id == "4018781":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)

            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support1 = input("Enter amount of HP(30%- Type 30, 50%-Type 50) : ")
            support1=((100-float(support1))/100) *0.77
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0

            is_intro_up= input("Enter whether character's intro is still up(1 for up, 0 for not up) : ")
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+ float(support)+1+support1) * float(defense_input)  *(1+float(Leader_Skill)) *  (1+float(Support_from_Super) +int(UltraOrUnitSuper) *0.5)  *(1)
            print("Defense: " + str(defense))
    elif character_id == "1016771":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            ki_Spheres_1= input("Enter number of Ki Spheres collected): ")
            if (int(ki_Spheres_1)<=2):
                ki_Spheres_1=0
            else:
                ki_Spheres_1=0.3
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+1.2+ki_Spheres_1+float(support)) * float(defense_input)  *(1+float(Leader_Skill))*(1+float(Support_from_Super)) * (1.7)

            print("Defense: " + str(defense))
    elif character_id == "1022341":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)

            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            ki_Spheres_1= input("Enter number of Ki Spheres collected): ")
            if (int(ki_Spheres_1)<=2):
                ki_Sphere_Multiplier=5648
            if (int(ki_Spheres_1)>=3):
                ki_Sphere_Multiplier=13212
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+float(support)) * float(defense_input)  *(1+float(Leader_Skill)) + int(ki_Spheres_1) * ki_Sphere_Multiplier*(1+float(Support_from_Super)) + 10108 + 10108

            print("Defense: " + str(defense))
    elif character_id == "1008871":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)


            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            multiple_enemies = input("Enter number of enemies(1- type 1, 2- type 2) : ")
            if (int(multiple_enemies)==1):
                multiple_enemies_def=0.8
            if (int(multiple_enemies)>=2):
                multiple_enemies_def=1.6
            ki_Spheres_obtained = input("Enter number of Ki Spheres Obtained : ")

            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+0.8 +multiple_enemies_def+ float(support)) * float(defense_input)  *(1+float(Leader_Skill))*(1) *  (1+float(Support_from_Super) + int(Super_Attacks_Performed)*float(Super_Attacks_Performed1)+int(UltraOrUnitSuper) *float(UltraOrUnitSuper1)+float(Stack_Defense))
            print("Defense: " + str(defense))
        else:
            print("Character information not found.")
    elif character_id == "1008871":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)


            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
          

            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+1.8 + float(support)) * float(defense_input)  *(1+float(Leader_Skill))*(1) *  (1+float(Support_from_Super) + int(Super_Attacks_Performed)*0.3+float(Stack_Defense))
            print("Defense: " + str(defense))
        else:
            print("Character information not found.")
    elif character_id == "1025561":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)

            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            intro_buff = input("Enter when there is another Bond of Parent and Child Category ally attacking in the same turn at start of character's first turn and is 3 or less turns from character's first turn(1- type 1, 2- type 2, 3- type 3) : ")
            if(int(intro_buff)==1):
                intro_buff=1
            else:
                intro_buff=0

            slot_1 = input("Enter how many super attacks performed so far(1- type 1, 2- type 2, 3- type 3) : ")
            if (int(slot_1)>=5):
                slot_1_def= 1.5
            else:
                slot_1_def= int(slot_1)*0.3


            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+1.5+intro_buff) * float(defense_input)  *(1+float(Leader_Skill))*(1+slot_1_def) *  (1+float(Support_from_Super) + int(Super_Attacks_Performed)*0.3+int(UltraOrUnitSuper) *0.5)





            print("Defense: " + str(defense))
        else:
            print("Character information not found.")
    elif character_id == "4029411":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)

            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
       

            slot_1 = input("Enter which slot character is placed in(1- type 1, 2- type 2, 3- type 3) : ")
            if (int(slot_1)>=2):
                slot_1_def= 0
            else:
                slot_1_def= 2
            slot_2 = input("Do u want the defense stat before or after this character attacks? (After - Type 1, Before - Type 0 ) : ")
            slot_1_def=(1-int(slot_2))*slot_1_def;
            


            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+2.6+slot_1_def) * float(defense_input)  *(1+float(Leader_Skill))*(1+int(slot_2)*1.5) *  (int(slot_2)*(1+float(Support_from_Super) + int(Super_Attacks_Performed)*0.3+int(UltraOrUnitSuper) *0))





            print("Defense: " + str(defense))
    elif character_id == "1025591":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)

            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            intro_buff = input("Enter when there is another Bond of Master and Disciple Category ally attacking in the same turn at start of character's first turn and is 3 or less turns from character's first turn(1- type 1, 2- type 2, 3- type 3) : ")
            if(int(intro_buff)==1):
                intro_buff=1
            else:
                intro_buff=0

            slot_1 = input("Enter how many hits received so far(1- type 1, 2- type 2, 3- type 3) : ")
            if (int(slot_1)>=5):
                slot_1_def= 1.5
            else:
                slot_1_def= int(slot_1)*0.3


            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+1.5+intro_buff) * float(defense_input)  *(1+float(Leader_Skill))*(1+slot_1_def) *  (1+float(Support_from_Super) + int(Super_Attacks_Performed)*0.5+int(UltraOrUnitSuper) *0.5)





            print("Defense: " + str(defense))
        else:
            print("Character information not found.")
    elif character_id == "4029781":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)

            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            


            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+2+float(support)) * float(defense_input)  *(1+float(Leader_Skill))*(1+1.5) *  (1+float(Support_from_Super) + int(Super_Attacks_Performed)*0.5)





            print("Defense: " + str(defense))
    elif character_id == "1029771":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)

            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            


            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+2.6+float(support)) * float(defense_input)  *(1+float(Leader_Skill))*(1+1.5) *  (1+float(Support_from_Super) + int(Super_Attacks_Performed)*0.5)





            print("Defense: " + str(defense))
    elif character_id == "1020751":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)

            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            


            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+2.3+float(support)) * float(defense_input)  *(1+float(Leader_Skill))*(1+1) *  (1+float(Support_from_Super) + int(Super_Attacks_Performed)*0.3+int(UltraOrUnitSuper) *0.5)





            print("Defense: " + str(defense))
    elif character_id == "1018561":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)

            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")

            slot_1 = input("Enter whether there is there is an ally Androids 14 & 15 on the team attacking in the same turn(Yes- type 1, No- type 0) : ")
            if (int(slot_1)==1):
                androids=0.7
            if (int(slot_1)>=2):
                androids=0
            slot_2 = input("Enter whether  facing an enemy whose name includes Goku (Youth, Captain Ginyu, Jr., etc. excluded), Vegeta (Kid, Jr., etc. excluded), Trunks (Teen) or Piccolo (Demon King, Majin Buu, etc. excluded)(Yes- type 1, No- type 0) : ")
            if(int(slot_2)==1):
                enemy_specific=1.3
            else:
                enemy_specific=0

            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+androids + enemy_specific) * float(defense_input)  *(1+float(Leader_Skill))*(1) *  (1+float(Support_from_Super) + int(Super_Attacks_Performed)*0.2 + Stack_Defense)





            print("Defense: " + str(defense))
        else:
            print("Character information not found.")
    elif character_id == "1018151":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)

            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")

            slot_1 = input("Enter whethr there is there is an ally whose name includes Gohan(Future) on the team(Yes- type 1, No- type 0) : ")
            if (int(slot_1)==1):
                gohan_future=1
            if (int(slot_1)>=2):
                gohan_future=0
            ki_Spheres_obtained = input("Enter number of attacks performed so far (1-Type 1, 2-Type 2) : ")
            if(int(ki_Spheres_obtained)>=2):
                ki_Spheres_obtained=0.5
            else:
                ki_Spheres_obtained= int(ki_Spheres_obtained)*0.25

            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+1.5+gohan_future) * float(defense_input)  *(1+float(Leader_Skill))*(1+ki_Spheres_obtained) *  (1+float(Support_from_Super) + int(Super_Attacks_Performed)*0.5)





            print("Defense: " + str(defense))
        else:
            print("Character information not found.")
    elif character_id == "1026311":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)

            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            intro_buff = input("Enter whether there is there is an ally whose name includes Goku (Youth) attacking in the same turn at start of character's first turn and is 5 or less turns from character's first turn(1- type 1, 2- type 2, 3- type 3) : ")
            if(int(intro_buff)==1):
                intro_buff=0.4
            else:
                intro_buff=0

            slot_1 = input("Enter whether there is there is an ally whose name includes Goku (Youth) attacking in the same turn(Yes- type 1, No- type 0) : ")
            if (int(slot_1)==1):
                goku_same_turn=0.81
            if (int(slot_1)>=2):
                goku_same_turn=0

            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+1.41+intro_buff+goku_same_turn) * float(defense_input)  *(1+float(Leader_Skill))*(1) *  (1+float(Support_from_Super) + int(Super_Attacks_Performed)*0.41+float(Stack_Defense))





            print("Defense: " + str(defense))
        else:
            print("Character information not found.")
    elif character_id == "1026561":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            attacks = input("Enter how many super attacks performed so far(1- type 1, 2- type 2, 3- type 3) : ")
            if (int(attacks)>5):
                attacks=5
            attacks=int(attacks)*0.2
            Intro = input("Enter whether character's Intro Buff is still Active(Yes- type 1, No - Type 0) : ")
            Intro=int(Intro)*1.01

            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            slot_1 = input("Enter what slot character is in(1- type 1, 2- type 2, 3- type 3) : ")
            if (int(slot_1)==1):
                receive_attack=input("Enter whether character received an attack in slot 1(yes- type '1'. no - type '0') : ")
                if (int(receive_attack)==1):
                    slot_1_base_def=1
                    slot_1_multiple_def= 0.6
                else:
                    slot_1_base_def=1
                    slot_1_multiple_def= 0
            if (int(slot_1)>=2):
                slot_1_base_def=0
                slot_1_multiple_def=1
            ki_Spheres_obtained = input("Enter number of Ki Spheres Obtained : ")

            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+1.5 +slot_1_base_def+ float(support)+Intro) * float(defense_input)  *(1+float(Leader_Skill))*(1+slot_1_multiple_def+attacks) *  (1+float(Support_from_Super) + int(Super_Attacks_Performed)*0.3)

            print("Defense: " + str(defense))
        else:
            print("Character information not found.")
    elif character_id == "1007471":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)


            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            slot_1 = input("Enter what slot character is in(1- type 1, 2- type 2, 3- type 3) : ")
            if (int(slot_1)==1):
                slot_1=0.59

            ki_Spheres_obtained = input("Enter number of Ki Spheres Obtained : ")

            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+0.59 +slot_1+ float(support)) * float(defense_input)  *(1+float(Leader_Skill))*(1) *  (1+float(Support_from_Super) + int(Super_Attacks_Performed)*0.5)

            print("Defense: " + str(defense))
    elif character_id == "1016811":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            attacks = input("Enter how many  attacks performed so far(1- type 1, 2- type 2, 3- type 3) : ")
            if (int(attacks)>10):
                attacks=10
            attacks=int(attacks)*0.1
            Intro = input("Enter whether there is a character whose name includes goku attacking in the same turn(Yes- type 1, No - Type 0) : ")
            Intro=int(Intro)*0.59

            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")

            ki_Spheres_obtained = input("Enter number of Ki Spheres Obtained : ")

            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+1.58 + float(support)+Intro) * float(defense_input)  *(1+float(Leader_Skill))*(1+attacks) *  (1+float(Support_from_Super) + int(Super_Attacks_Performed)*0.3+int(UltraOrUnitSuper)*0.3)

            print("Defense: " + str(defense))
        else:
            print("Character information not found.")
    elif character_id == "1013881":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)

            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")


            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+1.1 + float(support)) * float(defense_input)  *(1+float(Leader_Skill))*(1) *  (1+float(Support_from_Super))

            print("Defense: " + str(defense))
    elif character_id == "1012361":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)

            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")

            ki_Spheres_obtained = input("Enter number of Ki Spheres Obtained : ")
            ki_Spheres_obtained=int(ki_Spheres_obtained)*0.07
            ki_Spheres_obtained1=int(ki_Spheres_obtained)*1000

            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+0.77 + float(support)+ki_Spheres_obtained) * float(defense_input)  *(1+float(Leader_Skill))*(1) *  (1+float(Support_from_Super) + int(Super_Attacks_Performed)*0.2+int(UltraOrUnitSuper)*0.3)+ki_Spheres_obtained1

            print("Defense: " + str(defense))
    elif character_id == "1009951":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            Intro = input("Enter whether character's Buff of an additional ATK & DEF +100% for 5 turns after first appearance is still Active(Yes- type 1, No - Type 0) : ")
            Intro=int(Intro)*1

            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")


            ki_Spheres_obtained = input("Enter number of Ki Spheres Obtained : ")

            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+1.5 + float(support)+Intro) * float(defense_input)  *(1+float(Leader_Skill))*(1+0.5) *  (1+float(Support_from_Super) + int(Super_Attacks_Performed)*0.3)

            print("Defense: " + str(defense))
        else:
            print("Character information not found.")
    elif character_id == "4026921":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)

            Intro = input("Enter whether character's Buff of DEF +77% for 5 turns after receiving or evading an attack (including Super Attack) is still Active(Yes- type 1, No - Type 0) : ")
            Intro=int(Intro)*0.77

            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            slot_1 = input("Enter what slot character is in(1- type 1, 2- type 2, 3- type 3) : ")
            if (int(slot_1)==1):
                slot_1=0.77
            else:
                slot_1=0
            ki_Spheres_obtained = input("Enter number of Ki Spheres Obtained : ")

            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+2 +slot_1+ float(support)) * float(defense_input)  *(1+float(Leader_Skill))*(1+Intro) *  (1+float(Support_from_Super) + int(Super_Attacks_Performed)*0.3+int(UltraOrUnitSuper)*0.3+Stack_Defense)

            print("Defense: " + str(defense))
        else:
            print("Character information not found.")
    elif character_id == "1026901":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)

            Intro = input("Enter whether character's  Buff of an additional DEF +70% for 3 turns after receiving or evading an attack (including Super Attack) is still Active(Yes- type 1, No - Type 0) : ")
            Intro=int(Intro)*0.7

            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            slot_1 = input("Enter what slot character is in(1- type 1, 2- type 2, 3- type 3) : ")
            if (int(slot_1)==1):
                slot_1=0.7
            else:
                slot_1=0
            ki_Spheres_obtained = input("Enter number of Ki Spheres Obtained : ")

            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+1.5 +slot_1+ float(support)) * float(defense_input)  *(1+float(Leader_Skill))*(1+Intro) *  (1+float(Support_from_Super) + int(Super_Attacks_Performed)*0.3+int(UltraOrUnitSuper)*0.3+Stack_Defense)

            print("Defense: " + str(defense))
        else:
            print("Character information not found.")
    elif character_id == "1019341":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)

            Intro = input("Enter whether character's ATK & DEF +150% within the same turn after receiving attack is Active(Yes- type 1, No - Type 0) : ")
            Intro=int(Intro)*1.5

            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")

            ki_Spheres_obtained = input("Enter number of Ki Spheres Obtained : ")

            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+2+ float(support)) * float(defense_input)  *(1+float(Leader_Skill))*(1+Intro) *  (1+float(Support_from_Super))

            print("Defense: " + str(defense))
        else:
            print("Character information not found.")
    elif character_id == "1028571":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)

            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            slot_1 = input("Enter number of terrifying conqueror allies(1- type 1, 2- type 2, 3- type 3) : ")
            slot_2 = input("Enter whether intro is still up(Intro not up- type 0, Intro still up-type 1) : ")
            ki_Spheres_obtained = input("Enter number of Ki Spheres Obtained : ")

            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+1.5 + float(slot_1) * 0.2+1.0 * float(slot_2)+ float(support)) * float(defense_input)  *(1+float(Leader_Skill))*(1+1.5) *  (1+float(Support_from_Super) + int(Super_Attacks_Performed)*0.3)

            print("Defense: " + str(defense))
        else:
            print("Character information not found.")
    elif character_id == "1025671":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)

            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            slot_1 = input("Enter number of Storied Figures Category Allies on the team(1- type 1, 2- type 2, 3- type 3) : ")
            if (int(slot_1)>=5):
                slot_1=5
            slot_1=int(slot_1)*0.2
            slot_2 = input("Enter whether a character whose name includes Bardock attacking in the same turn(No- type 0, Yes-type 1) : ")
            slot_2=int(slot_2)*0.3
            ki_Spheres_obtained = input("Enter number of Ki Spheres Obtained : ")

            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+1.5 + float(slot_1) + float(slot_2)+ float(support)) * float(defense_input)  *(1+float(Leader_Skill))*(1+0.5) *  (1+float(Support_from_Super) + int(Super_Attacks_Performed)*0)

            print("Defense: " + str(defense))
        else:
            print("Character information not found.")
    elif character_id == "1014171":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)

            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            
            slot_1 = input("Enter number of Peppy Gal Category Allies on the team(1- type 1, 2- type 2, 3- type 3) : ")
            ki_Spheres_obtained = input("Enter number of Ki Spheres Obtained : ")
            ki_Spheres_obtained=int(ki_Spheres_obtained)*(0.18+int(slot_1)*0.02)
            slot_1=int(slot_1)*0.18

            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+ki_Spheres_obtained + float(slot_1) + float(support)) * float(defense_input)  *(1+float(Leader_Skill))*(1) *  (1+float(Support_from_Super) + int(Super_Attacks_Performed)*0.3+Stack_Defense)

            print("Defense: " + str(defense))
        else:
            print("Character information not found.")
    elif character_id == "1026431":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)

            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            slot_1 = input("Enter number of hits received so far by this character(1- type 1, 2- type 2, 3- type 3) : ")
            if(int(slot_1)>=7):
                slot_1=1.4
            else:
                slot_1=int(slot_1)*0.2
            slot_2 = input("Enter whether intro is still up(Intro not up- type 0, Intro still up-type 1) : ")
            if(int(slot_2)==1):
                slot_2=1.2
            else:
                slot_2=0
            slot_3 = input("Enter Whether HP is 90% or above when character attacks(If no, type 0. If yes, type 1. : ")
            if(int(slot_3)==1):
                slot_3=0.3
            else:
                slot_3=0
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+1.2 + float(slot_2) + float(support)) * float(defense_input)  *(1+float(Leader_Skill))*(1+slot_1+slot_3) *  (1+float(Support_from_Super) +int(UltraOrUnitSuper*0.3+ int(Super_Attacks_Performed)*0.3))

            print("Defense: " + str(defense))
    elif character_id == "1027001":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)

            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            slot_1 = input("Enter whether there is another 3 or more Androids/Cell Saga category allies on the team(No- Type 0, Yes- Type 1) : ")
            slot_1=int(slot_1)*1

            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+1.5 + float(slot_1) + float(support)) * float(defense_input)  *(1+float(Leader_Skill))*(1+0.7) *  (1+float(Support_from_Super) + int(Super_Attacks_Performed)*0.3)

            print("Defense: " + str(defense))
        else:
            print("Character information not found.")
    elif character_id == "1011901":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)

            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            slot_1 = input("Enter whether there is another Reps of Universe 7 category ally attacking in the same turn(No- Type 0, Yes- Type 1) : ")
            slot_1=int(slot_1)*1

            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+2.6 + float(slot_1) + float(support)) * float(defense_input)  *(1+float(Leader_Skill))*(1+1) *  (1+float(Support_from_Super) + int(Super_Attacks_Performed)*0.3)

            print("Defense: " + str(defense))
    elif character_id == "1009481":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)

            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            slot_1 = input("Enter number of Ally of Justice or Exploding Rage Category ally on the team (self excluded)(1- type 1, 2- type 2, 3- type 3) : ")
            if(int(slot_1)>=3):
                slot_1=1.8
            else:
                slot_1=int(slot_1)*0.6
            ki_Spheres_obtained = input("Enter number of Ki Spheres Obtained : ")

            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+1.8 + float(slot_1) + float(support)) * float(defense_input)  *(1+float(Leader_Skill))*(1) *  (1+float(Support_from_Super) + int(Super_Attacks_Performed)*0.5)

            print("Defense: " + str(defense))
        else:
            print("Character information not found.")
    elif character_id == "1018061":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)

            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            slot_1 = input("Enter number of Terrifying Conqueror Category allies on the team (1- type 1, 2- type 2, 3- type 3) : ")
   
            slot_1=int(slot_1)*0.4
            ki_Spheres_obtained = input("Enter number of Ki Spheres Obtained : ")

            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+float(slot_1) + float(support)) * float(defense_input)  *(1+float(Leader_Skill))*(1) *  (1+float(Support_from_Super))

            print("Defense: " + str(defense))
    elif character_id == "1017321":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)

            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            slot_1 = input("Enter number of Wicked Bloodline Category allies on the team (1- type 1, 2- type 2, 3- type 3) : ")
            if(int(slot_1)>=3):
                slot_1=0.9
            else:
                slot_1=int(slot_1)*0.3
            slot_2 = input("Enter number of Wicked Bloodline Category allies attacking on the turn (1- type 1, 2- type 2, 3- type 3) : ")
            if(int(slot_2)>=3):
                slot_2=0.5
            else:
                slot_2=0
            ki_Spheres_obtained = input("Enter number of Ki Spheres Obtained : ")

            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+1.2+ float(slot_2) + float(slot_1) + float(support)) * float(defense_input)  *(1+float(Leader_Skill))*(1) *  (1+float(Support_from_Super) + int(Super_Attacks_Performed)*0.3+int(UltraOrUnitSuper)*0.3)

            print("Defense: " + str(defense))
        else:
            print("Character information not found.")
    
    elif character_id == "1027691":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)

            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            slot_1 = input("Enter number of Space-Travelling Warriors Category ally on the team (1- type 1, 2- type 2, 3- type 3) : ")

            slot_1=int(slot_1)*0.3

            ki_Spheres_obtained = input("Enter number of Ki Spheres Obtained : ")

            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+1.4 + float(slot_1) + float(support)) * float(defense_input)  *(1+float(Leader_Skill))*(1+0.7) *  (1+float(Support_from_Super) + int(Super_Attacks_Performed)*0.5)

            print("Defense: " + str(defense))
        else:
            print("Character information not found.")
    elif character_id == "1013681":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)

            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            slot_1 = input("Enter number of Space-Travelling Warriors Category ally on the team (1- type 1, 2- type 2, 3- type 3) : ")
            if (int(slot_1)>=5):
                slot_1=1.2
            else:
                slot_1 = 0
            slot_2 = input("Enter amount of ki character has (1- type 1, 2- type 2, 3- type 3) : ")
            if (int(slot_2)>=9):
                slot_2=1.2
            else:
                slot_2=0

            ki_Spheres_obtained = input("Enter number of Ki Spheres Obtained : ")

            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+1.2 + float(slot_1) + float(support)) * float(defense_input)  *(1+float(Leader_Skill))*(1+slot_2) *  (1+float(Support_from_Super) )

            print("Defense: " + str(defense))
        else:
            print("Character information not found.")
    elif character_id == "4029371":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)

            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")

            slot_2 = input("Enter amount of ki character has (10- type 10, 12- type 12, 13- type 13) : ")
            if (int(slot_2)>=24):
                slot_2=24
            else:
                slot_2=int(slot_2)
            slot_2=math.floor(int(slot_2)/3)*0.3
            slot_3 = input("Enter amount of phy ki spheres this character obtained (10- type 10, 12- type 12, 13- type 13) : ")
            slot_3=int(slot_3)*0.07
        
            ki_Spheres_obtained = input("Enter number of Ki Spheres Obtained : ")
            ki_Spheres_obtained=int(ki_Spheres_obtained)*0.2

            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = "True"
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=='True'):
                No_of_Turns = input("Enter Whether this character did an Ultra Super Attack Last Turn(Yes - Type 1, No - Type 0 )  : ")
                Stack_Defense= float(No_of_Turns) * 0.5
                
            

            


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+2 + float(slot_3) + float(support)+ki_Spheres_obtained) * float(defense_input)  *(1+float(Leader_Skill))*(1+slot_2) *  (1+float(Support_from_Super)+Stack_Defense)

            print("Defense: " + str(defense))
    elif character_id == "1029361":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)

            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            slot_1 = input("Enter whether there is another Movie Heroes or All-Out Struggle Category ally attacking in the same turn (Yes- Type 1, No - type 0) : ")
            slot_1=int(slot_1)*0.77
            slot_2 = input("Enter amount of ki character has (10- type 10, 12- type 12, 13- type 13) : ")
            if (int(slot_2)>=24):
                slot_2=24
            else:
                slot_2=int(slot_2)
            slot_2=math.floor(int(slot_2)/3)*0.3

            ki_Spheres_obtained = input("Enter number of Ki Spheres Obtained : ")

            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+2 + float(slot_1) + float(support)) * float(defense_input)  *(1+float(Leader_Skill))*(1+slot_2) *  (1+float(Support_from_Super)+int(UltraOrUnitSuper)*0.5+Stack_Defense)

            print("Defense: " + str(defense))
    elif character_id == "1028571":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)

            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            slot_1 = input("Enter number of terrifying conqueror allies(1- type 1, 2- type 2, 3- type 3) : ")
            slot_2 = input("Enter whether intro is still up(Intro not up- type 0, Intro still up-type 1) : ")
            ki_Spheres_obtained = input("Enter number of Ki Spheres Obtained : ")

            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+1.5 + float(slot_1) * 0.2+1.0 * float(slot_2)+ float(support)) * float(defense_input)  *(1+float(Leader_Skill))*(1+1.5) *  (1+float(Support_from_Super) + int(Super_Attacks_Performed)*0.3)

            print("Defense: " + str(defense))
        else:
            print("Character information not found.")
    elif character_id == "1028571":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


        bullet_points = extract_bullet_points(passive)
        defense_multiplier = search_defense_multiplier(bullet_points)
        defense_multiplier_multiply = search_defense_multiplier1(bullet_points)

        defense_input = input("Enter Hidden Potential Defense Stat : ")
        active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
        active_skill_effect=0
        if (active_skill_active=="1"):
            active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
        support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
        slot_1 = input("Enter number of terrifying conqueror allies(1- type 1, 2- type 2, 3- type 3) : ")
        slot_2 = input("Enter whether intro is still up(Intro not up- type 0, Intro still up-type 1) : ")
        ki_Spheres_obtained = input("Enter number of Ki Spheres Obtained : ")
        defense_multiplier_onKiSphereAttack = search_defense_multiplier2(bullet_points)* float(ki_Spheres_obtained)
        Sphere_Defense= kiSpheres(bullet_points,0) * float(ki_Spheres_obtained)
        Sphere_Condition=  kiSphereslol(bullet_points,0)
        Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
        Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
        Which_Super_Stacks= 5
        Stack_Defense= 0
        UltraOrUnitSuper1=0
        if (Character_Stacks=="True"):
            Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
        if (Character_Stacks=='True'):
            Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
            No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
            if (int(No_of_Turns)==99):
                Stacks= input("Number of Stacks so far before current turn : ")
                Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            else:
                Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                if (int(Float_Character)==1):
                    if(int(No_of_Turns)==3):
                        Stacks=0
                        Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                        Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                        Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                        Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                        Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                        Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                        Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                if (int(Float_Character)==0):
                    if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                        Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                        Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                        Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                        Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                        Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                        Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if( int(No_of_Turns)==9):
                        Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                        Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+1.5 + float(slot_1) * 0.2+1.0 * float(slot_2)+ float(support)) * float(defense_input)  *(1+float(Leader_Skill))*(1+1.5) *  (1+float(Support_from_Super) + int(Super_Attacks_Performed)*0.3)

            print("Defense: " + str(defense))
        else:
            print("Character information not found.")
    elif character_id == "1025161":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


        bullet_points = extract_bullet_points(passive)
        defense_multiplier = search_defense_multiplier(bullet_points)
        defense_multiplier_multiply = search_defense_multiplier1(bullet_points)

        defense_input = input("Enter Hidden Potential Defense Stat : ")
        active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
        active_skill_effect=0
        if (active_skill_active=="1"):
            active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
        support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
        slot_1 = input("Enter number of terrifying conqueror allies(1- type 1, 2- type 2, 3- type 3) : ")
        slot_1=int(slot_1)*0.4
        if(float(slot_1)>=2):
            slot_1=2
        ki_Spheres_obtained = input("Enter number of Ki Spheres Obtained if there is another ally whose name includes Metal Cooler attacking in the same turn (If no metal cooler ally, type 0) : ")
        ki_Spheres_obtained=int(ki_Spheres_obtained)*0.25
        defense_multiplier_onKiSphereAttack = search_defense_multiplier2(bullet_points)* float(ki_Spheres_obtained)
        Sphere_Defense= kiSpheres(bullet_points,0) * float(ki_Spheres_obtained)
        Sphere_Condition=  kiSphereslol(bullet_points,0)
        Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
        Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
        Which_Super_Stacks= 5
        Stack_Defense= 0
        UltraOrUnitSuper1=0
        if (Character_Stacks=="True"):
            Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
        if (Character_Stacks=='True'):
            Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
            No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
            if (int(No_of_Turns)==99):
                Stacks= input("Number of Stacks so far before current turn : ")
                Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            else:
                Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                if (int(Float_Character)==1):
                    if(int(No_of_Turns)==3):
                        Stacks=0
                        Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                        Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                        Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                        Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                        Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                        Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                        Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                if (int(Float_Character)==0):
                    if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                        Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                        Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                        Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                        Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                        Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                        Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if( int(No_of_Turns)==9):
                        Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                        Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+ float(slot_1) + float(support)+ki_Spheres_obtained) * float(defense_input)  *(1+float(Leader_Skill))*(1) *  (1+float(Support_from_Super) + int(Super_Attacks_Performed)*0.5)

            print("Defense: " + str(defense))
        else:
            print("Character information not found.")
    elif character_id == "1025191":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


        bullet_points = extract_bullet_points(passive)
        defense_multiplier = search_defense_multiplier(bullet_points)
        defense_multiplier_multiply = search_defense_multiplier1(bullet_points)

        defense_input = input("Enter Hidden Potential Defense Stat : ")
        active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
        active_skill_effect=0
        if (active_skill_active=="1"):
            active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
        support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
        slot_1 = input("Enter number of terrifying conqueror allies(1- type 1, 2- type 2, 3- type 3) : ")
        slot_1=int(slot_1)*0.4
        if(float(slot_1)>=2):
            slot_1=2
        ki_Spheres_obtained = input("Enter number of Rainbow Ki Spheres Obtained if there is another ally whose name includes Metal Cooler attacking in the same turn (If no metal cooler ally, type 0) : ")
        if(int(ki_Spheres_obtained)>=3):
            
            ki_Spheres_obtained=0.2
        defense_multiplier_onKiSphereAttack = search_defense_multiplier2(bullet_points)* float(ki_Spheres_obtained)
        Sphere_Defense= kiSpheres(bullet_points,0) * float(ki_Spheres_obtained)
        Sphere_Condition=  kiSphereslol(bullet_points,0)
        Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
        Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
        Which_Super_Stacks= 5
        Stack_Defense= 0
        UltraOrUnitSuper1=0
        if (Character_Stacks=="True"):
            Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
        if (Character_Stacks=='True'):
            Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
            No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
            if (int(No_of_Turns)==99):
                Stacks= input("Number of Stacks so far before current turn : ")
                Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            else:
                Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                if (int(Float_Character)==1):
                    if(int(No_of_Turns)==3):
                        Stacks=0
                        Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                        Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                        Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                        Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                        Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                        Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                        Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                if (int(Float_Character)==0):
                    if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                        Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                        Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                        Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                        Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                        Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                        Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if( int(No_of_Turns)==9):
                        Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                        Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1.2+ float(slot_1) + float(support)+ki_Spheres_obtained) * float(defense_input)  *(1+float(Leader_Skill))*(1) *  (1+float(Support_from_Super) + int(Super_Attacks_Performed)*0.5)

            print("Defense: " + str(defense))
        else:
            print("Character information not found.")
    elif character_id == "1025091":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


        bullet_points = extract_bullet_points(passive)
        defense_multiplier = search_defense_multiplier(bullet_points)
        defense_multiplier_multiply = search_defense_multiplier1(bullet_points)

        defense_input = input("Enter Hidden Potential Defense Stat : ")
        active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
        active_skill_effect=0
        if (active_skill_active=="1"):
            active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
        support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
        slot_1 = input("Enter number of Super Attacks Performed(1- type 1, 2- type 2, 3- type 3) : ")
        slot_1=int(slot_1)*0.4
        if(float(slot_1)>=1.2):
            slot_1=1.2
        ki_Spheres_obtained = input("Enter number of Rainbow Ki Spheres Obtained  : ")
        if(int(ki_Spheres_obtained)>=2):
            
            ki_Spheres_obtained=0.5
        defense_multiplier_onKiSphereAttack = search_defense_multiplier2(bullet_points)* float(ki_Spheres_obtained)
        Sphere_Defense= kiSpheres(bullet_points,0) * float(ki_Spheres_obtained)
        Sphere_Condition=  kiSphereslol(bullet_points,0)
        Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
        Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
        Which_Super_Stacks= 5
        Stack_Defense= 0
        UltraOrUnitSuper1=0
        if (Character_Stacks=="True"):
            Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
        if (Character_Stacks=='True'):
            Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
            No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
            if (int(No_of_Turns)==99):
                Stacks= input("Number of Stacks so far before current turn : ")
                Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            else:
                Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                if (int(Float_Character)==1):
                    if(int(No_of_Turns)==3):
                        Stacks=0
                        Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                        Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                        Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                        Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                        Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                        Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                        Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                if (int(Float_Character)==0):
                    if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                        Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                        Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                        Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                        Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                        Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                        Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if( int(No_of_Turns)==9):
                        Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                        Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+1.5 + float(support)+ki_Spheres_obtained) * float(defense_input)  *(1+float(Leader_Skill))*(1+slot_1) *  (1+float(Support_from_Super) + int(Super_Attacks_Performed)*0.5)

            print("Defense: " + str(defense))
    elif character_id == "1021671":

        support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
        Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
        defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
        domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


        bullet_points = extract_bullet_points(passive)
        defense_multiplier = search_defense_multiplier(bullet_points)
        defense_multiplier_multiply = search_defense_multiplier1(bullet_points)

        defense_input = input("Enter Hidden Potential Defense Stat : ")
        active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
        active_skill_effect=0
        if (active_skill_active=="1"):
            active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            
        support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
        
        defense_multiplier_onKiSphereAttack = search_defense_multiplier2(bullet_points)* float(ki_Spheres_obtained)
        Sphere_Defense= kiSpheres(bullet_points,0) * float(ki_Spheres_obtained)
        Sphere_Condition=  kiSphereslol(bullet_points,0)
        Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
        Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
        Which_Super_Stacks= 5
        Stack_Defense= 0
        UltraOrUnitSuper1=0
        if (Character_Stacks=="True"):
            Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
        if (Character_Stacks=='True'):
            Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
            No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
            if (int(No_of_Turns)==99):
                Stacks= input("Number of Stacks so far before current turn : ")
                Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            else:
                Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                if (int(Float_Character)==1):
                    if(int(No_of_Turns)==3):
                        Stacks=0
                        Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                        Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                        Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                        Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                        Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                        Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                        Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                if (int(Float_Character)==0):
                    if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                        Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                        Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                        Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                        Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                        Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                        Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if( int(No_of_Turns)==9):
                        Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                        Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (3.6+ float(support)) * float(defense_input)  *(1+float(Leader_Skill))*(1.26) *  (1+float(Support_from_Super) + int(Super_Attacks_Performed)*0.2 + Stack_Defense)

            print("Defense: " + str(defense))
    elif character_id == "1010991":

        support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
        Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
        defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
        domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


        bullet_points = extract_bullet_points(passive)
        defense_multiplier = search_defense_multiplier(bullet_points)
        defense_multiplier_multiply = search_defense_multiplier1(bullet_points)

        defense_input = input("Enter Hidden Potential Defense Stat : ")
        active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
        active_skill_effect=0
        if (active_skill_active=="1"):
            active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            
        support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
        slot_1=0
        slot_1 = input("Enter number of Ki spheres obtained(1- type 1, 2- type 2, 3- type 3) : ")
        
        if(float(slot_1)>=3 and float(slot_1)<=5 ):
            slot_1=0.3
        elif (float(slot_1)>=5):
            slot_1=0.8
        ki_Spheres_obtained = input("Enter number of AGL Ki Spheres Obtained  : ")
        if(int(ki_Spheres_obtained)>=3):
            
            ki_Spheres_obtained=0.1
        defense_multiplier_onKiSphereAttack = search_defense_multiplier2(bullet_points)* float(ki_Spheres_obtained)
        Sphere_Defense= kiSpheres(bullet_points,0) * float(ki_Spheres_obtained)
        Sphere_Condition=  kiSphereslol(bullet_points,0)
        Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
        Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
        Which_Super_Stacks= 5
        Stack_Defense= 0
        UltraOrUnitSuper1=0
        if (Character_Stacks=="True"):
            Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
        if (Character_Stacks=='True'):
            Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
            No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
            if (int(No_of_Turns)==99):
                Stacks= input("Number of Stacks so far before current turn : ")
                Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            else:
                Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                if (int(Float_Character)==1):
                    if(int(No_of_Turns)==3):
                        Stacks=0
                        Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                        Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                        Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                        Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                        Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                        Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                        Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                if (int(Float_Character)==0):
                    if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                        Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                        Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                        Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                        Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                        Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                        Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if( int(No_of_Turns)==9):
                        Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                        Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1.3+ float(slot_1) + float(support)+ki_Spheres_obtained) * float(defense_input)  *(1+float(Leader_Skill))*(1+1.2) *  (1+float(Support_from_Super) + int(Super_Attacks_Performed)*0.3)

            print("Defense: " + str(defense))
    elif character_id == "1010971":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


        bullet_points = extract_bullet_points(passive)
        defense_multiplier = search_defense_multiplier(bullet_points)
        defense_multiplier_multiply = search_defense_multiplier1(bullet_points)

        defense_input = input("Enter Hidden Potential Defense Stat : ")
        active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
        active_skill_effect=0
        if (active_skill_active=="1"):
            active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            
        support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
        slot_1=0
        slot_1 = input("Enter number of Ki spheres obtained(1- type 1, 2- type 2, 3- type 3) : ")
        
        if(float(slot_1)>=3 and float(slot_1)<=5 ):
            slot_1=0.3
        elif (float(slot_1)>=5):
            slot_1=0.8
        ki_Spheres_obtained = input("Enter number of TEQ Ki Spheres Obtained  : ")
        if(int(ki_Spheres_obtained)>=3):
            
            ki_Spheres_obtained=0.1
        defense_multiplier_onKiSphereAttack = search_defense_multiplier2(bullet_points)* float(ki_Spheres_obtained)
        Sphere_Defense= kiSpheres(bullet_points,0) * float(ki_Spheres_obtained)
        Sphere_Condition=  kiSphereslol(bullet_points,0)
        Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
        Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
        Which_Super_Stacks= 5
        Stack_Defense= 0
        UltraOrUnitSuper1=0
        if (Character_Stacks=="True"):
            Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
        if (Character_Stacks=='True'):
            Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
            No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
            if (int(No_of_Turns)==99):
                Stacks= input("Number of Stacks so far before current turn : ")
                Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            else:
                Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                if (int(Float_Character)==1):
                    if(int(No_of_Turns)==3):
                        Stacks=0
                        Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                        Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                        Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                        Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                        Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                        Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                        Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                if (int(Float_Character)==0):
                    if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                        Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                        Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                        Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                        Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                        Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                        Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if( int(No_of_Turns)==9):
                        Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                        Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1.3+ float(slot_1) + float(support)+ki_Spheres_obtained) * float(defense_input)  *(1+float(Leader_Skill))*(1+1.2) *  (1+float(Support_from_Super) + int(Super_Attacks_Performed)*0.3)

            print("Defense: " + str(defense))
    elif character_id == "1010961":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


        bullet_points = extract_bullet_points(passive)
        defense_multiplier = search_defense_multiplier(bullet_points)
        defense_multiplier_multiply = search_defense_multiplier1(bullet_points)

        defense_input = input("Enter Hidden Potential Defense Stat : ")
        active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
        active_skill_effect=0
        if (active_skill_active=="1"):
            active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            
        support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
        slot_1=0
        slot_1 = input("Enter number of Ki spheres obtained(1- type 1, 2- type 2, 3- type 3) : ")
        
        if(float(slot_1)>=3 and float(slot_1)<=5 ):
            slot_1=0.3
        elif (float(slot_1)>=5):
            slot_1=0.8
        ki_Spheres_obtained = input("Enter number of PHY Ki Spheres Obtained  : ")
        if(int(ki_Spheres_obtained)>=3):
            
            ki_Spheres_obtained=0.1
        defense_multiplier_onKiSphereAttack = search_defense_multiplier2(bullet_points)* float(ki_Spheres_obtained)
        Sphere_Defense= kiSpheres(bullet_points,0) * float(ki_Spheres_obtained)
        Sphere_Condition=  kiSphereslol(bullet_points,0)
        Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
        Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
        Which_Super_Stacks= 5
        Stack_Defense= 0
        UltraOrUnitSuper1=0
        if (Character_Stacks=="True"):
            Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
        if (Character_Stacks=='True'):
            Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
            No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
            if (int(No_of_Turns)==99):
                Stacks= input("Number of Stacks so far before current turn : ")
                Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            else:
                Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                if (int(Float_Character)==1):
                    if(int(No_of_Turns)==3):
                        Stacks=0
                        Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                        Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                        Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                        Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                        Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                        Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                        Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                if (int(Float_Character)==0):
                    if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                        Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                        Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                        Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                        Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                        Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                        Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if( int(No_of_Turns)==9):
                        Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                        Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1.3+ float(slot_1) + float(support)+ki_Spheres_obtained) * float(defense_input)  *(1+float(Leader_Skill))*(1+1.2) *  (1+float(Support_from_Super) + int(Super_Attacks_Performed)*0.3)

            print("Defense: " + str(defense))
    elif character_id == "1010951":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


        bullet_points = extract_bullet_points(passive)
        defense_multiplier = search_defense_multiplier(bullet_points)
        defense_multiplier_multiply = search_defense_multiplier1(bullet_points)

        defense_input = input("Enter Hidden Potential Defense Stat : ")
        active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
        active_skill_effect=0
        if (active_skill_active=="1"):
            active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            
        support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
        slot_1=0
        slot_1 = input("Enter number of Ki spheres obtained(1- type 1, 2- type 2, 3- type 3) : ")
        
        if(float(slot_1)>=3 and float(slot_1)<=5 ):
            slot_1=0.3
        elif (float(slot_1)>=5):
            slot_1=0.8
        ki_Spheres_obtained = input("Enter number of STR Ki Spheres Obtained  : ")
        if(int(ki_Spheres_obtained)>=3):
            
            ki_Spheres_obtained=0.1
        defense_multiplier_onKiSphereAttack = search_defense_multiplier2(bullet_points)* float(ki_Spheres_obtained)
        Sphere_Defense= kiSpheres(bullet_points,0) * float(ki_Spheres_obtained)
        Sphere_Condition=  kiSphereslol(bullet_points,0)
        Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
        Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
        Which_Super_Stacks= 5
        Stack_Defense= 0
        UltraOrUnitSuper1=0
        if (Character_Stacks=="True"):
            Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
        if (Character_Stacks=='True'):
            Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
            No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
            if (int(No_of_Turns)==99):
                Stacks= input("Number of Stacks so far before current turn : ")
                Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            else:
                Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                if (int(Float_Character)==1):
                    if(int(No_of_Turns)==3):
                        Stacks=0
                        Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                        Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                        Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                        Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                        Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                        Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                        Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                if (int(Float_Character)==0):
                    if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                        Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                        Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                        Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                        Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                        Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                        Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if( int(No_of_Turns)==9):
                        Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                        Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1.3+ float(slot_1) + float(support)+ki_Spheres_obtained) * float(defense_input)  *(1+float(Leader_Skill))*(1+1.2) *  (1+float(Support_from_Super) + int(Super_Attacks_Performed)*0.3)

            print("Defense: " + str(defense))
    elif character_id == "1010981":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


        bullet_points = extract_bullet_points(passive)
        defense_multiplier = search_defense_multiplier(bullet_points)
        defense_multiplier_multiply = search_defense_multiplier1(bullet_points)

        defense_input = input("Enter Hidden Potential Defense Stat : ")
        active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
        active_skill_effect=0
        if (active_skill_active=="1"):
            active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            
        support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
        slot_1=0
        slot_1 = input("Enter number of Ki spheres obtained(1- type 1, 2- type 2, 3- type 3) : ")
        
        if(float(slot_1)>=3 and float(slot_1)<=5 ):
            slot_1=0.3
        elif (float(slot_1)>=5):
            slot_1=0.8
        ki_Spheres_obtained = input("Enter number of Int Ki Spheres Obtained  : ")
        if(int(ki_Spheres_obtained)>=3):
            
            ki_Spheres_obtained=0.1
        defense_multiplier_onKiSphereAttack = search_defense_multiplier2(bullet_points)* float(ki_Spheres_obtained)
        Sphere_Defense= kiSpheres(bullet_points,0) * float(ki_Spheres_obtained)
        Sphere_Condition=  kiSphereslol(bullet_points,0)
        Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
        Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
        Which_Super_Stacks= 5
        Stack_Defense= 0
        UltraOrUnitSuper1=0
        if (Character_Stacks=="True"):
            Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
        if (Character_Stacks=='True'):
            Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
            No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
            if (int(No_of_Turns)==99):
                Stacks= input("Number of Stacks so far before current turn : ")
                Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            else:
                Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                if (int(Float_Character)==1):
                    if(int(No_of_Turns)==3):
                        Stacks=0
                        Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                        Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                        Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                        Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                        Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                        Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                        Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                if (int(Float_Character)==0):
                    if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                        Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                        Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                        Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                        Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                        Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                        Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if( int(No_of_Turns)==9):
                        Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                        Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1.3+ float(slot_1) + float(support)+ki_Spheres_obtained) * float(defense_input)  *(1+float(Leader_Skill))*(1+1.2) *  (1+float(Support_from_Super) + int(Super_Attacks_Performed)*0.3)

            print("Defense: " + str(defense))
        else:
            print("Character information not found.")
    elif character_id == "1025181":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


        bullet_points = extract_bullet_points(passive)
        defense_multiplier = search_defense_multiplier(bullet_points)
        defense_multiplier_multiply = search_defense_multiplier1(bullet_points)

        defense_input = input("Enter Hidden Potential Defense Stat : ")
        active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
        active_skill_effect=0
        if (active_skill_active=="1"):
            active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
        support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
        slot_1 = input("Enter number of terrifying conqueror allies(1- type 1, 2- type 2, 3- type 3) : ")
        slot_1=int(slot_1)*0.4
        if(float(slot_1)>=2):
            slot_1=2
        ki_Spheres_obtained = input("Enter number of Ki Spheres Obtained if there is another ally whose name includes Metal Cooler attacking in the same turn (If no metal cooler ally, type 0) : ")
        ki_Spheres_obtained=int(ki_Spheres_obtained)*0.1
        defense_multiplier_onKiSphereAttack = search_defense_multiplier2(bullet_points)* float(ki_Spheres_obtained)
        Sphere_Defense= kiSpheres(bullet_points,0) * float(ki_Spheres_obtained)
        Sphere_Condition=  kiSphereslol(bullet_points,0)
        Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
        Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
        Which_Super_Stacks= 5
        Stack_Defense= 0
        UltraOrUnitSuper1=0
        if (Character_Stacks=="True"):
            Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
        if (Character_Stacks=='True'):
            Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
            No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
            if (int(No_of_Turns)==99):
                Stacks= input("Number of Stacks so far before current turn : ")
                Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            else:
                Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                if (int(Float_Character)==1):
                    if(int(No_of_Turns)==3):
                        Stacks=0
                        Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                        Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                        Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                        Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                        Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                        Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                        Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                if (int(Float_Character)==0):
                    if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                        Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                        Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                        Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                        Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                        Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                        Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if( int(No_of_Turns)==9):
                        Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                        Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+ float(slot_1) + float(support)+ki_Spheres_obtained) * float(defense_input)  *(1+float(Leader_Skill))*(1) *  (1+float(Support_from_Super) + int(Super_Attacks_Performed)*0.5)

            print("Defense: " + str(defense))
        else:
            print("Character information not found.")
    elif character_id == "1025201":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


        bullet_points = extract_bullet_points(passive)
        defense_multiplier = search_defense_multiplier(bullet_points)
        defense_multiplier_multiply = search_defense_multiplier1(bullet_points)

        defense_input = input("Enter Hidden Potential Defense Stat : ")
        active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
        active_skill_effect=0
        if (active_skill_active=="1"):
            active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
        support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
        slot_1 = input("Enter number of terrifying conqueror allies(1- type 1, 2- type 2, 3- type 3) : ")
        slot_1=int(slot_1)*0.4
        if(float(slot_1)>=2):
            slot_1=2
        ki_Spheres_obtained = input("Enter number of Ki Spheres Obtained if there is another ally whose name includes Metal Cooler attacking in the same turn (If no metal cooler ally, type 0) : ")
        ki_Spheres_obtained=int(ki_Spheres_obtained)*0.25
        defense_multiplier_onKiSphereAttack = search_defense_multiplier2(bullet_points)* float(ki_Spheres_obtained)
        Sphere_Defense= kiSpheres(bullet_points,0) * float(ki_Spheres_obtained)
        Sphere_Condition=  kiSphereslol(bullet_points,0)
        Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
        Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
        Which_Super_Stacks= 5
        Stack_Defense= 0
        UltraOrUnitSuper1=0
        if (Character_Stacks=="True"):
            Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
        if (Character_Stacks=='True'):
            Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
            No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
            if (int(No_of_Turns)==99):
                Stacks= input("Number of Stacks so far before current turn : ")
                Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            else:
                Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                if (int(Float_Character)==1):
                    if(int(No_of_Turns)==3):
                        Stacks=0
                        Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                        Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                        Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                        Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                        Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                        Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                        Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                if (int(Float_Character)==0):
                    if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                        Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                        Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                        Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                        Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                        Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                        Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if( int(No_of_Turns)==9):
                        Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                        Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+ float(slot_1) + float(support)+ki_Spheres_obtained) * float(defense_input)  *(1+float(Leader_Skill))*(1) *  (1+float(Support_from_Super) + int(Super_Attacks_Performed)*0.5)

            print("Defense: " + str(defense))
    elif character_id == "1025171":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


        bullet_points = extract_bullet_points(passive)
        defense_multiplier = search_defense_multiplier(bullet_points)
        defense_multiplier_multiply = search_defense_multiplier1(bullet_points)

        defense_input = input("Enter Hidden Potential Defense Stat : ")
        active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
        active_skill_effect=0
        if (active_skill_active=="1"):
            active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
        support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
        slot_1 = input("Enter number of terrifying conqueror allies(1- type 1, 2- type 2, 3- type 3) : ")
        slot_1=int(slot_1)*0.4
        if(float(slot_1)>=2):
            slot_1=2
        ki_Spheres_obtained = input("Enter number of Ki Spheres Obtained : ")
        defense_multiplier_onKiSphereAttack = search_defense_multiplier2(bullet_points)* float(ki_Spheres_obtained)
        Sphere_Defense= kiSpheres(bullet_points,0) * float(ki_Spheres_obtained)
        Sphere_Condition=  kiSphereslol(bullet_points,0)
        Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
        Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
        Which_Super_Stacks= 5
        Stack_Defense= 0
        UltraOrUnitSuper1=0
        if (Character_Stacks=="True"):
            Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
        if (Character_Stacks=='True'):
            Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
            No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
            if (int(No_of_Turns)==99):
                Stacks= input("Number of Stacks so far before current turn : ")
                Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            else:
                Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                if (int(Float_Character)==1):
                    if(int(No_of_Turns)==3):
                        Stacks=0
                        Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                        Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                        Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                        Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                        Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                        Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                        Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                if (int(Float_Character)==0):
                    if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                        Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                        Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                        Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                        Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                        Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                        Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if( int(No_of_Turns)==9):
                        Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                        Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+ float(slot_1) + float(support)) * float(defense_input)  *(1+float(Leader_Skill))*(1) *  (1+float(Support_from_Super) + int(Super_Attacks_Performed)*0.5)

            print("Defense: " + str(defense))
        else:
            print("Character information not found.")
    elif character_id == "1028161":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)

            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            slot_1 = input("Enter number of dodges so far : ")
            slot_2 = input("Enter whether intro is still up(Intro not up- type 0, Intro still up-type 1) : ")
            ki_Spheres_obtained = input("Enter number of Ki Spheres Obtained : ")

            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+2 + float(slot_1) * 0.1 +1.0 * float(slot_2)+ float(support)) * float(defense_input)  *(1+float(Leader_Skill)) *  (1+ Stack_Defense + float(Super_Attacks_Performed) * float(Super_Attacks_Performed1)+float(Support_from_Super))

            print("Defense: " + str(defense))
        else:
            print("Character information not found.")
    elif character_id == "1027471":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)

            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            slot_1 = input("Enter whether it is first 6 turns from character's first appearance(Yes-Type 1, No - Type 0) : ")
            slot_2 = input("Enter whether there is another character on the team who belongs to the Sworn Enemies, Revenge, or GT Bosses Category(No- type 0, Yes-type 1) : ")
            if(int(slot_1)==1 and int(slot_2)==1):
                slot_1=0.4
            ki_Spheres_obtained = input("Enter number of Ki Spheres Obtained : ")

            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+1.7+slot_1  + float(support)) * float(defense_input)  *(1+float(Leader_Skill))*(1.7) *  (1+ float(Super_Attacks_Performed) * 0.3+ float(UltraOrUnitSuper) * 0.5+float(Support_from_Super))

            print("Defense: " + str(defense))
        else:
            print("Character information not found.")
    elif character_id == "4017601":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)

            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            slot_1 = input("Enter whether it is first 7 turns from character's first appearance(Yes-Type 1, No - Type 0) : ")
            if(int(slot_1)==1):
                slot_1=1.2
            else:
                slot_1=0
            ki_Spheres_obtained = input("Enter number of Ki Spheres Obtained : ")

            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+1.5+slot_1  + float(support)) * float(defense_input)  *(1+float(Leader_Skill))*(1 ) *  (1+ float(Super_Attacks_Performed) * 0.5+float(Support_from_Super))

            print("Defense: " + str(defense))
        else:
            print("Character information not found.")
    elif character_id == "4028171":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)

            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            slot_1 = input("Enter whether characater is in slot 1(Type 0 if no, Type 1 if yes) : ")
            ki_Spheres_obtained = input("Enter number of Ki Spheres Obtained : ")

            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+2.5 + float(slot_1) * 1 + float(support)) * float(defense_input)  *(1+float(Leader_Skill)) *  (1+ Stack_Defense + float(Super_Attacks_Performed) * float(Super_Attacks_Performed1)+float(Support_from_Super))

            print("Defense: " + str(defense))
        else:
            print("Character information not found.")
    elif character_id == "1010031":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)

            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            slot_1 = input("Enter whether characater is in slot 1(Type 0 if no, Type 1 if yes) : ")
            slot_1=int(slot_1)*0.8
            ki_Spheres_obtained = input("Enter number of Ki Spheres Obtained : ")

            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+1.2 + float(slot_1)  + float(support)) * float(defense_input)  *(1+float(Leader_Skill)) *  (1+ Stack_Defense + float(Super_Attacks_Performed) * 0.3+float(Support_from_Super)) * (1+0.6)

            print("Defense: " + str(defense))
        else:
            print("Character information not found.")
    elif character_id == "1021311":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)

            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            ki_Spheres_obtained = input("Enter number of Ki Spheres Obtained : ")

            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+1  + float(support)) * float(defense_input)  *(1+float(Leader_Skill)) *  (1+ float(Super_Attacks_Performed) * 0.3) * (1+ float(Super_Attacks_Performed) * 0.44+float(Support_from_Super))

            print("Defense: " + str(defense))
        else:
            print("Character information not found.")
    elif character_id == "1028281":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            attacks_performed = input("Number of Attacks Performed during the turn? : ")
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            ki_Spheres_obtained = input("Enter number of Ki Spheres Obtained : ")

            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+2 + float(support)) * float(defense_input)  *(1+float(Leader_Skill)) *  (1+ float(Super_Attacks_Performed) * 0.3+float(Support_from_Super)) * (1+ float(attacks_performed) * 0.30)

            print("Defense: " + str(defense))
        else:
            print("Character information not found.")
    elif character_id == "1029121":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            ki_Spheres_obtained = input("Enter number of Ki Spheres Obtained : ")
            attacks_performed = input("Number of Attacks Performed during the turn : ")
            attacks_performed=int(attacks_performed)*0.66
            attacks_performed1 = input("Number of Ki this character has (6-Type 6, 12-Type 12) : ")
            if(int(attacks_performed1)>=12):
                attacks_performed1=1.66
            else:
                attacks_performed1=0
                
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+1.66 + float(support)) * float(defense_input)  *(1+float(Leader_Skill))*(1+attacks_performed+attacks_performed1) *  (1+ float(Super_Attacks_Performed) * 0.3+float(Support_from_Super))

            print("Defense: " + str(defense))
    elif character_id == "4028291":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            attacks_performed = input("Number of Attacks Performed during the turn? : ")
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            ki_Spheres_obtained = input("Enter number of Ki Spheres Obtained : ")

            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+2.22 + float(support)) * float(defense_input)  *(1+float(Leader_Skill)) *  (1+ float(Super_Attacks_Performed) * 0.3+float(Support_from_Super)) * (1+ float(attacks_performed) * 0.33)

            print("Defense: " + str(defense))
        else:
            print("Character information not found.")
    elif character_id == "1028131":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            ki_Spheres_obtained = input("Enter number of Ki Spheres Obtained : ")
            slot_slot = input("Enter Slot Character is in (Slot 1- Type 1, Slot 2 - Type 2) : ")
            if int(slot_slot)==3 :
                supportlol=0.3

            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+1.5 + float(support)+ supportlol) * float(defense_input)  *(1+float(Leader_Skill)) *  (1+ float(Support_from_Super)+float(Super_Attacks_Performed) * 0.5) * (1+ 1)

            print("Defense: " + str(defense))
        else:
            print("Character information not found.")
    elif character_id == "4028141":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            ki_Spheres_obtained = input("Enter number of Ki Spheres Obtained : ")
            slot_slot = input("Enter Whether this is the character's first Turn (Yes- Type 1, No - Type 1) : ")
            bigboost=0
            if int(slot_slot)==1:
                bigboost=3

            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+1.5 + float(support)) * float(defense_input)  *(1+float(Leader_Skill)) *  (1+ float(Super_Attacks_Performed) * 1+float(Support_from_Super)) * (1+ 1 + bigboost)

            print("Defense: " + str(defense))
        else:
            print("Character information not found.")
    elif character_id == "1003211":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            ki_Spheres_obtained = input("Enter number of Ki Spheres Obtained : ")
            dodge_activated= input("Enter Whether Character's Dodge Buff is Active (Active- Type 1, Not Active - Type 0) : ")
            slot_slot = input("Enter How many Turns has passed since character's entry Turn (1- Type 1, 2 - Type 2) : ")
            if int(slot_slot)<=5:
                superboost=1.5
                nonsuperboost=1.5
            elif int(slot_slot)>5 and int(slot_slot)<=7:
                superboost=1.5
                nonsuperboost=0
            else:
                superboost=1.0
                nonsuperboost=0

            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (nonsuperboost +  1+2 + float(support)) * float(defense_input)  *(1+float(Leader_Skill)) *  (1+float(Support_from_Super)) * (1+ superboost+int(dodge_activated) * 1.5)

            print("Defense: " + str(defense))
        else:
            print("Character information not found.")
    elif character_id == "1027351":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            ki_Spheres_obtained = input("Enter number of Ki Spheres Obtained : ")
            dodge_activated= input("Enter How much ki this character has (12- Type 12,  6 - Type 6) : ")
            if(int(dodge_activated)>=9):
                dodge_activated=1.2
            slot_slot = input("Enter How many Turns has passed since character's entry Turn (1- Type 1, 2 - Type 2) : ")
            if int(slot_slot)>=8:
                slot_slot=0.9
            else:
                slot_slot=1.5

            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+slot_slot+1.5+ float(support)) * float(defense_input)  *(1+float(Leader_Skill)) *  (1+float(Support_from_Super)) * (1+ dodge_activated)

            print("Defense: " + str(defense))
        else:
            print("Character information not found.")
    elif character_id == "1023261":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            ki_Spheres_obtained = input("Enter number of Ki Spheres Obtained : ")
            dodge_activated= input("Enter no of dodges in current turn (1- Type 1, 2 - Type 2) : ")
            slot_slot = input("Enter How many Dragon Ball Hero Category Allies in the same turn (1- Type 1, 2 - Type 2) : ")

            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+1.8 + float(support)+int(slot_slot)* 0.5) * float(defense_input)  *(1+float(Leader_Skill)) *  (1+float(Support_from_Super)) * (1+int(dodge_activated) * 0.5)

            print("Defense: " + str(defense))
        else:
            print("Character information not found.")
    elif character_id == "1026051":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            ki_Spheres_obtained = input("Enter number of Ki Spheres Obtained : ")
            dodge_activated= input("Enter no of enemies you are facing (1- Type 1, 2 - Type 2) : ")
            if (int(dodge_activated)>=2):
                dodge_activated=0.5
            slot_slot = input("Enter How many Earth-Bred Fighters Category Allies in the same turn (1- Type 1, 2 - Type 2) : ")
            slot_slot=int(slot_slot)*0.5
            dodge_activated1= input("Enter whether target enemy is stunned (Yes- Type 1, No - Type 0) : ")
            dodge_activated1=int(dodge_activated1)*0.3
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+0.7 + float(support)+slot_slot+dodge_activated1+dodge_activated) * float(defense_input)  *(1+float(Leader_Skill)) *  (1+float(Support_from_Super)+int(Super_Attacks_Performed)*0.3) * (1)

            print("Defense: " + str(defense))
        else:
            print("Character information not found.")
    elif character_id == "1021921":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
           
            dodge_activated= input("Enter no of GT Heroes Category ally (self excluded) attacking in the same turn (1- Type 1, 2 - Type 2) : ")
            dodge_activated=int(dodge_activated)*0.5

            
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+1.2 + float(support)+dodge_activated) * float(defense_input)  *(1+float(Leader_Skill)) *  (1+float(Support_from_Super)+int(Super_Attacks_Performed)*0.3) * (1)

            print("Defense: " + str(defense))
    elif character_id == "1027921":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            ki_Spheres_obtained = input("Enter number of Ki Spheres Obtained : ")
            dodge_activated= input("Enter no of hits received by this character so far (1- Type 1, 2 - Type 2) : ")
            dodge_activated=int(dodge_activated)*0.6
            if (float(dodge_activated)>=1.8):
                dodge_activated=1.8
            slot_slot = input("Enter How many Crossover Category Allies on the team (1- Type 1, 2 - Type 2) : ")
            slot_slot = int(slot_slot) *0.4
            if (slot_slot>=2):
                slot_slot=2
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+ float(support)+slot_slot) * float(defense_input)  *(1+float(Leader_Skill)) *  (1+float(Support_from_Super)+int(Super_Attacks_Performed)*0.3 + Stack_Defense ) * (1+int(dodge_activated))

            print("Defense: " + str(defense))
        else:
            print("Character information not found.")
    elif character_id == "1017551":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            ki_Spheres_obtained = input("Enter number of Ki Spheres Obtained : ")
            dodge_activated= input("Enter no of attacks evaded by this character during the turn (1- Type 1, 2 - Type 2) : ")
            dodge_activated=int(dodge_activated)*0.5
            dodge_activated1= input("Enter whether the buff of Def + 120% for 5 turns after evading an attack is active (Yes- Type 1, No - Type 0) : ")
            dodge_activated1=int(dodge_activated1)*1.2
            slot_slot = input("Enter How many Movie Heroes Category Allies on the team (1- Type 1, 2 - Type 2) : ")
            slot_slot = int(slot_slot) *0.5
            if (slot_slot>=1.5):
                slot_slot=1.5
            dodge_activated2= input("Enter what slot character is in (1- Type 1, 2 - Type 2) : ")
            if (int(dodge_activated2)==1):
                dodge_activated2=0.2
            else:
                dodge_activated2=0
                
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+ float(support)+slot_slot+dodge_activated2+0.3) * float(defense_input)  *(1+float(Leader_Skill)) *  (1+float(Support_from_Super)+int(Super_Attacks_Performed)*0.5 ) * (1+dodge_activated1+dodge_activated)

            print("Defense: " + str(defense))
    elif character_id == "1029671":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: This trunks's active gives himself 40% DEF : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            ki_Spheres_obtained = input("Enter number of Ki Spheres Obtained : ")
           
                
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+ float(support)+1.65) * float(defense_input)  *(1+float(Leader_Skill)) *  (1+float(Support_from_Super)+int(Super_Attacks_Performed)*0.8 + Stack_Defense) * (1+0.4)

            print("Defense: " + str(defense))
    elif character_id == "4016881":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: This trunks's active gives himself 40% DEF : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            ki_Spheres_obtained = input("Enter number of Ki Spheres Obtained : ")
           
                
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+ float(support)+2) * float(defense_input)  *(1+float(Leader_Skill)) *  (1+float(Support_from_Super)+int(UltraOrUnitSuper)*0.5 +int(Super_Attacks_Performed)*0.3) * (1+1.2)

            print("Defense: " + str(defense))
    elif character_id == "1016871":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: This trunks's active gives himself 40% DEF : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            ki_Spheres_obtained = input("Enter number of Ki Spheres Obtained : ")
           
                
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+ float(support)+2) * float(defense_input)  *(1+float(Leader_Skill)) *  (1+float(Support_from_Super)+int(UltraOrUnitSuper)*0.5 ) * (1+1.2+int(UltraOrUnitSuper)*1.2)

            print("Defense: " + str(defense))
    elif character_id == "1021941":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            ki_Spheres_obtained = input("Enter number of Ki Spheres Obtained : ")
            ki_Spheres_obtained=int(ki_Spheres_obtained)*0.1
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+ float(support)+1.2) * float(defense_input)  *(1+float(Leader_Skill)) *  (1+float(Support_from_Super)+int(Super_Attacks_Performed)*0.3  ) * (1+ki_Spheres_obtained)

            print("Defense: " + str(defense))
    elif character_id == "1025411":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            ki_Spheres_obtained = input("Enter number of Ki Spheres Obtained : ")
            dodge_activated= input("Enter whether guard is activated (Yes- Type 1, No - Type 0) : ")
            dodge_activated=int(dodge_activated)*0.5
            slot_slot = input("Enter whether all allies attacking in the same turn are Extreme Class Crossover Category characters (Yes- Type 1, No - Type 0) : ")
            if (int(slot_slot)==1):
                slot_slot=0.2
            else:
                slot_slot=0
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+ 1.5+0.3+ float(support)+slot_slot) * float(defense_input)  *(1+float(Leader_Skill)) *  (1+float(Support_from_Super)+int(Super_Attacks_Performed)*0.3 + Stack_Defense ) * (1+float(dodge_activated)+0.5)

            print("Defense: " + str(defense))
        else:
            print("Character information not found.")
    elif character_id == "1012421":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            ki_Spheres_obtained = input("Enter number of Ki Spheres Obtained : ")
           
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+ 1.2+ float(support)) * float(defense_input)  *(1+float(Leader_Skill)) *  (1+float(Support_from_Super)+int(Super_Attacks_Performed)*0 ) * (1)

            print("Defense: " + str(defense))
    elif character_id == "1020051":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            ki_Spheres_obtained = input("Enter number of Ki Spheres Obtained : ")
            dodge_activated= input("Enter whether there is a extreme class enemy (Yes- Type 1, No - Type 0) : ")
            dodge_activated=int(dodge_activated)*0.58
            slot_slot = input("Enter no of attacks performed by this character (1- Type 1, 2 - Type 2) : ")
            if (int(slot_slot)>=6):
                slot_slot=0.58
            else:
                slot_slot=int(slot_slot)*0.1
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+ 0.7+0.3+ float(support)+dodge_activated) * float(defense_input)  *(1+float(Leader_Skill)) *  (1+float(Support_from_Super)+int(Super_Attacks_Performed)*0.5 ) * (1+slot_slot)

            print("Defense: " + str(defense))
    elif character_id == "1009731":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            ki_Spheres_obtained = input("Enter number of Ki Spheres Obtained : ")
            
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+ 1.2+ float(support)) * float(defense_input)  *(1+float(Leader_Skill)) *  (1+float(Support_from_Super) ) * (1+1.2)

            print("Defense: " + str(defense))
    elif character_id == "1009741":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            ki_Spheres_obtained = input("Enter number of Ki Spheres Obtained : ")
            slot_slot = input("Enter whether all allies attacking in the same turn are Realm of Gods Category characters (Yes- Type 1, No - Type 0) : ")
            if (int(slot_slot)==1):
                slot_slot=1
            else:
                slot_slot=0
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+ slot_slot+ float(support)) * float(defense_input)  *(1+float(Leader_Skill)) *  (1+float(Support_from_Super)+int(Super_Attacks_Performed)*0.3  ) * (1+1.3)

            print("Defense: " + str(defense))
    elif character_id == "4018731":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            ki_Spheres_obtained = input("Enter number of Ki Spheres Obtained : ")
            slot_slot = input("Enter whether attacking extreme class enemies (Yes- Type 1, No - Type 0) : ")
            if (int(slot_slot)==1):
                slot_slot=0.58
            else:
                slot_slot=0
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+ 1.58+ float(support)) * float(defense_input)  *(1+float(Leader_Skill)) *  (1+float(Support_from_Super)+int(Super_Attacks_Performed)*0.3  ) * (1+slot_slot)

            print("Defense: " + str(defense))
    elif character_id == "1020921":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            slot_slot = input("Enter whether there is a Shadow Dragon Saga Category Enemy (Yes- Type 1, No - Type 0) : ")
            if (int(slot_slot)==1):
                slot_slot=0.4
            else:
                slot_slot=0
            slot_slot1 = input("Enter whether there attacking extreme class enemy (Yes- Type 1, No - Type 0) : ")
            if (int(slot_slot1)==1):
                slot_slot1=0.4
            else:
                slot_slot1=0                
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+ 1.8+slot_slot+ float(support)) * float(defense_input)  *(1+float(Leader_Skill)) *  (1+float(Support_from_Super)+int(Super_Attacks_Performed)*0  ) * (1+slot_slot1)

            print("Defense: " + str(defense))
    elif character_id == "1020921":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            slot_slot = input("Enter whether there are only Extreme Class allies attacking in the same turn (Yes- Type 1, No - Type 0) : ")
            if (int(slot_slot)==1):
                slot_slot=0.6
            else:
                slot_slot=0
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+ 1.2+slot_slot+ float(support)) * float(defense_input)  *(1+float(Leader_Skill)) *  (1+float(Support_from_Super)+int(Super_Attacks_Performed)*0  ) * (1)

            print("Defense: " + str(defense))
    elif character_id == "1020931":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            ki_Spheres_obtained = input("Enter number of extreme class allies on the team (2- Type 2, 7 - Type 7) : ")
            ki_Spheres_obtained=int(ki_Spheres_obtained)*0.05
            slot_slot = input("Enter whether there are only Extreme Class allies attacking in the same turn (Yes- Type 1, No - Type 0) : ")
            if (int(slot_slot)==1):
                slot_slot=1
            else:
                slot_slot=0
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+ ki_Spheres_obtained+slot_slot+ float(support)) * float(defense_input)  *(1+float(Leader_Skill)) *  (1+float(Support_from_Super)+int(Super_Attacks_Performed)*0  ) * (1)

            print("Defense: " + str(defense))
    elif character_id == "1026771":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            ki_Spheres_obtained = input("Enter number of Ki Spheres Obtained : ")
            dodge_activated= input("Enter how many times guard has been activated (1- Type 1, 2 - Type 2) : ")
            if (int(dodge_activated)>=5):
                dodge_activated=5
            dodge_activated=int(dodge_activated)*0.3
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+ 0.5+1.5+ float(support)) * float(defense_input)  *(1+float(Leader_Skill)) *  (1+float(Support_from_Super)+int(Super_Attacks_Performed)*0.3  ) * (1+dodge_activated)

            print("Defense: " + str(defense))
        else:
            print("Character information not found.")
    elif character_id == "4024301":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            ki_Spheres_obtained = input("Enter number of Ki Spheres Obtained : ")
            dodge_activated= input("Enter how many times guard has been activated (1- Type 1, 2 - Type 2) : ")
            if (int(dodge_activated)>=2 and int(dodge_activated)<=3):
                dodge_activated=0.58
            elif(int(dodge_activated)>=4):
                dodge_activated=1.16
            else:
                dodge_activated=0
            HP = input("Enter amount of HP(30%- Type 30, 50%-Type 50) : ")
            HP=float(HP)/100 *1
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+ 1.8+HP+ float(support)) * float(defense_input)  *(1+float(Leader_Skill)) *  (1+float(Support_from_Super)+int(Super_Attacks_Performed)*0.5  ) * (1+dodge_activated)

            print("Defense: " + str(defense))
        else:
            print("Character information not found.")
    elif character_id == "1024061":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            ki_Spheres_obtained = input("Enter number of Ki Spheres Obtained : ")
            dodge_activated= input("Enter how many Enemies (1- Type 1, 2 - Type 2) : ")
            if(int(dodge_activated)>=2):
                dodge_activated1=0
                dodge_activated2=1.5
            else:
                dodge_activated1=0.5
                dodge_activated2=0
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+ 1.5+dodge_activated2+ float(support)) * float(defense_input)  *(1+float(Leader_Skill)) *  (1+float(Support_from_Super)+int(Super_Attacks_Performed)*0.5  ) * (1+dodge_activated1)

            print("Defense: " + str(defense))
    elif character_id == "1024021":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            
            dodge_activated= input("Enter how many enemies (1- Type 1, 2 - Type 2) : ")
            if(int(dodge_activated)<=2):
                dodge_activated=0.8
            else:
                dodge_activated=0
            
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+ 1.6+dodge_activated+ float(support)) * float(defense_input)  *(1+float(Leader_Skill)) *  (1+float(Support_from_Super)+int(Super_Attacks_Performed)*0.3  ) * (1)

            print("Defense: " + str(defense))
    elif character_id == "1023801":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            lol = input("Is an ally whose name includes Vegeta (Kid, Jr., etc. excluded) on the team?(Yes- Type 1, No- Type 0) : ")
            lol = int(lol) *0.5
            dodge_activated= input("Enter what slot character is in (1- Type 1, 2 - Type 2) : ")
            if(int(dodge_activated)==1):
                dodge_activated=0.5
            else:
                dodge_activated=0
            dodge_activated1= input("Enter how many attacks performed by this character (1- Type 1, 2 - Type 2) : ")
            if (int(dodge_activated1)>=5):
                dodge_activated1=5
            dodge_activated1=int(dodge_activated1)*0.1
            dodge_activated2= input("Enter how many attacks evaded by this character (1- Type 1, 2 - Type 2) : ")
            if (int(dodge_activated2)>=5):
                dodge_activated2=5
            dodge_activated2=int(dodge_activated2)*0.1
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+lol+ 1.5+dodge_activated+ float(support)) * float(defense_input)  *(1+float(Leader_Skill)) *  (1+float(Support_from_Super)+int(Super_Attacks_Performed)*0.3  ) * (1+dodge_activated2+dodge_activated1)

            print("Defense: " + str(defense))
    elif character_id == "1010331":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            dodge_activated= input("Enter how many attacks received (1- Type 1, 2 - Type 2) : ")
            if(int(dodge_activated)>=5):
                dodge_activated=0.5
            else:
                dodge_activated=int(dodge_activated)*0.1
            dodge_activated1= input("Enter how many attacks evaded by this character (1- Type 1, 2 - Type 2) : ")
            if (int(dodge_activated1)>=5):
                dodge_activated1=5
            dodge_activated1=int(dodge_activated1)*0.1
            
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+1+ float(support)) * float(defense_input)  *(1+float(Leader_Skill)) *  (1+float(Support_from_Super)+int(Super_Attacks_Performed)*0  ) * (1+dodge_activated+dodge_activated1+0.5)

            print("Defense: " + str(defense))
    elif character_id == "1023731":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            lol = input("Is an ally whose name includes Ginyu on the turn?(Yes- Type 1, No- Type 0) : ")
            lol = int(lol) *0.3

            dodge_activated1= input("Enter how many attacks performed by this character (1- Type 1, 2 - Type 2) : ")
            if (int(dodge_activated1)>=5):
                dodge_activated1=5
            dodge_activated1=int(dodge_activated1)*0.1
           
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+lol+ 1.5+ float(support)) * float(defense_input)  *(1+float(Leader_Skill)) *  (1+float(Support_from_Super)+int(Super_Attacks_Performed)*0.3  ) * (1+dodge_activated1)

            print("Defense: " + str(defense))
    elif character_id == "1010161":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            lol = input("Is an ally whose name includes Trunks (Kid) on the turn?(Yes- Type 1, No- Type 0) : ")
            lol = int(lol) *0.2

           
           
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+lol+ 1.5+ float(support)) * float(defense_input)  *(1+float(Leader_Skill)) *  (1+float(Support_from_Super)+int(Super_Attacks_Performed)*0 ) * (1)

            print("Defense: " + str(defense))
    elif character_id == "1014221":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
          
            dodge_activated1= input("Enter how many turns with this character on rotation (1- Type 1, 2 - Type 2) : ")
            if (int(dodge_activated1)>=3):
                dodge_activated1=0.6
            else:
                 dodge_activated1=int(dodge_activated1)*0.2 
               
           
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+dodge_activated1+ 1.4+ float(support)) * float(defense_input)  *(1+float(Leader_Skill)) *  (1+float(Support_from_Super)+int(Super_Attacks_Performed)*0.3+int(UltraOrUnitSuper)*1  ) * (1)

            print("Defense: " + str(defense))
    elif character_id == "1019171":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
          
            dodge_activated1= input("Enter how many enemies (1- Type 1, 2 - Type 2) : ")
            if (int(dodge_activated1)>=2):
                dodge_activated1=0
            else:
                 dodge_activated1=1
               
           
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+dodge_activated1+ 1.5+ float(support)) * float(defense_input)  *(1+float(Leader_Skill)) *  (1+float(Support_from_Super)+int(Super_Attacks_Performed)*0.5  ) * (1)

            print("Defense: " + str(defense))
    elif character_id == "1023981":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            dodge_activated= input("Enter how many Ki Spheres Obtained (1- Type 1, 2 - Type 2) : ")
            if(int(dodge_activated)>=3):
                dodge_activated=0.5
            else:
                dodge_activated=0
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+ 1.8+dodge_activated+ float(support)) * float(defense_input)  *(1+float(Leader_Skill)) *  (1+float(Support_from_Super)+int(Super_Attacks_Performed)*0.3  ) * (1+0.5)

            print("Defense: " + str(defense))
    elif character_id == "1024081":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            ki_Spheres_obtained = input("Enter number of Ki Spheres Obtained : ")
            dodge_activated= input("Enter how many Super Class Enemies (1- Type 1, 2 - Type 2) : ")
            dodge_activated=int(dodge_activated)*0.08
            HP = input("Enter amount of HP(30%- Type 30, 50%-Type 50) : ")
            HP=float(HP)/100 *7.8
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+ 0.3+dodge_activated+HP+ float(support)) * float(defense_input)  *(1+float(Leader_Skill)) *  (1+float(Support_from_Super)+int(Super_Attacks_Performed)*0.5  ) * (1)

            print("Defense: " + str(defense))
    elif character_id == "1024141":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            
            HP = input("Enter amount of HP(30%- Type 30, 50%-Type 50) : ")
            if (int(HP)>=50):
                HP=2
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+ 1+HP+ float(support)) * float(defense_input)  *(1+float(Leader_Skill)) *  (1+float(Support_from_Super)+int(UltraOrUnitSuper1)*0.5  ) * (1)

            print("Defense: " + str(defense))
        else:
            print("Character information not found.")
    elif character_id == "4024151":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            
            HP = input("Enter no of Ki SPheres obtained(3- Type 3, 1 - Type 1) : ")
            if (int(HP)>=3):
                HP=1
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+ 1+HP+ float(support)) * float(defense_input)  *(1+float(Leader_Skill)) *  (1+float(Support_from_Super)+int(Super_Attacks_Performed)*0.3+Stack_Defense  ) * (1)

            print("Defense: " + str(defense))
        else:
            print("Character information not found.")
    elif character_id == "1024251":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            ki_Spheres_obtained = input("Enter number of Ki Spheres Obtained : ")
            dodge_activated= input("Enter what enemies present (0- Extreme Class, 1- Super Class, 2 - Both Super and Extreme) : ")
            if (int(dodge_activated)==0):
                dodge_activated=0.34
            elif(int(dodge_activated)==1):
                dodge_activated=0.16
            else:
                dodge_activated=0.50
            HP = input("Enter amount of HP(30%- Type 30, 50%-Type 50) : ")
            HP=float(HP)/100 *1
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+ 1.8+HP+ float(support)+dodge_activated) * float(defense_input)  *(1+float(Leader_Skill)) *  (1+float(Support_from_Super)+int(Super_Attacks_Performed)*0.5  ) * (1)

            print("Defense: " + str(defense))
        else:
            print("Character information not found.")
    elif character_id == "1009721":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            ki_Spheres_obtained = input("Enter number of Ki Spheres Obtained : ")
            dodge_activated= input("Enter how many Mastered Evolution Category ally on the team(1- Type 1, 2 - Type 2) : ")

            dodge_activated=int(dodge_activated)*0.15
            
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+ dodge_activated+ float(support)) * float(defense_input)  *(1+float(Leader_Skill)) *  (1+float(Support_from_Super)+int(Super_Attacks_Performed)*0.3 ) * (1+1.3)

            print("Defense: " + str(defense))
   
    elif character_id == "1017681":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            ki_Spheres_obtained = input("Enter number of Ki Spheres Obtained : ")
            dodge_activated= input("Enter how many Androids Category ally on the team(1- Type 1, 2 - Type 2) : ")

            dodge_activated=int(dodge_activated)*0.18
            dodge_activated1= input("Enter how many attacks performed by this character(1- Type 1, 2 - Type 2) : ")

            dodge_activated1=int(dodge_activated1)*0.18
            if(int(dodge_activated1)>=0.54):
                dodge_activated1=0.54
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+ dodge_activated+0.36+ float(support)) * float(defense_input)  *(1+float(Leader_Skill)) *  (1+float(Support_from_Super)+int(Super_Attacks_Performed)*0 ) * (1+dodge_activated1)

            print("Defense: " + str(defense))
    elif character_id == "1024801":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            ki_Spheres_obtained = input("Enter number of Ki Spheres Obtained : ")
            dodge_activated= input("Enter how many times guard has been activated f there are more than 3 Peppy Gals or 3 Low-Class Warrior Category allies on the team other than this character(1- Type 1, 2 - Type 2) : ")
            if (int(dodge_activated)>=5):
                dodge_activated=5
            dodge_activated=int(dodge_activated)*0.3
            dodge_activated1= input("Enter how many times this character has received an attack(1- Type 1, 2 - Type 2) : ")
            if (int(dodge_activated1)>=5):
                dodge_activated1=5
            dodge_activated1=int(dodge_activated1)*0.3
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+ 1.5+ float(support)) * float(defense_input)  *(1+float(Leader_Skill)) *  (1+float(Support_from_Super) ) * (1+dodge_activated1+dodge_activated)

            print("Defense: " + str(defense))
        else:
            print("Character information not found.")
    elif character_id == "1014331":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            ki_Spheres_obtained = input("Enter number of Ki Spheres Obtained : ")
            slot_slot = input("Enter whether all allies attacking in the same turn are either in Revenge, GT Boss, or Sworn Enemies categories (Yes- Type 1, No - Type 0) : ")
            if (int(slot_slot)==1):
                slot_slot=1
            else:
                slot_slot=0
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+ 1.5+ float(support)+slot_slot) * float(defense_input)  *(1+float(Leader_Skill)) *  (1+float(Support_from_Super)+int(Super_Attacks_Performed)*0.3  ) * (1)

            print("Defense: " + str(defense))
        else:
            print("Character information not found.")
    elif character_id == "1014351":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            ki_Spheres_obtained = input("Enter number of Ki Spheres Obtained : ")
            slot_slot = input("Enter whether all allies attacking in the same turn are either in Revenge, GT Boss, or Sworn Enemies categories (Yes- Type 1, No - Type 0) : ")
            if (int(slot_slot)==1):
                slot_slot=1
            else:
                slot_slot=0
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+ 1.5+ float(support)+slot_slot) * float(defense_input)  *(1+float(Leader_Skill)) *  (1+float(Support_from_Super)+int(Super_Attacks_Performed)*0.3  ) * (1)

            print("Defense: " + str(defense))
        else:
            print("Character information not found.")
    elif character_id == "1023691":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            ki_Spheres_obtained = input("Enter number of Ki Spheres Obtained : ")
            dodge_activated= input("Enter whether all allies are from the Crossover Category (Yes- Type 1, No - Type 0) : ")
            dodge_activated=int(dodge_activated)*0.25
            dodge_activated1= input("Enter whether the high chance for for Ki+2, ATK & DEF +25% to all allies is active (Yes- Type 1, No - Type 0) : ")
            dodge_activated1=int(dodge_activated1)*0.25
            slot_slot = input("Enter whether there is a Crossover Category character attacking in the same turn(Yes- Type 1, No - Type 0) : ")
            if (int(slot_slot)==1):
                slot_slot=0.5
            else:
                slot_slot=0
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (slot_slot+1+ 1.5+dodge_activated+dodge_activated1+ float(support)+slot_slot) * float(defense_input)  *(1+float(Leader_Skill)) *  (1+float(Support_from_Super)+int(Super_Attacks_Performed)*0.3 + Stack_Defense ) * (1+float(dodge_activated)+0.5)

            print("Defense: " + str(defense))
        else:
            print("Character information not found.")
    elif character_id == "1019361":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            ki_Spheres_obtained = input("Enter number of Ki Spheres Obtained : ")
            dodge_activated= input("Enter no of dodges in current turn (1- Type 1, 2 - Type 2) : ")

            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+1.0 + float(support)) * float(defense_input)  *(1+float(Leader_Skill)) *  (1+float(Support_from_Super)) * (1+int(dodge_activated) * 0.5)

            print("Defense: " + str(defense))
        else:
            print("Character information not found.")
    elif character_id == "1024751":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            ki_Spheres_obtained = input("Enter number of Ki Spheres Obtained : ")
            dodge_activated= input("Enter no of dodges in current turn (1- Type 1, 2 - Type 2) : ")
            dodge_activated=int(dodge_activated)*0.39
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+1.78 + float(support)) * float(defense_input)  *(1+float(Leader_Skill)) *  (1+float(Support_from_Super)+int(Super_Attacks_Performed)*0.5) * (1+dodge_activated)

            print("Defense: " + str(defense))
    elif character_id == "1028761":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            dodge_activated= input("Enter whether turn you are currently in is odd (Yes- Type 1, No - Type 0) : ")
            if (int(dodge_activated)==1):
                dodge_activated1= input("Enter whether after Turn 7 (Yes- Type 1, No - Type 0) : ")
                if (int(dodge_activated1)==1):
                    dodge_activated2= input("Enter whether after Turn 9 (Yes- Type 1, No - Type 0) : ")
                else:
                    dodge_activated2= input("Enter whether after Turn 9 (Yes- Type 1, No - Type 0) : ")
                    ki_Spheres_obtained = input("Enter number of AGL Ki Spheres Obtained : ")
                    if (int(dodge_activated2)==1):
                        ki_Spheres_obtained = input("Enter number of Teq Ki Spheres Obtained : ")
                    else:
                        ki_Spheres_obtained = input("Enter number of Teq or AGL Ki Spheres Obtained : ")

            else:
                ki_Spheres_obtained=0
            if (int(ki_Spheres_obtained)>10):
                ki_Spheres_obtained=10

            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+3.0 + float(support)+ int(dodge_activated)*int(ki_Spheres_obtained) * 0.3) * float(defense_input)  *(1+float(Leader_Skill)) *  (1.33) * (1+float(Support_from_Super) + int(Super_Attacks_Performed) * 0.5)

            print("Defense: " + str(defense))
        else:
            print("Character information not found.")
    elif character_id == "1028681":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")

            hit_defense=0

            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            ki_Spheres_obtained = input("Enter number of Ki Spheres Obtained : ")
            dodge_activated= input("Enter which slot character is in (1- Type 1, 2 - Type 2) : ")
            if (int(dodge_activated)==1):
                slot_1_def=1
                slot_2_def=0
                hit_activated= input("Enter whether character received an attack (Yes- Type 1, No - Type 0) : ")
                if (int(hit_activated)==1):
                    hit_defense=0.5
                else:
                    hit_defense=0
            else:
                slot_2_def=1
                slot_1_def=0

            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+2.3 + float(support) +slot_1_def * 2) * float(defense_input)  *(1+float(Leader_Skill)) *  (1+ slot_1_def * hit_defense + slot_2_def * 1) * (1+float(Support_from_Super) + int(Super_Attacks_Performed) * 0.5)

            print("Defense: " + str(defense))
        else:
            print("Character information not found.")
    elif character_id == "1010271":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")

            hit_defense=0

            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            ki_Spheres_obtained = input("Enter number of Rainbow Ki Spheres Obtained : ")
            ki_Spheres_obtained=int(ki_Spheres_obtained)*0.12
            dodge_activated= input("Enter which slot character is in (1- Type 1, 2 - Type 2) : ")
            if (int(dodge_activated)==3):
                dodge_activated=1.2
            else:
                dodge_activated=0

            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+dodge_activated + float(support) +ki_Spheres_obtained) * float(defense_input)  *(1+float(Leader_Skill)) *  (1+ 1.2) * (1+float(Support_from_Super) + int(Super_Attacks_Performed) * 0.3)

            print("Defense: " + str(defense))
        else:
            print("Character information not found.")
    elif character_id == "1028631":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")

            hit_defense=0

            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            ki_Spheres_obtained = input("Enter number of Ki Spheres Obtained : ")

            hit_activated= input("Enter whether character received an attack this turn (Yes- Type 1, No - Type 0) : ")
            if (int(hit_activated)==1):
                hit_defense=-0.24
            else:
                 hit_defense=0

            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+2.4 + float(support)) * float(defense_input)  *(1+float(Leader_Skill)) *  (1+ hit_defense) * (1+float(Support_from_Super) + int(Super_Attacks_Performed) * 0.5+Stack_Defense)

            print("Defense: " + str(defense))
        else:
            print("Character information not found.")
    elif character_id == "1020181":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")

            hit_defense=0

            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            ki_Spheres_obtained = input("Enter number of Ki Spheres Obtained : ")
            dodge_activated= input("Enter number of turns elapsed with  character there is a character whose name includes Ribrianne or Rozie attacking in the same turn(1- Type 1, 2 - Type 2) : ")

            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+0.8 +0.22 + float(support) +int(dodge_activated) * 0.22) * float(defense_input)  *(1+float(Leader_Skill)) *  (1) * (1+float(Support_from_Super))

            print("Defense: " + str(defense))
        else:
            print("Character information not found.")
    elif character_id == "1024271":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")

            hit_defense=0

            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            ki_Spheres_obtained = input("Enter number of Ki Spheres Obtained : ")
            dodge_activated= input("Enter whether all allies attacking in the same turn are Terrifying Conqueror characters(Yes- Type 1, No - Type 0) : ")
            dodge_activated=int(dodge_activated)*1
            dodge_activated1= input("Enter whether target enemy is in ATK Down status(Yes- Type 1, No - Type 0) : ")
            dodge_activated1=int(dodge_activated1)*0.5
            dodge_activated2= input("Enter Ki Level of this character(9 - Type 9, 12 - Type 12) : ")
            if(int(dodge_activated2)>=9 and int(dodge_activated2)<=11):
                dodge_activated2=2
            elif(int(dodge_activated2)>=12):
                dodge_activated2=2.5
            elif(int(dodge_activated2)<=6):
                dodge_activated2=1

            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+dodge_activated1+dodge_activated + float(support) ) * float(defense_input)  *(1+float(Leader_Skill)) *  (1+dodge_activated2) * (1+float(Support_from_Super)+int(Super_Attacks_Performed)*0.3)

            print("Defense: " + str(defense))
    elif character_id == "1024041":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")

            hit_defense=0

            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            ki_Spheres_obtained = input("Enter number of Ki Spheres Obtained : ")
            dodge_activated= input("Enter whether there is a character whose name includes Frieza attacking in the same turn(Yes- Type 1, No - Type 0) : ")
            dodge_activated=int(dodge_activated)*1
            dodge_activated1= input("Enter whether HP is 50% or more(Yes- Type 1, No - Type 0) : ")
            dodge_activated1=int(dodge_activated1)*0.75
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+1+dodge_activated1+dodge_activated + float(support) ) * float(defense_input)  *(1+float(Leader_Skill)) *  (1) * (1+float(Support_from_Super)+int(Super_Attacks_Performed)*0.5)

            print("Defense: " + str(defense))
    elif character_id == "1029571":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")

            hit_defense=0

            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            ki_Spheres_obtained = input("Enter number of Ki Spheres Obtained : ")
            ki_Spheres_obtained = int(ki_Spheres_obtained)*0.5
            if (ki_Spheres_obtained>=5):
                ki_Spheres_obtained=5
            dodge_activated= input("Enter whether this character has faced one enemy yet(Yes- Type 1, No - Type 0) : ")
            dodge_activated=int(dodge_activated)*1.8
            dodge_activated1= input("Enter whether HP reached 50% or less at end of turn with this character on rotation(Yes- Type 1, No - Type 0) : ")
            dodge_activated1=int(dodge_activated1)*0.5
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+ki_Spheres_obtained+dodge_activated + float(support)+dodge_activated1 ) * float(defense_input)  *(1+float(Leader_Skill)) *  (1  ) * (1+float(Support_from_Super)+int(Super_Attacks_Performed)*0.2 + Stack_Defense)

            print("Defense: " + str(defense))
    elif character_id == "1011381":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")

            hit_defense=0

            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")

            dodge_activated= input("Enter whether there was one occurance where HP was 59% or less when this character received an attack(Yes- Type 1, No - Type 0) : ")
            dodge_activated=int(dodge_activated)*2
            dodge_activated1= input("Enter whether there was one occurance where HP was 20% or less when this character received an attack(Yes- Type 1, No - Type 0) : ")
            dodge_activated1=int(dodge_activated1)*1
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+2+dodge_activated + float(support)+dodge_activated1 ) * float(defense_input)  *(1+float(Leader_Skill)) *  (1  ) * (1+float(Support_from_Super))

            print("Defense: " + str(defense))
    elif character_id == "1020601":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")

            hit_defense=0

            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            ki_Spheres_obtained = input("Enter number of Ki Spheres Obtained : ")
            ki_Spheres_obtained=int(ki_Spheres_obtained)*0.15
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+ float(support) +ki_Spheres_obtained) * float(defense_input)  *(1+float(Leader_Skill)) *  (1) * (1+float(Support_from_Super)+int(Super_Attacks_Performed)*0.2+Stack_Defense)

            print("Defense: " + str(defense))
    elif character_id == "1020591":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")

            hit_defense=0

            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            ki_Spheres_obtained = input("Enter number of Ki Spheres Obtained : ")
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+ float(support) ) * float(defense_input)  *(1+float(Leader_Skill)) *  (1+1) * (1+float(Support_from_Super)+int(Super_Attacks_Performed)*0.2+Stack_Defense)

            print("Defense: " + str(defense))
    elif character_id == "1009641":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")

            hit_defense=0

            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            ki_Spheres_obtained = input("Enter number of Ki Spheres Obtained : ")
            dodge_activated1= input("Enter whether HP is 50% or more(Yes- Type 1, No - Type 0) : ")
            dodge_activated1=int(dodge_activated1)*0.7
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+dodge_activated1 + float(support) ) * float(defense_input)  *(1+float(Leader_Skill)) *  (1) * (1+float(Support_from_Super)+int(Super_Attacks_Performed)*0.3)

            print("Defense: " + str(defense))
    elif character_id == "1008571":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")

            hit_defense=0

            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            ki_Spheres_obtained = input("Enter number of Ki Spheres Obtained : ")
           
            dodge_activated1= input("Enter whether HP is 50% or more(Yes- Type 1, No - Type 0) : ")
            if(int(dodge_activated1)==1):
                dodge_activated1=1
            else:
                dodge_activated1=2
                
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+1+dodge_activated1 + float(support) ) * float(defense_input)  *(1+float(Leader_Skill)) *  (1) * (1+float(Support_from_Super)+int(Super_Attacks_Performed)*0.3)

            print("Defense: " + str(defense))
    elif character_id == "1023421":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")

            hit_defense=0

            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            ki_Spheres_obtained = input("Enter number of Ki Spheres Obtained : ")
            if(int(ki_Spheres_obtained)>=5):
                ki_Spheres_obtained=0.58
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+ki_Spheres_obtained+1.5 + float(support) ) * float(defense_input)  *(1+float(Leader_Skill)) *  (1) * (1+float(Support_from_Super)+int(Super_Attacks_Performed)*0.3+int(UltraOrUnitSuper)*0.5)

            print("Defense: " + str(defense))
    elif character_id == "1023041":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")

            hit_defense=0

            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            ki_Spheres_obtained = input("Enter number of Ki Spheres Obtained : ")
            dodge_activated1= input("Enter whether HP is 30% or more(Yes- Type 1, No - Type 0) : ")
            dodge_activated1=int(dodge_activated1)*1.5
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+dodge_activated1 + float(support) ) * float(defense_input)  *(1+float(Leader_Skill)) *  (1+0.5) * (1+float(Support_from_Super)+int(Super_Attacks_Performed)*0.3+int(UltraOrUnitSuper)*0.3)

            print("Defense: " + str(defense))
    elif character_id == "1027711":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")

            hit_defense=0

            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            ki_Spheres_obtained = input("Enter number of Ki Spheres Obtained : ")
            dodge_activated= input("Enter whether Great Ape Power or Crossover Category ally attacking in the same turn or a Great Ape Power or Crossover Category enemy(Yes- Type 1, No - Type 0) : ")
            if (int(dodge_activated)==1):
                dodge_activated=1
            else:
                dodge_activated=0
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+2  + float(support) +dodge_activated ) * float(defense_input)  *(1+float(Leader_Skill)) *  (1+1.5) * (1+float(Support_from_Super))

            print("Defense: " + str(defense))
        else:
            print("Character information not found.")
    elif character_id == "1022970":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")

            hit_defense=0

            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            ki_Spheres_obtained = input("Enter number of Ki Spheres Obtained : ")
            dodge_activated= input("Enter whether there is a extreme class enemy(Yes- Type 1, No - Type 0) : ")
            if (int(dodge_activated)==1):
                dodge_activated=0.35
            else:
                dodge_activated=0
    
            dodge_activated1=0.35

            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+0.35  + float(support)+dodge_activated1 +dodge_activated ) * float(defense_input)  *(1+float(Leader_Skill)) *  (1+0.7) * (1+float(Support_from_Super)+int(Super_Attacks_Performed)*0.35)

            print("Defense: " + str(defense))
    elif character_id == "1022980":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")

            hit_defense=0

            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            ki_Spheres_obtained = input("Enter number of Ki Spheres Obtained : ")
            dodge_activated= input("Enter whether there is a super class enemy(Yes- Type 1, No - Type 0) : ")
            if (int(dodge_activated)==1):
                dodge_activated=0.35
            else:
                dodge_activated=0
            dodge_activated1= input("Enter number of enemies(1- Type 1, 2 - Type 2) : ")
            if (int(dodge_activated1)==1):
                dodge_activated1=0.35
            else:
                dodge_activated1=0
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+0.35  + float(support)+dodge_activated1 +dodge_activated ) * float(defense_input)  *(1+float(Leader_Skill)) *  (1+0.7) * (1+float(Support_from_Super)+int(Super_Attacks_Performed)*0.35)

            print("Defense: " + str(defense))
    elif character_id == "4014791":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")

            hit_defense=0

            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            ki_Spheres_obtained = input("Enter number of Ki Spheres Obtained : ")
            dodge_activated= input("Enter whether attacking extreme class enemy(Yes- Type 1, No - Type 0) : ")
            if (int(dodge_activated)==1):
                dodge_activated=0.1
            else:
                dodge_activated=0
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+1.4  + float(support) +dodge_activated ) * float(defense_input)  *(1+float(Leader_Skill)) *  (1+dodge_activated) * (1+float(Support_from_Super)+int(Super_Attacks_Performed)*0.2+Stack_Defense)

            print("Defense: " + str(defense))
    elif character_id == "4014831":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")

            hit_defense=0

            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            ki_Spheres_obtained = input("Enter number of Ki Spheres Obtained : ")
            dodge_activated= input("Enter whether attacking super class enemy(Yes- Type 1, No - Type 0) : ")
            if (int(dodge_activated)==1):
                dodge_activated=0.3
            else:
                dodge_activated=0
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+1.2  + float(support) +dodge_activated ) * float(defense_input)  *(1+float(Leader_Skill)) *  (1+dodge_activated) * (1+float(Support_from_Super)+int(Super_Attacks_Performed)*0.2+Stack_Defense)

            print("Defense: " + str(defense))
    elif character_id == "1022061":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")

            hit_defense=0

            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            ki_Spheres_obtained = input("Enter number of Ki Spheres Obtained : ")
            dodge_activated= input("Enter whether attacking super class enemy(Yes- Type 1, No - Type 0) : ")
            if (int(dodge_activated)==1):
                dodge_activated=0.6
            else:
                dodge_activated=0
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+2  + float(support) +dodge_activated ) * float(defense_input)  *(1+float(Leader_Skill)) *  (1+dodge_activated) * (1+float(Support_from_Super))

            print("Defense: " + str(defense))
    elif character_id == "4014851":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")

            hit_defense=0

            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            ki_Spheres_obtained = input("Enter number of Ki Spheres Obtained : ")
            dodge_activated= input("Enter whether attacking super class enemy(Yes- Type 1, No - Type 0) : ")
            if (int(dodge_activated)==1):
                dodge_activated=0.1
            else:
                dodge_activated=0
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+1.4  + float(support) +dodge_activated ) * float(defense_input)  *(1+float(Leader_Skill)) *  (1+dodge_activated) * (1+float(Support_from_Super)+int(Super_Attacks_Performed)*0.2+Stack_Defense)

            print("Defense: " + str(defense))
    elif character_id == "4014841":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")

            hit_defense=0

            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            ki_Spheres_obtained = input("Enter number of Ki Spheres Obtained : ")
            dodge_activated= input("Enter whether attacking super class enemy(Yes- Type 1, No - Type 0) : ")
            if (int(dodge_activated)==1):
                dodge_activated=0.2
            else:
                dodge_activated=0
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+1.3  + float(support) +dodge_activated ) * float(defense_input)  *(1+float(Leader_Skill)) *  (1+dodge_activated) * (1+float(Support_from_Super)+int(Super_Attacks_Performed)*0.2+Stack_Defense)

            print("Defense: " + str(defense))
    elif character_id == "1014821":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")

            hit_defense=0

            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            ki_Spheres_obtained = input("Enter number of Ki Spheres Obtained : ")
            dodge_activated= input("Enter whether attacking super class enemy(Yes- Type 1, No - Type 0) : ")
            if (int(dodge_activated)==1):
                dodge_activated=0.4
            else:
                dodge_activated=0
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+1.1  + float(support) +dodge_activated ) * float(defense_input)  *(1+float(Leader_Skill)) *  (1+dodge_activated) * (1+float(Support_from_Super)+int(Super_Attacks_Performed)*0.2+Stack_Defense)

            print("Defense: " + str(defense))
    elif character_id == "4014781":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")

            hit_defense=0

            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            ki_Spheres_obtained = input("Enter number of Ki Spheres Obtained : ")
            dodge_activated= input("Enter whether attacking extreme class enemy(Yes- Type 1, No - Type 0) : ")
            if (int(dodge_activated)==1):
                dodge_activated=0.2
            else:
                dodge_activated=0
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+1.3  + float(support) +dodge_activated ) * float(defense_input)  *(1+float(Leader_Skill)) *  (1+dodge_activated) * (1+float(Support_from_Super)+int(Super_Attacks_Performed)*0.2+Stack_Defense)

            print("Defense: " + str(defense))
    elif character_id == "4014771":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")

            hit_defense=0

            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            ki_Spheres_obtained = input("Enter number of Ki Spheres Obtained : ")
            dodge_activated= input("Enter whether attacking extreme class enemy(Yes- Type 1, No - Type 0) : ")
            if (int(dodge_activated)==1):
                dodge_activated=0.3
            else:
                dodge_activated=0
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+1.2  + float(support) +dodge_activated ) * float(defense_input)  *(1+float(Leader_Skill)) *  (1+dodge_activated) * (1+float(Support_from_Super)+int(Super_Attacks_Performed)*0.2+Stack_Defense)

            print("Defense: " + str(defense))
    elif character_id == "1014761":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")

            hit_defense=0

            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            ki_Spheres_obtained = input("Enter number of Ki Spheres Obtained : ")
            dodge_activated= input("Enter whether attacking extreme class enemy(Yes- Type 1, No - Type 0) : ")
            if (int(dodge_activated)==1):
                dodge_activated=0.4
            else:
                dodge_activated=0
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+1.1  + float(support) +dodge_activated ) * float(defense_input)  *(1+float(Leader_Skill)) *  (1+dodge_activated) * (1+float(Support_from_Super)+int(Super_Attacks_Performed)*0.2+Stack_Defense)

            print("Defense: " + str(defense))
    elif character_id == "1024091":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")

            hit_defense=0

            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            ki_Spheres_obtained = input("Enter number of Ki Spheres Obtained : ")
            dodge_activated= input("Enter whether there is a Goku's Family Category ally on the team(Yes- Type 1, No - Type 0) : ")
            if (int(dodge_activated)==1):
                dodge_activated=1.2
            else:
                dodge_activated=0
            dodge_activated1= input("Enter whether there is an ally whose name includes Goku (Kid) attacking in the same turn(Yes- Type 1, No - Type 0) : ")
            if (int(dodge_activated1)==1):
                dodge_activated1=0.2
            else:
                dodge_activated1=0
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+1.5+dodge_activated+dodge_activated1  + float(support) ) * float(defense_input)  *(1+float(Leader_Skill)) *  (1) * (1+float(Support_from_Super)+int(Super_Attacks_Performed)*0.3)

            print("Defense: " + str(defense))
    elif character_id == "1016301":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")

            hit_defense=0

            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            ki_Spheres_obtained = input("Enter number of Ki Spheres Obtained : ")
            dodge_activated= input("Enter whether there is a Hynrid Saiyans Category ally on the team(Yes- Type 1, No - Type 0) : ")
            if (int(dodge_activated)==1):
                dodge_activated=0.7
            else:
                dodge_activated=0
            
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+1.1+dodge_activated  + float(support) ) * float(defense_input)  *(1+float(Leader_Skill)) *  (1) * (1+float(Support_from_Super)+int(Super_Attacks_Performed)*0.3)

            print("Defense: " + str(defense))
    elif character_id == "1014191":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")

            hit_defense=0

            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            ki_Spheres_obtained = input("Enter number of Ki Spheres Obtained : ")
            dodge_activated= input("Enter whether Goku (Youth) is on the team(Yes- Type 1, No - Type 0) : ")
            if (int(dodge_activated)==1):
                dodge_activated=2
            else:
                dodge_activated=0
            dodge_activated1= input("Enter whether there is an ally whose name includes Goku (Youth) attacking in the same turn(Yes- Type 1, No - Type 0) : ")
            if (int(dodge_activated1)==1):
                dodge_activated1=1
            else:
                dodge_activated1=0
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+dodge_activated+dodge_activated1  + float(support) ) * float(defense_input)  *(1+float(Leader_Skill)) *  (1) * (1+float(Support_from_Super)+int(Super_Attacks_Performed)*0.5)

            print("Defense: " + str(defense))
    elif character_id == "1014181":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")

            hit_defense=0

            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            ki_Spheres_obtained = input("Enter number of Ki Spheres Obtained : ")
           
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+2.7  + float(support) ) * float(defense_input)  *(1+float(Leader_Skill)) *  (1) * (1+float(Support_from_Super)+int(Super_Attacks_Performed)*0.5)

            print("Defense: " + str(defense))
    elif character_id == "1021391":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")

            hit_defense=0

            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            ki_Spheres_obtained = input("Enter number of Ki Spheres Obtained : ")
            dodge_activated= input("Enter whether Great Ape Power Category ally attacking in the same turn (Yes- Type 1, No - Type 0) : ")
            if (int(dodge_activated)==1):
                dodge_activated=1.2
            else:
                dodge_activated=0
            dodge_activated1= input("Enter whether there is a Shadow Dragon Saga Category Enemy (Yes- Type 1, No - Type 0) : ")
            if (int(dodge_activated1)==1):
                dodge_activated1=0.5
            else:
                dodge_activated1=0
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+1.2  + float(support) +dodge_activated+dodge_activated1 ) * float(defense_input)  *(1+float(Leader_Skill)) *  (1+0.5) * (1+float(Support_from_Super)+int(Super_Attacks_Performed)*0.5)

            print("Defense: " + str(defense))
        else:
            print("Character information not found.")
    elif character_id == "1020181":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")

            hit_defense=0

            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            ki_Spheres_obtained = input("Enter number of Ki Spheres Obtained : ")
            dodge_activated= input("Enter number of turns elapsed with  character there is a character whose name includes Ribrianne or Rozie attacking in the same turn(1- Type 1, 2 - Type 2) : ")

            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+0.8 +0.22 + float(support) +int(dodge_activated) * 0.22) * float(defense_input)  *(1+float(Leader_Skill)) *  (1) * (1+float(Support_from_Super))

            print("Defense: " + str(defense))
        else:
            print("Character information not found.")
    elif character_id == "4014071":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")

            hit_defense=0

            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            ki_Spheres_obtained = input("Enter number of Ki Spheres Obtained : ")
            dodge_activated= input("Enter number of peppy gal allies on the team(1- Type 1, 2 - Type 2) : ")

            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+1.4 +0.3 + float(support) +int(dodge_activated) * 0.2) * float(defense_input)  *(1+float(Leader_Skill)) *  (1) * (1+float(Support_from_Super) + int (Super_Attacks_Performed)*0.3)

            print("Defense: " + str(defense))
        else:
            print("Character information not found.")
    elif character_id == "1022091":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")

            hit_defense=0

            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            ki_Spheres_obtained = input("Enter number of Ki Spheres Obtained : ")
            dodge_activated= input("Enter number of Androids Category allies on the turn (self excluded) (1- Type 1, 2 - Type 2) : ")
            dodge_activated=int(dodge_activated)*0.17
            dodge_activated1= input("Enter number of Target Goku Category allies on the turn (self excluded) (1- Type 1, 2 - Type 2) : ")
            dodge_activated1=int(dodge_activated1)*0.17
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+1.7 + float(support) +dodge_activated+dodge_activated1) * float(defense_input)  *(1+float(Leader_Skill)) *  (1) * (1+float(Support_from_Super) + int (Super_Attacks_Performed)*0)

            print("Defense: " + str(defense))
    elif character_id == "1027911":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")

            hit_defense=0

            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            ki_Spheres_obtained = input("Enter number of Ki Spheres Obtained : ")
            dodge_activated= input("Enter whether Hp is 50% or more when performing a super attack(Yes- Type 1, No - Type 0) : ")
            if (int(dodge_activated)==1):
                dodge_activated=0.8
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1 + float(support)) * float(defense_input)  *(1+float(Leader_Skill)) *  (1+2+dodge_activated) * (1+float(Support_from_Super) + int (Super_Attacks_Performed)*0.5)

            print("Defense: " + str(defense))
        else:
            print("Character information not found.")
    elif character_id == "1024351":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")

            hit_defense=0

            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            ki_Spheres_obtained = input("Enter number of Ki Spheres Obtained : ")
            ki_Spheres_obtained=int(ki_Spheres_obtained)*0.05
            
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1 + float(support)+ki_Spheres_obtained+0.58) * float(defense_input)  *(1+float(Leader_Skill)) *  (1+0.58+int(UltraOrUnitSuper)*0.58) * (1+float(Support_from_Super) + int (Super_Attacks_Performed)*0.3+int(UltraOrUnitSuper)*0.3)

            print("Defense: " + str(defense))
    elif character_id == "1015421":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")

            hit_defense=0

            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            ki_Spheres_obtained = input("Enter number of Ki Spheres Obtained : ")
            dodge_activated= input("Enter number of peppy gal allies on the team(1- Type 1, 2 - Type 2) : ")
            allies_on_turn = input("Enter  there is an ally whose name includes Rozie or Kakunsa attacking in the same turn(Yes- Type 1, No - Type 0) : ")

            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+ float(support) +int(dodge_activated) * 0.22 + int(allies_on_turn) * 0.22) * float(defense_input)  *(1+float(Leader_Skill)) *  (1) * (1 +float(Support_from_Super)+ int (Super_Attacks_Performed)*0.3)

            print("Defense: " + str(defense))
        else:
            print("Character information not found.")
    elif character_id == "1021901":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")

            hit_defense=0

            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            ki_Spheres_obtained = input("Enter number of Ki Spheres Obtained : ")
            dodge_activated= input("Enter number of revenge allies on the team(1- Type 1, 2 - Type 2) : ")
            

            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+ float(support) +int(dodge_activated) * 0.2 +0.3) * float(defense_input)  *(1+float(Leader_Skill)) *  (1) * (1 +float(Support_from_Super)+ int (Super_Attacks_Performed)*0)

            print("Defense: " + str(defense))
    elif character_id == "1025331":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")

            hit_defense=0

            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            ki_Spheres_obtained = input("Enter number of Ki Spheres Obtained : ")
            allies_on_turn = input("Enter whether all allies attacking in the same turn are Super Class Great Ape Power or Dragon Ball Heroes Category characters(Yes- Type 1, No- Type 0) : ")
            allies_on_turn= int(allies_on_turn)*0.8
            dodge_activated= input("Enter number of Super Attacks Performed by this character so far(1- Type 1, 0- Type 0) : ")
            if (float(dodge_activated)>=5):
                dodge_activated= 0.4
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+1.8+float(allies_on_turn)+ float(support)) * float(defense_input)  *(1+float(Leader_Skill)) *  (1+float(dodge_activated)+0.6) * (1 +float(Support_from_Super)+ int (Super_Attacks_Performed)*0.3)

            print("Defense: " + str(defense))
        else:
            print("Character information not found.")
    elif character_id == "1022221":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")

            hit_defense=0

            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            ki_Spheres_obtained = input("Enter number of Ki Spheres Obtained : ")
            allies_on_turn = input("Enter whether another Heavenly Events Category ally attacking in the same turn(Yes- Type 1, No- Type 0) : ")
            allies_on_turn= int(allies_on_turn)*0.58

            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+1.58+float(allies_on_turn)+ float(support)+0.58) * float(defense_input)  *(1+float(Leader_Skill)) *  (1) * (1 +float(Support_from_Super)+ int (Super_Attacks_Performed)*0.3+Stack_Defense)

            print("Defense: " + str(defense))
    elif character_id == "1025311":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")

            hit_defense=0

            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            ki_Spheres_obtained = input("Enter number of Ki Spheres Obtained : ")
            allies_on_turn = input("Enter whether there is an ally whose name includes Vegeta (Kid, Jr., etc. excluded) attacking in the same turn(Yes- Type 1, No- Type 0) : ")
            allies_on_turn= int(allies_on_turn)*0.4
            dodge_activated= input("Enter number of Attacks received by this character so far(1- Type 1, 0- Type 0) : ")
            if (float(dodge_activated)>=7):
                dodge_activated= 0.4
            else:
                dodge_activated= 0
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+1.8+float(allies_on_turn)+ float(support)) * float(defense_input)  *(1+float(Leader_Skill)) *  (1+float(dodge_activated)+0.6) * (1 +float(Support_from_Super)+ int (Super_Attacks_Performed)*0.3)

            print("Defense: " + str(defense))
        else:
            print("Character information not found.")
    elif character_id == "1013031":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")

            hit_defense=0

            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            ki_Spheres_obtained = input("Enter number of Ki Spheres Obtained : ")
            allies_on_turn = input("Enter whether there is  another Ginyu Force Category ally on the team(Yes- Type 1, No- Type 0) : ")
            allies_on_turn= int(allies_on_turn)*0.4
            dodge_activated= input("Enter number of Attacks performed by this character so far(1- Type 1, 0- Type 0) : ")
            if (float(dodge_activated)>=3):
                dodge_activated= 0.6
            else:
                dodge_activated= float(dodge_activated)*0.2
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+0.9+float(allies_on_turn)+ float(support)) * float(defense_input)  *(1+float(Leader_Skill)) *  (1+dodge_activated) * (1 +float(Support_from_Super)+ int (Super_Attacks_Performed)*0.5)

            print("Defense: " + str(defense))
    elif character_id == "1028961":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25, 999% - 9.99) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")
            hit_defense=0

            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            ki_Spheres_obtained = input("Enter number of Ki Spheres Obtained : ")
            allies_on_turn1 = input("Enter whether intro buff is still active(Yes- Type 1, No- Type 0) : ")
            allies_on_turn1= int(allies_on_turn1)*1
            allies_on_turn = input("Enter whether all allies participating in the attack are in the Artificial Lifeform, Super Boss or Movie Boss category(Yes- Type 1, No- Type 0) : ")
            allies_on_turn= int(allies_on_turn)*2.5
            dodge_activated= input("Enter number of Attacks received by this character so far(1- Type 1, 0- Type 0) : ")
            if (float(dodge_activated)>=5):
                dodge_activated= 1
            else:
                dodge_activated= float(dodge_activated)*0.2
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+3+float(allies_on_turn)+ float(support)+allies_on_turn1) * float(defense_input)  *(1+float(Leader_Skill)) *  (1+float(dodge_activated)) * (1 +float(Support_from_Super))

            print("Defense: " + str(defense))
        else:
            print("Character information not found.")
    elif character_id == "1029051":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25, 999% - 9.99) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")

            hit_defense=0

            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            ki_Spheres_obtained = input("Enter number of Ki Spheres Obtained : ")
            allies_on_turn1 = input("Enter whether this character's intro was activated(Yes- Type 1, No- Type 0) : ")
            dodge_activated= input("Enter number of turns since this character's start of turn(1- Type 1, 0- Type 0) : ")
            dodge_activated=int(dodge_activated)
            if (int(allies_on_turn1)==1 and dodge_activated<=4):
                allies_on_turn1=1.54
                
            elif (int(allies_on_turn1)==1 and (dodge_activated>=5 and dodge_activated<=7)):
                allies_on_turn1=0.77
                
            else:
                allies_on_turn1=0
                
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+2+ float(support)+allies_on_turn1) * float(defense_input)  *(1+float(Leader_Skill)) *  (1) * (1 +float(Support_from_Super)+int(Super_Attacks_Performed)*0.5+int(UltraOrUnitSuper)*0.3)

            print("Defense: " + str(defense))
    elif character_id == "1029021":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25, 999% - 9.99) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")

            hit_defense=0

            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            ki_Spheres_obtained = input("Enter number of Ki Spheres Obtained : ")
            allies_on_turn1 = input("Enter whether this character has received an attack so far during the turn(Yes- Type 1, No- Type 0) : ")
            allies_on_turn = input("Enter whether this defense calculation is before or after character has peformed a super attack(After Super- Type 1, Before Super- Type 0) : ")
            if (int(allies_on_turn)==1 and int(allies_on_turn1)==1):
                allies_on_turn=1.5
            elif (int(allies_on_turn)==1 and int(allies_on_turn1)==0):
                allies_on_turn=3
            elif(int(allies_on_turn)==0):
                allies_on_turn=0
            else:
                allies_on_turn=0
                
                
           
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+1.5+ float(support)) * float(defense_input)  *(1+float(Leader_Skill)) *  (1+allies_on_turn) * (1 +float(Support_from_Super)+int(Super_Attacks_Performed)*0.3)

            print("Defense: " + str(defense))
    elif character_id == "1019791":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25, 999% - 9.99) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")
            hit_defense=0

            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            
            dodge_activated= input("Enter number of Super Class Allies on the team(1- Type 1, 0- Type 0) : ")
        
            dodge_activated= int(dodge_activated)*0.03+0.3
           
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+ float(support)+dodge_activated+1) * float(defense_input)  *(1+float(Leader_Skill)) *  (1+1) * (1 +float(Support_from_Super)+int(Super_Attacks_Performed)*0.5+Stack_Defense)

            print("Defense: " + str(defense))
    elif character_id == "1019691":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25, 999% - 9.99) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")
            hit_defense=0

            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            
            dodge_activated= input("Enter number of Majin Buu Saga Category Allies on the team(1- Type 1, 0- Type 0) : ")
        
            dodge_activated= int(dodge_activated)*0.03+0.3
            dodge_activated1= input("Enter number of attacks received by this character(1- Type 1, 0- Type 0) : ")
        
            dodge_activated1= int(dodge_activated1)*0.2
            if (float(dodge_activated1)>=1):
                dodge_activated1=1
            dodge_activated2= input("Enter what slot character is in(1- Type 1, 0- Type 0) : ")
        

            if (float(dodge_activated2)==1):
                dodge_activated2=1.5
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+ float(support)+dodge_activated+dodge_activated2+1.5) * float(defense_input)  *(1+float(Leader_Skill)) *  (1+dodge_activated1) * (1 +float(Support_from_Super)+int(Super_Attacks_Performed))

            print("Defense: " + str(defense))
        else:
            print("Character information not found.")
    elif character_id == "1017441":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25, 999% - 9.99) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")
            hit_defense=0

            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            
            dodge_activated= input("Enter number of DB Saga Category Allies on the team(1- Type 1, 0- Type 0) : ")
        
            dodge_activated= int(dodge_activated)*0.4

            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+ float(support)+dodge_activated) * float(defense_input)  *(1+float(Leader_Skill)) *  (1) * (1 +float(Support_from_Super)+int(Super_Attacks_Performed)*0.5+Stack_Defense)

            print("Defense: " + str(defense))
        else:
            print("Character information not found.")
    elif character_id == "1026281":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")

            hit_defense=0

            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            ki_Spheres_obtained = input("Enter number of Ki Spheres Obtained : ")
            allies_on_turn = input("Enter whether there is an ally whose name includes Vegeta (Kid, Jr., etc. excluded) attacking in the same turn(Yes- Type 1, No- Type 0) : ")
            allies_on_turn= int(allies_on_turn)*0.4
            dodge_activated= input("Enter number of Attacks received by this character so far(1- Type 1, 0- Type 0) : ")
            if (float(dodge_activated)>=5):
                dodge_activated= 2
            else:
                dodge_activated=int(dodge_activated)*0.4
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
            if (int(No_of_Turns)==99):
                Stacks= input("Number of Stacks so far before current turn : ")
                Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            else:
                Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                if (int(Float_Character)==1):
                    if(int(No_of_Turns)==3):
                        Stacks=0
                        Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (int(Float_Character)==0):
                if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                    Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if( int(No_of_Turns)==9):
                Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
            if (int(UltraOrUnitSuper)==1):
                UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
            if (int(UltraOrUnitSuper)==1):
                UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
            if (int(UltraOrUnitSuper)==1):
                UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
            if (int(UltraOrUnitSuper)==1):
                UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+2+ float(support)) * float(defense_input)  *(1+float(Leader_Skill)) *  (1+float(dodge_activated)) * (1 +float(Support_from_Super))

            print("Defense: " + str(defense))
    elif character_id == "4026291":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")

            hit_defense=0

            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            ki_Spheres_obtained = input("Enter number of Ki Spheres Obtained : ")
            dodge_activated2 = input("Enter whether there is a Movie Bosses Category enemy(Yes- Type 1, No- Type 0) : ")
            dodge_activated2= int(dodge_activated2)*0.5
            dodge_activated= input("Enter number of turns from this character's start of turn(1- Type 1, 0- Type 0) : ")
            if (float(dodge_activated)>=4):
                dodge_activated= 0
            else:
                dodge_activated= 1

            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
            No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
            if (int(No_of_Turns)==99):
                Stacks= input("Number of Stacks so far before current turn : ")
                Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            else:
                Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
            if (int(Float_Character)==1):
                if(int(No_of_Turns)==3):
                    Stacks=0
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (int(Float_Character)==0):
                if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                    Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if( int(No_of_Turns)==9):
                Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
            if (int(UltraOrUnitSuper)==1):
                UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
            if (int(UltraOrUnitSuper)==1):
                UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
            if (int(UltraOrUnitSuper)==1):
                UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
            if (int(UltraOrUnitSuper)==1):
                UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+2+float(dodge_activated)+ float(support)+dodge_activated2) * float(defense_input)  *(1+float(Leader_Skill)) *  (1+1) * (1 +float(Support_from_Super)+ int (Super_Attacks_Performed)*0)

            print("Defense: " + str(defense))
    elif character_id == "1022751":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")

            hit_defense=0

            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            ki_Spheres_obtained = input("Enter number of Ki Spheres Obtained : ")
            dodge_activated= input("Enter number of turns from this character's start of turn(1- Type 1, 0- Type 0) : ")
            if (float(dodge_activated)>=7):
                dodge_activated= 0
            else:
                dodge_activated= 1

            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
            No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
            if (int(No_of_Turns)==99):
                Stacks= input("Number of Stacks so far before current turn : ")
                Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            else:
                Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
            if (int(Float_Character)==1):
                if(int(No_of_Turns)==3):
                    Stacks=0
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (int(Float_Character)==0):
                if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                    Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if( int(No_of_Turns)==9):
                Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
            if (int(UltraOrUnitSuper)==1):
                UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
            if (int(UltraOrUnitSuper)==1):
                UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
            if (int(UltraOrUnitSuper)==1):
                UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
            if (int(UltraOrUnitSuper)==1):
                UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+1+float(dodge_activated)+ float(support)) * float(defense_input)  *(1+float(Leader_Skill)) *  (1) * (1 +float(Support_from_Super)+ int (UltraOrUnitSuper)*0.3+Stack_Defense)

            print("Defense: " + str(defense))
    elif character_id == "1022961":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")

            hit_defense=0

            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            ki_Spheres_obtained = input("Enter number of Ki Spheres Obtained : ")
            dodge_activated2 = input("Enter number of attacks performed by this character(1- Type 1, 0- Type 0) : ")
            dodge_activated2= int(dodge_activated2)*0.1
            if (float(dodge_activated2)>=0.5):
                dodge_activated2=0.5
            dodge_activated= input("Enter number of turns from this character's start of turn(1- Type 1, 0- Type 0) : ")
            if (float(dodge_activated)>=6):
                dodge_activated= 0
            else:
                dodge_activated= 0.5

            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
            No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
            if (int(No_of_Turns)==99):
                Stacks= input("Number of Stacks so far before current turn : ")
                Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            else:
                Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
            if (int(Float_Character)==1):
                if(int(No_of_Turns)==3):
                    Stacks=0
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (int(Float_Character)==0):
                if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                    Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if( int(No_of_Turns)==9):
                Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
            if (int(UltraOrUnitSuper)==1):
                UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
            if (int(UltraOrUnitSuper)==1):
                UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
            if (int(UltraOrUnitSuper)==1):
                UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
            if (int(UltraOrUnitSuper)==1):
                UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+0.5+float(dodge_activated)+ float(support)) * float(defense_input)  *(1+float(Leader_Skill)) *  (1+dodge_activated2+1) * (1 +float(Support_from_Super)+ int (Super_Attacks_Performed)*0.3+Stack_Defense)

            print("Defense: " + str(defense))
    elif character_id == "1025361":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")

            hit_defense=0

            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            ki_Spheres_obtained = input("Enter number of Ki Spheres Obtained : ")
            dodge_activated= input("Enter whether there is another Dragon Ball Heroes Category ally attacking in the same turn(Yes- Type 1, No- Type 0) : ")
            if (int(dodge_activated)==1):
                dodge_activated = input("Enter number of Rainbow Ki Spheres Obtained : ")
                dodge_activated=int(dodge_activated)*0.1
            else:
                dodge_activated=0
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+1+dodge_activated+float(support)) * float(defense_input)  *(1+float(Leader_Skill)) *  (1+1) * (1 +float(Support_from_Super)+ int (Super_Attacks_Performed)*0.5)

            print("Defense: " + str(defense))

    elif character_id == "1026251":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")

            hit_defense=0

            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")

            dodge_activated = input("Enter number of Ki Spheres Obtained : ")
            if(int(dodge_activated)>=3):
                dodge_activated=0.5
            else:
                dodge_activated=0
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
            if (int(UltraOrUnitSuper)==1):
                UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
            if (int(UltraOrUnitSuper)==1):
                UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
            if (int(UltraOrUnitSuper)==1):
                UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
            if (int(UltraOrUnitSuper)==1):
                UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+1.5+dodge_activated+float(support)) * float(defense_input)  *(1+float(Leader_Skill)) *  (1+0.5) * (1 +float(Support_from_Super)+ int (Super_Attacks_Performed)*0.2)

            print("Defense: " + str(defense))
    elif character_id == "1024781":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")

            hit_defense=0

            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")

            dodge_activated = input("Enter number of Ki Spheres Obtained : ")
            if(int(dodge_activated)>=3 and int(dodge_activated)<=4):
                dodge_activated=1.2
            elif(int(dodge_activated)>=5 and int(dodge_activated)<=6):
                dodge_activated=2.4
            elif(int(dodge_activated)>=7):
                dodge_activated=2.5
            else:
                dodge_activated=0
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
            if (int(UltraOrUnitSuper)==1):
                UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
            if (int(UltraOrUnitSuper)==1):
                UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
            if (int(UltraOrUnitSuper)==1):
                UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
            if (int(UltraOrUnitSuper)==1):
                UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+1.2+dodge_activated+float(support)) * float(defense_input)  *(1+float(Leader_Skill)) *  (1) * (1 +float(Support_from_Super))

            print("Defense: " + str(defense))
    elif character_id == "1025131":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")

            hit_defense=0

            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")

            dodge_activated = input("Enter number of Ki Spheres Obtained : ")
            if(int(dodge_activated)>=3):
                dodge_activated2=0.59
            else:
                dodge_activated2=0
            dodge_activated1 = input("Enter number of Turns since start of turn for this character : ")
            if(int(dodge_activated1)>=8):
                dodge_activated1=0
            else:
                dodge_activated1=0.59
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
            if (int(UltraOrUnitSuper)==1):
                UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
            if (int(UltraOrUnitSuper)==1):
                UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
            if (int(UltraOrUnitSuper)==1):
                UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
            if (int(UltraOrUnitSuper)==1):
                UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+0.59+dodge_activated2+float(support)+int(dodge_activated)*0.14) * float(defense_input)  *(1+float(Leader_Skill)) *  (1+dodge_activated1) * (1 +float(Support_from_Super))

            print("Defense: " + str(defense))
    elif character_id == "1008081":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")

            hit_defense=0

            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            ki_Spheres_obtained = input("Enter number of Rainbow Ki Spheres Obtained : ")
            ki_Spheres_obtained=int(ki_Spheres_obtained)*0.9
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
            if (int(UltraOrUnitSuper)==1):
                UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            
            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+1.59+ki_Spheres_obtained+float(support)) * float(defense_input)  *(1+float(Leader_Skill)) *  (1) * (1 +float(Support_from_Super))

            print("Defense: " + str(defense))

    elif character_id == "1011851":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")

            hit_defense=0

            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            ki_Spheres_obtained = input("Enter number of Ki Spheres Obtained : ")
            ki_Spheres_obtained= int(ki_Spheres_obtained)*0.3
            if (int(ki_Spheres_obtained)>=3 and int(ki_Spheres_obtained)<=6):
                ki_Spheres_obtained1=0.3
            elif(int(ki_Spheres_obtained)>=7):
                ki_Spheres_obtained1=0.6
            else:
                ki_Spheres_obtained1=0
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+ki_Spheres_obtained1+ki_Spheres_obtained+float(support)) * float(defense_input)  *(1+float(Leader_Skill)) *  (1) * (1 +float(Support_from_Super)+ int (Super_Attacks_Performed)*0.5)

            print("Defense: " + str(defense))
        else:
            print("Character information not found.")
    elif character_id == "1027751":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")

            hit_defense=0

            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            ki_Spheres_obtained = input("Enter number of Ki Spheres Obtained : ")
            dodge_activated= input("Enter number of Crossover Category allies on the team(1- Type 1, 2- Type 2) : ")
            if (float(dodge_activated)>=3):
                dodge_activated= 1
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+1.8+dodge_activated+float(support)) * float(defense_input)  *(1+float(Leader_Skill)) *  (1+1.5) * (1 +float(Support_from_Super)+ int (Super_Attacks_Performed)*0.3)

            print("Defense: " + str(defense))
        else:
            print("Character information not found.")
    elif character_id == "1018321":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")

            hit_defense=0

            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            ki_Spheres_obtained = input("Enter number of Ki Spheres Obtained : ")
            dodge_activated= input("Enter number of Time Traveller Category allies on the team(1- Type 1, 2- Type 2) : ")
            if (float(dodge_activated)>=5):
                dodge_activated= 0.5
            else:
                dodge_activated= int(dodge_activated)*0.1
            dodge_activated1= input("Enter whether character has dodged this current turn(Yes- Type 1, No- Type 0) : ")
            if (float(dodge_activated1)==1):
                dodge_activated1= 0.5
            else:
                dodge_activated1= 0
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+dodge_activated+float(support)) * float(defense_input)  *(1+float(Leader_Skill)) *  (1+dodge_activated1+1.5) * (1 +float(Support_from_Super)+ int (Super_Attacks_Performed)*0.5)

            print("Defense: " + str(defense))
        else:
            print("Character information not found.")
    elif character_id == "1020891":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")

            hit_defense=0

            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            ki_Spheres_obtained = input("Enter number of Ki Spheres Obtained : ")
            dodge_activated= input("Enter number of Crossover Category allies on the team(1- Type 1, 2- Type 2) : ")
            if (float(dodge_activated)>=4):
                dodge_activated= 0.8
            else:
                dodge_activated= int(dodge_activated)*0.2
            dodge_activated1= input("Enter number of dodges this character has done(1- Type 1, 2- Type 2) : ")
            if (float(dodge_activated1)>=3):
                dodge_activated1= 0.3
            else:
                dodge_activated1= int(dodge_activated1)*0.1
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+1+dodge_activated+float(support)) * float(defense_input)  *(1+float(Leader_Skill)) *  (1+dodge_activated1) * (1 +float(Support_from_Super)+ int (Super_Attacks_Performed)*0.5)

            print("Defense: " + str(defense))
        else:
            print("Character information not found.")
    elif character_id == "1025341":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")

            hit_defense=0

            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            ki_Spheres_obtained = input("Enter number of Ki Spheres Obtained : ")
            dodge_activated1= input("Enter whether HP was 50% or more at the start of turn(Yes- Type 1, No- Type 0) : ")
            if (int(dodge_activated1)==1):
                dodge_activated1= 1
            else:
                dodge_activated1= 0
            dodge_activated= input("Enter number of Crossover Category allies on the team(1- Type 1, 2- Type 2) : ")
            if (float(dodge_activated)>=2):
                dodge_activated= 1
            else:
                dodge_activated= 0
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+2+dodge_activated+ dodge_activated1+float(support)) * float(defense_input)  *(1+float(Leader_Skill)) *  (1+float(dodge_activated)+0.6) * (1 +float(Support_from_Super)+ int (Super_Attacks_Performed)*0.3)

            print("Defense: " + str(defense))
        else:
            print("Character information not found.")
    elif character_id == "1019931":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")

            hit_defense=0

            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            ki_Spheres_obtained = input("Enter number of Ki Spheres Obtained : ")
            dodge_activated1= input("Enter whether HP was 50% or more at the start of turn(Yes- Type 1, No- Type 0) : ")
            if (int(dodge_activated1)==1):
                dodge_activated1= 1.5
            else:
                dodge_activated1= 0
            
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+1.5+dodge_activated1+float(support)) * float(defense_input)  *(1+float(Leader_Skill)) *  (1+1.5) * (1 +float(Support_from_Super)+ int (Super_Attacks_Performed)*0)

            print("Defense: " + str(defense))
        else:
            print("Character information not found.")
    elif character_id == "1017281":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")

            hit_defense=0

            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            ki_Spheres_obtained = input("Enter number of Ki Spheres Obtained : ")
            dodge_activated1= input("Enter whether character received an attack during this turn(Yes- Type 1, No- Type 0) : ")
            if (int(dodge_activated1)==1):
                dodge_activated1= -0.3
            else:
                dodge_activated1= 0
            dodge_activated= input("Enter number of Time Traveller Category allies on the team(1- Type 1, 2- Type 2) : ")

            dodge_activated= int(dodge_activated)*0.3
            dodge_activated2= input("Enter number of hits received by this character so far(1- Type 1, 2- Type 2) : ")
            if(int(dodge_activated2)>=3):
                dodge_activated2=0.3
            else:
                dodge_activated2=int(dodge_activated2)*0.1
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+1.3+dodge_activated+float(support)) * float(defense_input)  *(1+float(Leader_Skill)) *  (1+dodge_activated1+dodge_activated2) * (1 +float(Support_from_Super)+ int (Super_Attacks_Performed)*0.3)

            print("Defense: " + str(defense))
        else:
            print("Character information not found.")
    elif character_id == "1016781":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")

            hit_defense=0

            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            ki_Spheres_obtained = input("Enter number of Ki Spheres Obtained : ")
            dodge_activated1= input("Enter whether HP was 81% or more at the start of turn(Yes- Type 1, No- Type 0) : ")
            if (int(dodge_activated1)==1):
                dodge_activated1= 0.5
            else:
                dodge_activated1= 1
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+1.2+dodge_activated1+float(support)) * float(defense_input)  *(1+float(Leader_Skill)) *  (1) * (1 +float(Support_from_Super)+ int (Super_Attacks_Performed)*0.5)

            print("Defense: " + str(defense))
        else:
            print("Character information not found.")
    elif character_id == "1027781":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")

            hit_defense=0

            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            ki_Spheres_obtained = input("Enter number of Ki Spheres Obtained : ")
            allies_on_turn = input("Enter number of Dragon Ball Heroes Category ally (self excluded) attacking in the same turn(1- Type 1, 0- Type 0) : ")
            allies_on_turn= int(allies_on_turn) *0.5
            dodge_activated= input("Enter number of Super Attacks Performed by this character so far(1- Type 1, 0- Type 0) : ")
            dodge_activated= int(dodge_activated)*0.4
            if (float(dodge_activated)>=1.2):
                dodge_activated= 1.2
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+1.8+float(allies_on_turn)+ float(support)) * float(defense_input)  *(1+float(Leader_Skill)) *  (1+float(dodge_activated)) * (1 +float(Support_from_Super)+ int (Super_Attacks_Performed)*0.3)

            print("Defense: " + str(defense))
        else:
            print("Character information not found.")
    elif character_id == "1009261":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")

            hit_defense=0

            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            ki_Spheres_obtained = input("Enter number of Ki Spheres Obtained : ")
            allies_on_turn = input("Enter number of Fusion Category ally (self excluded) attacking in the same turn(1- Type 1, 0- Type 0) : ")
            allies_on_turn= int(allies_on_turn) *0.3
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+1.5+float(allies_on_turn)+ float(support)) * float(defense_input)  *(1+float(Leader_Skill)) *  (1) * (1 +float(Support_from_Super)+ int (Super_Attacks_Performed)*0.3)

            print("Defense: " + str(defense))
        else:
            print("Character information not found.")
    elif character_id == "1023391":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")

            hit_defense=0

            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            ki_Spheres_obtained = input("Enter number of Ki Spheres Obtained : ")
            dodge_activated= input("Enter number of Crossover Category ally (self excluded) attacking in the same turn (1- Type 1, 0- Type 0) : ")
            dodge_activated= int(dodge_activated)*0.15
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1.4+dodge_activated+ float(support)) * float(defense_input)  *(1+float(Leader_Skill)) *  (1+1.5) * (1 +float(Support_from_Super)+ int (Super_Attacks_Performed)*0.5+Stack_Defense)

            print("Defense: " + str(defense))
        else:
            print("Character information not found.")
    elif character_id == "1009251":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")

            hit_defense=0

            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            ki_Spheres_obtained = input("Enter number of Ki Spheres Obtained : ")
            dodge_activated= input("Enter number of Fusion Category Allies on The Team  (1- Type 1, 2- Type 2) : ")
            dodge_activated= int(dodge_activated)*0.1
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+1.8+dodge_activated+ float(support)) * float(defense_input)  *(1+float(Leader_Skill)) *  (1) * (1 +float(Support_from_Super))

            print("Defense: " + str(defense))
        else:
            print("Character information not found.")
    elif character_id == "1023331":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")

            hit_defense=0

            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            ki_Spheres_obtained = input("Enter number of Ki Spheres Obtained : ")
            dodge_activated= input("Enter number of Crossover Category Allies on The Team (Self Excluded) (1- Type 1, 0- Type 0) : ")
            dodge_activated= int(dodge_activated)*0.15
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+1.8+dodge_activated+ float(support)) * float(defense_input)  *(1+float(Leader_Skill)) *  (1) * (1 +float(Support_from_Super)+ int (Super_Attacks_Performed)*0.3)

            print("Defense: " + str(defense))
        else:
            print("Character information not found.")
    elif character_id == "1023241":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")

            hit_defense=0

            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            ki_Spheres_obtained = input("Enter number of Ki Spheres Obtained : ")
            dodge_activated= input("Enter number of Dragon Ball Heroes Category Allies on the team(1- Type 1, 0- Type 0) : ")
            dodge_activated= int(dodge_activated)*0.3
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+dodge_activated+ float(support)) * float(defense_input)  *(1+float(Leader_Skill)) *  (1+1) * (1 +float(Support_from_Super)+ int (Super_Attacks_Performed)*0.3)

            print("Defense: " + str(defense))
        else:
            print("Character information not found.")
    elif character_id == "1018331":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")

            hit_defense=0

            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            ki_Spheres_obtained = input("Enter number of Ki Spheres Obtained : ")
            dodge_activated= input("Enter number of Dragon Ball Heroes Category Allies on the team(1- Type 1, 0- Type 0) : ")
            dodge_activated= int(dodge_activated)*0.2
            if(dodge_activated>=1):
                dodge_activated=1
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+1.5+dodge_activated+ float(support)) * float(defense_input)  *(1+float(Leader_Skill)) *  (1+0.5) * (1 +float(Support_from_Super))

            print("Defense: " + str(defense))
        else:
            print("Character information not found.")
    elif character_id == "1015421":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")

            hit_defense=0

            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            ki_Spheres_obtained = input("Enter number of Ki Spheres Obtained : ")
            dodge_activated= input("Enter number of existing enemies(1- Type 1, 2 - Type 2) : ")

            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+ 1.78+ float(support) +int(dodge_activated) * 0.78) * float(defense_input)  *(1+float(Leader_Skill)) *  (1) *  (1+float(Support_from_Super) + int(Super_Attacks_Performed)*0.5+int(UltraOrUnitSuper) *1)

            print("Defense: " + str(defense))
        else:
            print("Character information not found.")
    elif character_id == "1014941":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")

            hit_defense=0

            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            ki_Spheres_obtained = input("Enter number of Ki Spheres Obtained : ")
            dodge_activated= input("Enter number of existing enemies(1- Type 1, 2 - Type 2) : ")
            if (int(dodge_activated)==1): 
                dodge_activated=int(dodge_activated)*0.6
            else:
                dodge_activated=0
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+ 1.2+ float(support) +int(dodge_activated) * 0.78) * float(defense_input)  *(1+float(Leader_Skill)) *  (1+0.6+int(UltraOrUnitSuper)*dodge_activated) *  (1+float(Support_from_Super)  )

            print("Defense: " + str(defense))
    elif character_id == "1027081":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")

            hit_defense=0

            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            ki_Spheres_obtained = input("Enter number of Ki Spheres Obtained : ")
            dodge_activated= input("Enter number of existing enemies(1- Type 1, 2 - Type 2) : ")
            if(int(dodge_activated)>=2):
                dodge_activated=0.6
            else:
                dodge_activated=0
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+ 1.2+ float(support)+dodge_activated ) * float(defense_input)  *(1+float(Leader_Skill)) *  (1+0.9) *  (1+float(Support_from_Super) + int(Super_Attacks_Performed)*0.3)

            print("Defense: " + str(defense))
        else:
            print("Character information not found.")
    elif character_id == "4019411":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")

            hit_defense=0

            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            ki_Spheres_obtained = input("Enter number of Ki Spheres Obtained : ")
            dodge_activated= input("Enter number of existing enemies(1- Type 1, 2 - Type 2) : ")
            if (int(dodge_activated)==1):
                one_enemy= 1
            else:
                one_enemy=0
            dodge_activated1 = input("Enter whether fighting super class enemy(Yes- Type 1, No - Type 0) : ")
            dodge_activated2 = input("Enter whether you are above 50% hp at start of turn (Yes- Type 1, No - Type 0) : ")

            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (int(dodge_activated2) * 1 +1+ 2+ float(support) +one_enemy * 1.8 + int(dodge_activated1) * 1.8) * float(defense_input)  *(1+float(Leader_Skill)) *  (1) *  (1+float(Support_from_Super) + int(Super_Attacks_Performed)*0.5+int(UltraOrUnitSuper) *1)

            print("Defense: " + str(defense))
        else:
            print("Character information not found.")
    elif character_id == "1020551":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")

            hit_defense=0

            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            ki_Spheres_obtained = input("Enter number of Ki Spheres Obtained : ")
            dodge_activated = input("Enter whether High chance of an additional DEF +10% for all allies(Yes- Type 1, No - Type 0) : ")
            dodge_activated=int(dodge_activated)*0.1
            dodge_activated1 = input("Enter whether you are above 50% hp at start of turn (Yes- Type 1, No - Type 0) : ")
            dodge_activated1= int(dodge_activated1)*0.6
            dodge_activated2 = input("Enter number of Dodges so far by character : ")
            if(int(dodge_activated2)>=3):
                dodge_activated2=1.2
            else:
                dodge_activated2=int(dodge_activated2)*0.4

            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (dodge_activated1  +2.2+ dodge_activated+ float(support)) * float(defense_input)  *(1+float(Leader_Skill)) *  (1+dodge_activated2) *  (1+float(Support_from_Super))

            print("Defense: " + str(defense))
        else:
            print("Character information not found.")
    elif character_id == "1020551":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")

            hit_defense=0

            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            ki_Spheres_obtained = input("Enter number of Ki Spheres Obtained : ")
            dodge_activated = input("Enter whether buff of DEF -100%, performs a critical hit and stuns self and the attacked enemy when performing a Super Attack is active or not(Yes- Type 1, No - Type 0) : ")
            dodge_activated=int(dodge_activated)*-1

            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+1.5+ float(support)) * float(defense_input)  *(1+float(Leader_Skill)) *  (1+dodge_activated) *  (1+float(Support_from_Super))

            print("Defense: " + str(defense))
    elif character_id == "1028981":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")

            hit_defense=0

            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            ki_Spheres_obtained = input("Enter number of Ki Spheres Obtained : ")
            dodge_activated= input("Enter number of attacks evaded(1- Type 1, 2 - Type 2) : ")
            if (int(dodge_activated)>=3):
                dodge_activated=1.5
            else:
                dodge_activated=0
            dodge_activated1=input("Enter number of Future Saga Category Allies on the Team(1- Type 1, 2 - Type 2) : ")
            if (int(dodge_activated1)>=5):
                dodge_activated1=3
            else:
                dodge_activated1=int(dodge_activated1)*0.6
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+ float(dodge_activated1)+ float(support)) * float(defense_input)  *(1+float(Leader_Skill)) *  (1  + float(dodge_activated) ) *  (1+float(Support_from_Super)+int(Super_Attacks_Performed)*0.5)

            print("Defense: " + str(defense))
        else:
            print("Character information not found.")
    elif character_id == "1025111":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")

            hit_defense=0

            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            ki_Spheres_obtained = input("Enter number of Ki Spheres Obtained : ")
            dodge_activated= input("Enter number of attacks evaded(1- Type 1, 2 - Type 2) : ")
            if (int(dodge_activated)>=3):
                dodge_activated=0.5
            else:
                dodge_activated=0
            dodge_activated1=input("Enter number of Turns from character's first attacking turn(1- Type 1, 2 - Type 2) : ")
            if (int(dodge_activated1)>=5):
                dodge_activated1=0
            else:
                dodge_activated1=0.3
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+ 1.5+float(dodge_activated1)+ float(support)) * float(defense_input)  *(1+float(Leader_Skill)) *  (1  + float(dodge_activated) ) *  (1+float(Support_from_Super)+int(Super_Attacks_Performed)*0.3)

            print("Defense: " + str(defense))
    elif character_id == "1028471":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")

            hit_defense=0

            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            ki_Spheres_obtained = input("Enter number of Ki Spheres Obtained : ")
            dodge_activated= input("Enter number of attacks evaded(1- Type 1, 2 - Type 2) : ")
            if (int(dodge_activated)>=3):
                dodge_activated=0.9
            else:
                dodge_activated=int(dodge_activated)*0.3
            dodge_activated1=input("Enter Whether Character has received an attack yet for this turn(Yes- Type 1, No - Type 0) : ")
            dodge_activated1=int(dodge_activated1)*1.8
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+1.8+ float(dodge_activated1)+ float(support)) * float(defense_input)  *(1+float(Leader_Skill)) *  (1  + float(dodge_activated) ) *  (1+float(Support_from_Super)+int(Super_Attacks_Performed)*0.5)

            print("Defense: " + str(defense))
        else:
            print("Character information not found.")
    elif character_id == "1020821":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")

            hit_defense=0

            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            ki_Spheres_obtained = input("Enter number of Ki Spheres Obtained : ")

            dodge_activated1=input("Enter number of Extreme Class Allies on the Team(1- Type 1, 2 - Type 2) : ")

            dodge_activated1=int(dodge_activated1)*0.1
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1.8+ float(dodge_activated1)+ float(support)) * float(defense_input)  *(1+float(Leader_Skill)) *  (1  + 0.7 ) *  (1+float(Support_from_Super)+int(Super_Attacks_Performed)*0.5)

            print("Defense: " + str(defense))
        else:
            print("Character information not found.")
    elif character_id == "1007971":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")

            hit_defense=0

            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            ki_Spheres_obtained = input("Enter number of Ki Spheres Obtained : ")

            dodge_activated1=input("Enter number of Extreme Class Allies on the Team(1- Type 1, 2 - Type 2) : ")

            dodge_activated1=int(dodge_activated1)*0.4
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1.3+ float(dodge_activated1)+ float(support)) * float(defense_input)  *(1+float(Leader_Skill)) *  (1  + 1 ) *  (1+float(Support_from_Super))

            print("Defense: " + str(defense))
        else:
            print("Character information not found.")
    elif character_id == "1019841":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")

            hit_defense=0

            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            ki_Spheres_obtained = input("Enter number of Ki Spheres Obtained : ")
            dodge_activated= input("Enter whether one attack has been evaded yet during the turn(Yes- Type 1, No - Type 0) : ")
            if (int(dodge_activated)==1):
                dodge_activated=0.6
            else:
                dodge_activated=0

            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+ 1.6+0.8+ float(support)) * float(defense_input)  *(1+float(Leader_Skill)) *  (1  + float(dodge_activated) ) *  (1+float(Support_from_Super)+int(Super_Attacks_Performed)*1)

            print("Defense: " + str(defense))
        else:
            print("Character information not found.")
    elif character_id == "1011211":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")

            hit_defense=0

            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            ki_Spheres_obtained = input("Enter number of Ki Spheres Obtained : ")
            dodge_activated= input("Enter number of attacks evaded(1- Type 1, 2 - Type 2) : ")
            if (int(dodge_activated)>5):
                dodge_activated=5

            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+ 1+ float(support)) * float(defense_input)  *(1+float(Leader_Skill)) *  (1 + 1 + int(dodge_activated) * 0.3) *  (1+float(Support_from_Super))

            print("Defense: " + str(defense))
        else:
            print("Character information not found.")
    elif character_id == "1015181":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")

            hit_defense=0

            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            ki_Spheres_obtained = input("Enter number of Ki Spheres Obtained : ")
            dodge_activated= input("Enter whether facing peppy gal character(Yes- Type 1, No - Type 0) : ")

            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+ float(support) + int(dodge_activated) * 1.5) * float(defense_input)  *(1+float(Leader_Skill)) *  (1 + 1.5 + int(UltraOrUnitSuper) * 1) *  (int(UltraOrUnitSuper) * 0.3 + float(Support_from_Super) + int(Super_Attacks_Performed) * 0.3)

            print("Defense: " + str(defense))
        else:
            print("Character information not found.")
    elif character_id == "1018841":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")

            hit_defense=0

            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            ki_Spheres_obtained = input("Enter number of Ki Spheres Obtained : ")
            dodge_activated= input("Enter whether facing extreme class enemy(Yes- Type 1, No - Type 0) : ")

            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+ 1.58 +0.3+ float(support) + int(dodge_activated) * 0.58) * float(defense_input)  *(1+float(Leader_Skill)) *  (1 + 0.58) *  ( 1 + float(Support_from_Super) + int(Super_Attacks_Performed) * 0.3)

            print("Defense: " + str(defense))
        else:
            print("Character information not found.")
    elif character_id == "1012461":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")

            hit_defense=0

            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            ki_Spheres_obtained = input("Enter number of Rainbow Ki Spheres Obtained : ")
            if(int(ki_Spheres_obtained>=3)):
                ki_Spheres_obtained=0.8
            else:
                ki_Spheres_obtained=0
            dodge_activated= input("Enter whether facing Movie Bosses enemy(Yes- Type 1, No - Type 0) : ")
            dodge_activated=int(dodge_activated)*0.8
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+ 2+dodge_activated+ float(support)) * float(defense_input)  *(1+float(Leader_Skill)) *  (1 +ki_Spheres_obtained ) *  ( 1 + float(Support_from_Super) + int(Super_Attacks_Performed) * 0.3)

            print("Defense: " + str(defense))
        else:
            print("Character information not found.")
    elif character_id == "1016761":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")

            hit_defense=0

            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            ki_Spheres_obtained = input("Enter number of Ki Spheres Obtained : ")
            dodge_activated= input("Enter what enemy character is facing(Extreme- Type 1, Super - Type 0, Both - Type 2) : ")
            if(int(dodge_activated)==1):
                dodge_activated=0.8
            elif(int(dodge_activated)==0):
                dodge_activated=1
            else:
                dodge_activated=1.8
            dodge_activated1= input("Enter Whether HP was 30% or less at the start of turn(Yes- Type 1, No - Type 0) : ")
            dodge_activated1=int(dodge_activated1)*0.6
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+ 1 +0.4+ float(support) + dodge_activated+dodge_activated1) * float(defense_input)  *(1+float(Leader_Skill)) *  (1) *  ( 1 + float(Support_from_Super))

            print("Defense: " + str(defense))
        else:
            print("Character information not found.")
    elif character_id == "1024691":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")

            hit_defense=0

            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            ki_Spheres_obtained = input("Enter number of Ki Spheres Obtained : ")
            dodge_activated= input("Enter which slot character is placed in(1- Type 1, 2 - Type 2) : ")
            if (int(dodge_activated)==3):
                dodge_activated=0
            else:
                dodge_activated=1

            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+ 1.5 +0.3+ float(support) + int(dodge_activated) * 1.5) * float(defense_input)  *(1+float(Leader_Skill)) *  (1 ) *  ( 1 + float(Support_from_Super) + int(Super_Attacks_Performed) * 0.5)

            print("Defense: " + str(defense))
        else:
            print("Character information not found.")
    elif character_id == "1017571":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")

            hit_defense=0

            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            ki_Spheres_obtained = input("Enter number of Ki Spheres Obtained : ")
            dodge_activated= input("Enter number of Artifical Lifeform Category Allies(1- Type 1, 2 - Type 2) : ")

            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+ 1.5 +0.3+ float(support) + int(dodge_activated) * 0.3) * float(defense_input)  *(1+float(Leader_Skill)) *  (1 ) *  ( 1 + float(Support_from_Super) + int(Super_Attacks_Performed) * 0.3)

            print("Defense: " + str(defense))
        else:
            print("Character information not found.")
    elif character_id == "1029001":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")

            hit_defense=0

            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            ki_Spheres_obtained = input("Enter number of Ki Spheres Obtained : ")
            dodge_activated= input("Enter whether Team is Full Super class(Yes- Type 1, No - Type 0) : ")
            if (int(dodge_activated==1)):
                dodge_activated=1.8
            dodge_activated1=input("Enter whether there is an ally whose name includes goku attacking in the same turn(Yes- Type 1, No - Type 0) : ")
            dodge_activated2=input("Enter whether its the 5th turn and onwards from the start of battle(Yes- Type 1, No - Type 0) : ")
            if(int(dodge_activated1==1) or int(dodge_activated2==1)):
                dodge_activated3=0.2
            else:
                dodge_activated3=0
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+ float(dodge_activated) +0.2+float(dodge_activated3)+ float(support)) * float(defense_input)  *(1+float(Leader_Skill)) *  (1 + 1.5) *  ( 1 + float(Support_from_Super) + int(Super_Attacks_Performed) * 0.5)

            print("Defense: " + str(defense))
        else:
            print("Character information not found.")
    elif character_id == "1017431":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")

            hit_defense=0

            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            ki_Spheres_obtained = input("Enter number of Ki Spheres Obtained : ")
            dodge_activated= input("Enter whether Team is Full Super class(Yes- Type 1, No - Type 0) : ")
            if (int(dodge_activated==1)):
                dodge_activated=0.4
            else:
                dodge_activated=0.3
            dodge_activated1=input("Enter whether the buff of additional ATK & DEF +80% for 5 turns after evading an enemy’s attack is active(Yes- Type 1, No - Type 0) : ")
            if(int(dodge_activated1==1)):
                dodge_activated1=0.8
            else:
                dodge_activated1=0
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+ float(dodge_activated) +1.4+ float(support)) * float(defense_input)  *(1+float(Leader_Skill)) *  (1 + float(dodge_activated1)) *  ( 1 + float(Support_from_Super) + int(Super_Attacks_Performed) * 0.2+Stack_Defense)

            print("Defense: " + str(defense))
        else:
            print("Character information not found.")
    elif character_id == "1021691":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")

            hit_defense=0

            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            ki_Spheres_obtained = input("Enter number of Ki Spheres Obtained : ")
            
            dodge_activated1=input("Enter whether the buff of Great chance of ATK & DEF +100% is active(Yes- Type 1, No - Type 0) : ")
            if(int(dodge_activated1==1)):
                dodge_activated1=1
            else:
                dodge_activated1=0
            dodge_activated=input("Enter whether second buff of Great chance of ATK & DEF +100% is active(Yes- Type 1, No - Type 0) : ")
            if(int(dodge_activated==1)):
                dodge_activated=1
            else:
                dodge_activated=0
            ki_Spheres_obtained1 = input("Enter number of attacks received or evaded by this character (1- Type 1, 2 - Type 2) : ")
            ki_Spheres_obtained1=int(ki_Spheres_obtained1)*0.2  
            if(ki_Spheres_obtained1>=1):
                ki_Spheres_obtained1=1
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+ 1+ float(dodge_activated) + float(support)+dodge_activated1) * float(defense_input)  *(1+float(Leader_Skill)) *  (1 + ki_Spheres_obtained1+1.5) *  ( 1 + float(Support_from_Super) + int(Super_Attacks_Performed) * 0.5 + int(UltraOrUnitSuper)*0.8)

            print("Defense: " + str(defense))
    elif character_id == "1024971":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")

            hit_defense=0

            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            ki_Spheres_obtained = input("Enter number of Ki Spheres Obtained : ")
            dodge_activated= input("Enter whether Facing 2 or more enemies(Yes- Type 1, No - Type 0) : ")
            if (int(dodge_activated==1)):
                dodge_activated=0.5
            else:
                dodge_activated=0
            dodge_activated1=input("Enter whether the buff of an additional ATK & DEF +50% and performs a critical hit within character's next attacking turn every time the character attacks 3 times in battle is active(Yes- Type 1, No - Type 0) : ")
            if(int(dodge_activated1==1)):
                dodge_activated1=0.5
            else:
                dodge_activated1=0
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+ float(dodge_activated) +1.2+ float(support)) * float(defense_input)  *(1+float(Leader_Skill)) *  (1 + float(dodge_activated1)+1) *  ( 1 + float(Support_from_Super) + int(Super_Attacks_Performed) * 0.3)

            print("Defense: " + str(defense))
        else:
            print("Character information not found.")
    elif character_id == "1009701":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")

            hit_defense=0

            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            ki_Spheres_obtained = input("Enter number of Ki Spheres Obtained : ")
            dodge_activated= input("Enter whether  2 or more Vegeta's Family Category allies on the team(Yes- Type 1, No - Type 0) : ")
            if (int(dodge_activated==1)):
                dodge_activated=0.7
            else:
                dodge_activated=0

            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+ float(dodge_activated) +0.3+ float(support)) * float(defense_input)  *(1+float(Leader_Skill)) *  (1 ) *  ( 1 + float(Support_from_Super) + int(Super_Attacks_Performed) * 0)

            print("Defense: " + str(defense))
    elif character_id == "1009711":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")

            hit_defense=0

            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            ki_Spheres_obtained = input("Enter number of Ki Spheres Obtained : ")
            dodge_activated= input("Enter whether  2 or more Vegeta's Family Category allies on the team(Yes- Type 1, No - Type 0) : ")
            if (int(dodge_activated==1)):
                dodge_activated=0.3
            else:
                dodge_activated=0

            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+ float(dodge_activated) +0.9+ float(support)) * float(defense_input)  *(1+float(Leader_Skill)) *  (1 ) *  ( 1 + float(Support_from_Super) + int(Super_Attacks_Performed) * 0)

            print("Defense: " + str(defense))
    elif character_id == "1011301":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")

            hit_defense=0

            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            ki_Spheres_obtained1 = input("Enter how much of this buff is up(Type either 0.25 or 0.5) : ")

            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+ 1.5+ float(support)) * float(defense_input)  *(1+float(Leader_Skill)) *  (1+ki_Spheres_obtained1) *  ( 1 + float(Support_from_Super) + int(Super_Attacks_Performed) * 0.5)

            print("Defense: " + str(defense))

    elif character_id == "1016031":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")

            hit_defense=0

            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            ki_Spheres_obtained = input("Enter number of Ki Spheres Obtained : ")
            ki_Spheres_obtained=int(ki_Spheres_obtained)*0.07
            ki_Spheres_obtained1 = input("Enter number of Rainbow Ki Spheres Obtained : ")
            if(int(ki_Spheres_obtained1)>=2):
                ki_Spheres_obtained1=0.77
          
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+ 1.5+ki_Spheres_obtained +ki_Spheres_obtained1+ float(support)) * float(defense_input)  *(1+float(Leader_Skill)) *  (1) *  ( 1 + float(Support_from_Super) + int(Super_Attacks_Performed) * 0.3)

            print("Defense: " + str(defense))
        else:
            print("Character information not found.")
    elif character_id == "1023591":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")

            hit_defense=0

            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            ki_Spheres_obtained1 = input("Enter number of Ki Spheres Obtained : ")
            if(int(ki_Spheres_obtained1)==2 ):
                ki_Spheres_obtained1=0.5
            elif(int(ki_Spheres_obtained1)==3):
                ki_Spheres_obtained1=1
            elif(int(ki_Spheres_obtained1)>=4 and int(ki_Spheres_obtained1)<=6):
                ki_Spheres_obtained1=1.5
            elif(int(ki_Spheres_obtained1)>=7):
                ki_Spheres_obtained1=2.2
            else:
                ki_Spheres_obtained1=0
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+ 1+ float(support)) * float(defense_input)  *(1+float(Leader_Skill)) *  (1+ki_Spheres_obtained1) *  ( 1 + float(Support_from_Super) + int(Super_Attacks_Performed) * 0.3)

            print("Defense: " + str(defense))
    elif character_id == "1018661":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")

            hit_defense=0

            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            ki_Spheres_obtained = input("Enter number of rainbow Ki Spheres Obtained : ")

            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+ 1.2 + float(support) + int (ki_Spheres_obtained) * 0.5) * float(defense_input)  *(1+float(Leader_Skill)) *  (1 ) *  ( 1+ float(Support_from_Super) + int(Super_Attacks_Performed) * 0.5)

            print("Defense: " + str(defense))
        else:
            print("Character information not found.")
    elif character_id == "1017591":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")

            hit_defense=0

            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            dodge_activated= input("Enter whether Super Saiyan Gohan (Youth) or Super Saiyan 2 Gohan (Youth) is attacking in the same turn (Yes- Type 1, No - Type 0) : ")

            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+ 1.6 + float(support) + int (dodge_activated) * 2.18) * float(defense_input)  *(1+float(Leader_Skill)) *  (1.8) *  (1+ float(Support_from_Super) + int(Super_Attacks_Performed) * 0.5)

            print("Defense: " + str(defense))
        else:
            print("Character information not found.")
    elif character_id == "1021431":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")

            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            
            dodge_activated2= input("Enter number of attacks performed so far by this character(1- Type 1, 0 - Type 0) : ")
            if (int(dodge_activated2)>=7):
                dodge_activated2=0.77
            else:
                dodge_activated2=int(dodge_activated2)*0.11
            dodge_activated= input("Enter number of Super Attacks attacks performed so far by this character(1- Type 1, 0 - Type 0) : ")
            if (int(dodge_activated)>=5):
                dodge_activated=1
            else:
                dodge_activated=int(dodge_activated)*0.2            
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+ 1.77+ float(support) ) * float(defense_input)  *(1+float(Leader_Skill)) *  (1+1+dodge_activated2+dodge_activated) *  (1+ float(Support_from_Super)+int(UltraOrUnitSuper)*0.5 )

            print("Defense: " + str(defense))
    elif character_id == "1024011":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")

            hit_defense=0

            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            dodge_activated= input("Enter whether another Youth Category ally is attacking in the same turn (Yes- Type 1, No - Type 0) : ")
            dodge_activated1= input("Enter whether another Gifted Warriors Category ally is attacking in the same turn (Yes- Type 1, No - Type 0) : ")
            dodge_activated=int(dodge_activated)*0.5
            dodge_activated1=int(dodge_activated1)*0.5
            dodge_activated2= input("Enter number of attacks performed so far (1- Type 1, 0 - Type 0) : ")
            if (int(dodge_activated2)>=5):
                dodge_activated2=1
            else:
                dodge_activated2=int(dodge_activated2)*0.2
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+ dodge_activated+dodge_activated1+ float(support) ) * float(defense_input)  *(1+float(Leader_Skill)) *  (1+1+dodge_activated2) *  (1+ float(Support_from_Super) )

            print("Defense: " + str(defense))
    elif character_id == "1010751":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")

            hit_defense=0

            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+ 2 + float(support)) * float(defense_input)  *(1+float(Leader_Skill)) *  (2) *  (1+ float(Support_from_Super))

            print("Defense: " + str(defense))
        else:
            print("Character information not found.")
    elif character_id == "1014051":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")

            hit_defense=0

            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            dodge_activated= input("Enter whether final blow has been delivered (Yes- Type 1, No - Type 0) : ")
            dodge_activated1= input("Enter number of enemies (1- Type 1, 2 - Type 2) : ")
            if (int(dodge_activated1)>=2):
                dodge_activated1=1
            else:
                dodge_activated1=0

            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+ 0.4 + float(support) + int (dodge_activated1) * 0.4) * float(defense_input)  *(1+float(Leader_Skill)) *  (1 + int(dodge_activated) * 0.4) *  (1 + float(Support_from_Super) + int(Super_Attacks_Performed) * 0.3)

            print("Defense: " + str(defense))
        else:
            print("Character information not found.")
    elif character_id == "1019071":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")

            hit_defense=0

            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            dodge_activated= input("Enter number of final blows delivered (1- Type 1, 0 - Type 0) : ")
            dodge_activated=int(dodge_activated)*0.2
            if(dodge_activated>=0.59):
                dodge_activated=0.59
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+ 0.59 + float(support)) * float(defense_input)  *(1+float(Leader_Skill)) *  (1 + dodge_activated) *  (1 + float(Support_from_Super) + int(UltraOrUnitSuper) * 0.3)

            print("Defense: " + str(defense))
    elif character_id == "1017591":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")

            hit_defense=0

            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            dodge_activated= input("Enter whether finishing blow has been dealt (Yes- Type 1, No - Type 0) : ")

            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+ 2 + float(support)) * float(defense_input)  *(1+float(Leader_Skill)) *  (1 + int(dodge_activated) * 0.5) *  (1+float(Support_from_Super) + int(Super_Attacks_Performed) * 0.5)

            print("Defense: " + str(defense))
        else:
            print("Character information not found.")
    elif character_id == "1018591":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")

            hit_defense=0

            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            dodge_activated= input("Enter whether attacked enemy  is debuffed (Yes- Type 1, No - Type 0) : ")

            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+ 1.88 + float(support)+ 0.4 +int(dodge_activated)*0.66) * float(defense_input)  *(1+float(Leader_Skill)) *  (1 + 0.88) *  (1+ int(UltraOrUnitSuper) * 0.5+ float(Support_from_Super) + int(Super_Attacks_Performed) * 0.5)

            print("Defense: " + str(defense))
        else:
            print("Character information not found.")
    elif character_id == "1014141":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")

            hit_defense=0

            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            dodge_activated= input("Enter number of peppy gal allies (1- Type 1, 2 - Type 2) : ")

            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1 + float(support) + int(dodge_activated) * 0.2 ) * float(defense_input)  *(1+float(Leader_Skill)) *  (1 + 0.8) *  (1+float(Support_from_Super))

            print("Defense: " + str(defense))
        else:
            print("Character information not found.")
    elif character_id == "1019721":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")

            hit_defense=0

            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            dodge_activated= input("Enter number of peppy gal allies (1- Type 1, 2 - Type 2) : ")
            dodge_activated1= input("Enter number of Pure Saiyan allies (1- Type 1, 2 - Type 2) : ")
            dodge_activated2= input("Enter whether there is an ally whose name includes Cauliflia attacking in the same turn (Yes- Type 1, No - Type 0) : ")
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1 +1.6+ float(support)+ int(dodge_activated2) * 1.6 + int(dodge_activated) * 0.16+ int(dodge_activated1) * 0.16 ) * float(defense_input)  *(1+float(Leader_Skill)) *  (1) *  (1+float(Support_from_Super)+int(Super_Attacks_Performed)*0.2 + Stack_Defense)

            print("Defense: " + str(defense))
        else:
            print("Character information not found.")
    elif character_id == "1005661":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")

            hit_defense=0

            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
        
            dodge_activated2= input("Enter whether there is an ally whose name includes Trunks (Kid) attacking in the same turn or when Krillin or android 18 is on the team (Yes- Type 1, No - Type 0) : ")
            dodge_activated2=int(dodge_activated2)*0.18
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1 +1+ float(support)+ dodge_activated2 ) * float(defense_input)  *(1+float(Leader_Skill)) *  (1) *  (1+float(Support_from_Super)+int(Super_Attacks_Performed)*0.5+Stack_Defense)

            print("Defense: " + str(defense))
    elif character_id == "1005671":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")

            hit_defense=0

            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
        
            dodge_activated2= input("Enter whether there is an ally whose name includes Goten (Kid) attacking in the same turn or when Krillin or android 18 is on the team (Yes- Type 1, No - Type 0) : ")
            dodge_activated2=int(dodge_activated2)*0.18
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1 +1+ float(support)+ dodge_activated2 ) * float(defense_input)  *(1+float(Leader_Skill)) *  (1) *  (1+float(Support_from_Super)+int(Super_Attacks_Performed)*0.5+Stack_Defense)

            print("Defense: " + str(defense))
    elif character_id == "1008071":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")

            hit_defense=0

            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
        
            dodge_activated2= input("Enter whether there is an ally whose name includes Trunks (Kid) or Goten (Kid) or Krillin on the team (Yes- Type 1, No - Type 0) : ")
            dodge_activated2=int(dodge_activated2)*0.3
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1 +1+ float(support)+ dodge_activated2 ) * float(defense_input)  *(1+float(Leader_Skill)) *  (1) *  (1+float(Support_from_Super)+int(Super_Attacks_Performed)*0.5+Stack_Defense)

            print("Defense: " + str(defense))
    elif character_id == "1021871":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")

            hit_defense=0

            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
        
            dodge_activated2= input("Enter whether there is an ally whose name includes Trunks (Kid) or Goten (Kid) attacking in the same turn (Yes- Type 1, No - Type 0) : ")
            dodge_activated2=int(dodge_activated2)*0.3
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1 +1.5+ float(support)+ dodge_activated2 ) * float(defense_input)  *(1+float(Leader_Skill)) *  (1) *  (1+float(Support_from_Super)+int(Super_Attacks_Performed)*0.3)

            print("Defense: " + str(defense))
    elif character_id == "1019711":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")

            hit_defense=0

            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            dodge_activated= input("Enter number of peppy gal allies (1- Type 1, 2 - Type 2) : ")
            dodge_activated1= input("Enter number of Universe 6 allies (1- Type 1, 2 - Type 2) : ")
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1 +1.6+ float(support) + int(dodge_activated) * 0.08+ int(dodge_activated1) * 0.08 ) * float(defense_input)  *(1+float(Leader_Skill)) *  (1) *  (1+float(Support_from_Super)+int(Super_Attacks_Performed)*0.3 + Stack_Defense)

            print("Defense: " + str(defense))
        else:
            print("Character information not found.")
    elif character_id == "1028851":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")

            hit_defense=0

            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            dodge_activated= input("Enter number of Majin Power allies (1- Type 1, 2 - Type 2) : ")

            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1 + float(support) + int(dodge_activated) * 0.4) * float(defense_input)  *(1+float(Leader_Skill)) *  (1 + 0.6) *  (1+float(Support_from_Super))

            print("Defense: " + str(defense))
        else:
            print("Character information not found.")
    elif character_id == "1015101":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")

            hit_defense=0

            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            dodge_activated= input("Enter number of Majin Buu Saga Category allies attacking in the same turn (1- Type 1, 2 - Type 2) : ")
            if (int(dodge_activated)==1):
                dodge_activated=0.5
            else:
                dodge_activated=int(dodge_activated)*0.5

            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1 + float(support) + int(dodge_activated) ) * float(defense_input)  *(1+float(Leader_Skill)) *  (1 + 1.5) *  (1+  float(Support_from_Super) + int(Super_Attacks_Performed)*0.5)

            print("Defense: " + str(defense))
        else:
            print("Character information not found.")
    elif character_id == "1018951":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")

            hit_defense=0

            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            dodge_activated= input("Enter number of Pure Saiyans Category allies attacking in the same turn (self excluded) (1- Type 1, 2 - Type 2) : ")

            dodge_activated=int(dodge_activated)*0.2

            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1 + float(support) + dodge_activated+0.7 ) * float(defense_input)  *(1+float(Leader_Skill)) *  (1) *  (1+  float(Support_from_Super) )

            print("Defense: " + str(defense))
    elif character_id == "1005401":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")

            hit_defense=0

            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            dodge_activated= input("Enter number of Super Saiyan Category allies attacking in the same turn (self excluded) (1- Type 1, 2 - Type 2) : ")

            dodge_activated=int(dodge_activated)*0.3

            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1 +0.7+ float(support) + dodge_activated ) * float(defense_input)  *(1+float(Leader_Skill)) *  (1) *  (1+  float(Support_from_Super) +int(Super_Attacks_Performed)*0)

            print("Defense: " + str(defense))
    elif character_id == "1007611":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")

            hit_defense=0

            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            dodge_activated= input("Enter number of Super Saiyan 2 Category allies attacking in the same turn (self excluded) (1- Type 1, 2 - Type 2) : ")

            dodge_activated=int(dodge_activated)*0.3

            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1 + float(support) + dodge_activated ) * float(defense_input)  *(1+float(Leader_Skill)) *  (1+0.77) *  (1+  float(Support_from_Super) +int(Super_Attacks_Performed)*0.3)

            print("Defense: " + str(defense))
    elif character_id == "1012001":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")

            hit_defense=0

            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            dodge_activated= input("Enter number of Majin Buu Saga Category allies attacking in the same turn (1- Type 1, 2 - Type 2) : ")
            if (int(dodge_activated)==3):
                dodge_activated=1
            else:
                dodge_activated=0

            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1 + float(support) + int(dodge_activated) ) * float(defense_input)  *(1+float(Leader_Skill)) *  (1 + 1.5) *  (1+  float(Support_from_Super) + int(Super_Attacks_Performed)*0.5)

            print("Defense: " + str(defense))
        else:
            print("Character information not found.")
    elif character_id == "1015201":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")

            hit_defense=0

            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            dodge_activated= input("Enter number of realm of god allies (1- Type 1, 2 - Type 2) : ")

            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1 + 0.2 +float(support) + int(dodge_activated) * 0.3) * float(defense_input)  *(1+float(Leader_Skill)) *  (1) *  (1 + float(Support_from_Super) + int(Super_Attacks_Performed) * 0.3)

            print("Defense: " + str(defense))
        else:
            print("Character information not found.")
    elif character_id == "1022651":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")

            hit_defense=0

            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            dodge_activated= input("Enter whether there is a Cell Enemy (Yes- Type 1, No - Type 0) : ")
            dodge_activated1= input("Enter how many super attacks performed so far (1- Type 1, 2 - Type 2) : ")
            if (int(dodge_activated1)>=2):
                dodge_activated1=2
            elif(int(dodge_activated1)==1):
                dodge_activated1=1
            else:
                dodge_activated1=0
            dodge_activated2= input("Enter whether received an attack within the same turn (Yes- Type 1, No - Type 0) : ")

            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1 + 2 +float(support) + int(dodge_activated) * 0.5) * float(defense_input)  *(1+float(Leader_Skill)) *  (1+ int(dodge_activated1)*0.5 + int(dodge_activated2)* 0.5 + 1) *  (1 + float(Support_from_Super) + int(Super_Attacks_Performed) * 0.3)

            print("Defense: " + str(defense))
        else:
            print("Character information not found.")
    elif character_id == "1015891":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")

            hit_defense=0

            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            dodge_activated= input("Enter whether there is a Goku's Family Category Enemy (Yes- Type 1, No - Type 0) : ")
            dodge_activated1= input("Enter how many Ki Spheres Obtained with this character (1- Type 1, 2 - Type 2) : ")
            if (int(dodge_activated)==1):
                dodge_activated1=int(dodge_activated1)*0.15

            else:
                dodge_activated1=int(dodge_activated1)*0.1
            

            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+dodge_activated1 +float(support)) * float(defense_input)  *(1+float(Leader_Skill)) *  (1) *  (1 + float(Support_from_Super) + int(Super_Attacks_Performed) * 0.5)

            print("Defense: " + str(defense))
    elif character_id == "1015901":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")

            hit_defense=0

            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            dodge_activated= input("Enter whether there is a Goku's Family Category Enemy (Yes- Type 1, No - Type 0) : ")
            dodge_activated1= input("Enter how many Ki Spheres Obtained with this character (1- Type 1, 2 - Type 2) : ")
            if (int(dodge_activated)==1):
                dodge_activated1=int(dodge_activated1)*0.25

            else:
                dodge_activated1=int(dodge_activated1)*0.2
            

            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+dodge_activated1 +float(support)) * float(defense_input)  *(1+float(Leader_Skill)) *  (1) *  (1 + float(Support_from_Super) + int(Super_Attacks_Performed) * 0.5)

            print("Defense: " + str(defense))
    elif character_id == "1028091":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")

            hit_defense=0

            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            dodge_activated= input("Enter whether there is a a character whose name includes Caulifla attacking in the same turn (Yes- Type 1, No - Type 0) : ")
            dodge_activated=int(dodge_activated)*1.6
            

            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1 + 2.2+dodge_activated +float(support)) * float(defense_input)  *(1+float(Leader_Skill)) *  (1+ 0.6) *  (1 + float(Support_from_Super) + int(Super_Attacks_Performed) * 0.2+Stack_Defense)

            print("Defense: " + str(defense))
    elif character_id == "1028081":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")

            hit_defense=0

            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            dodge_activated1= input("Enter how many Universe 6 Category Allies on the team (1- Type 1, 2 - Type 2) : ")

            dodge_activated1=int(dodge_activated1)*0.2
            dodge_activated= input("Enter how many attacks evaded by this character (1- Type 1, 2 - Type 2) : ")

            dodge_activated=int(dodge_activated)*0.2
            if(float(dodge_activated)>=0.6):
                dodge_activated=0.6
            

            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1 + 1+dodge_activated1 +float(support)) * float(defense_input)  *(1+float(Leader_Skill)) *  (1+ dodge_activated) *  (1 + float(Support_from_Super) + int(Super_Attacks_Performed) * 0.2+Stack_Defense)

            print("Defense: " + str(defense))
    elif character_id == "1026751":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")

            hit_defense=0

            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            dodge_activated1= input("Enter how many super attacks performed so far (1- Type 1, 2 - Type 2) : ")
            if (int(dodge_activated1)>=4):
                dodge_activated1=1.6
            else:
                dodge_activated1=int(dodge_activated1)*0.4


            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1 + 1.6 +float(support) ) * float(defense_input)  *(1+float(Leader_Skill)) *  (1+ dodge_activated1) *  (1 + float(Support_from_Super))

            print("Defense: " + str(defense))
        else:
            print("Character information not found.")
    elif character_id == "1018101":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")

            hit_defense=0

            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            dodge_activated= input("Enter whether there is a Movie Hero Ally attacking in the same turn (Yes- Type 1, No - Type 0) : ")
            dodge_activated1= input("Enter how many super attacks performed so far (1- Type 1, 2 - Type 2) : ")
            if (int(dodge_activated1)>=3):
                dodge_activated1=3
            else:
                dodge_activated1= int(dodge_activated1)

            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1 + 1.5  +float(support) ) * float(defense_input)  *(1+float(Leader_Skill)) *  (1 -0.5+ int(dodge_activated1)*0.5 + int(dodge_activated)* 0.5) *  (1+float(Support_from_Super))

            print("Defense: " + str(defense))
        else:
            print("Character information not found.")
    elif character_id == "1016920":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")

            hit_defense=0

            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            dodge_activated= input("Enter number of namekian allies (1- Type 1, 2 - Type 2) : ")
            dodge_activated1= input("Enter number of Universe 6 allies (1- Type 1, 2 - Type 2) : ")

            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1 + int(dodge_activated1) * 0.15 +float(support) + int(dodge_activated) * 0.3) * float(defense_input)  *(1+float(Leader_Skill)) *  (1) *  (1+float(Support_from_Super))

            print("Defense: " + str(defense))
        else:
            print("Character information not found.")
    elif character_id == "1018271":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")

            hit_defense=0

            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            dodge_activated1= input("Enter whether hp is 30% or more (Yes- Type 1, No - Type 0) : ")

            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1 + 1.3+int(dodge_activated1) * 1.3 +float(support) + 0.3) * float(defense_input)  *(1+float(Leader_Skill)) *  (1) *  (1+Stack_Defense+float(Support_from_Super) + int(Super_Attacks_Performed)*0.3)

            print("Defense: " + str(defense))
        else:
            print("Character information not found.")
    elif character_id == "1016841":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")

            hit_defense=0

            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            dodge_activated1= input("Enter whether hp is 66% or more (Yes- Type 1, No - Type 0) : ")
            dodge_activated1=int(dodge_activated1)*0.66

            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
            if (int(No_of_Turns)==99):
                Stacks= input("Number of Stacks so far before current turn : ")
                Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            else:
                Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
            if (int(Float_Character)==1):
                if(int(No_of_Turns)==3):
                    Stacks=0
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (int(Float_Character)==0):
                if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                    Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if( int(No_of_Turns)==9):
                Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
            if (int(UltraOrUnitSuper)==1):
                UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
            if (int(UltraOrUnitSuper)==1):
                UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
            if (int(UltraOrUnitSuper)==1):
                UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
            if (int(UltraOrUnitSuper)==1):
                UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1 + 1.3+dodge_activated1  +float(support) + 0.3) * float(defense_input)  *(1+float(Leader_Skill)) *  (1) *  (1+Stack_Defense+float(Support_from_Super) + int(Super_Attacks_Performed)*0.3+int(UltraOrUnitSuper)*0.3)

            print("Defense: " + str(defense))

    elif character_id == "4018281":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")

            hit_defense=0

            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            dodge_activated= input("Enter number of Target: Goku or Androids Category ally on the team ( Category that has more members) (1- Type 1, 2 - Type 2) : ")
            dodge_activated1= input("Enter whether hp is 30% or more (Yes- Type 1, No - Type 0) : ")

            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1 + 1.3+int(dodge_activated1) * 1.45 +float(support) + int(dodge_activated) * 0.13) * float(defense_input)  *(1+float(Leader_Skill)) *  (1) *  (1+float(Support_from_Super)+Stack_Defense)

            print("Defense: " + str(defense))
        else:
            print("Character information not found.")
    elif character_id == "1014081":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")

            hit_defense=0

            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            dodge_activated= input("Enter number of Time Travelers Category ally on the team Category ally on the team (1- Type 1, 2 - Type 2) : ")
            dodge_activated=int(dodge_activated)*0.2

            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1 + 1+int(dodge_activated)  +float(support)) * float(defense_input)  *(1+float(Leader_Skill)) *  (1) *  (1+float(Support_from_Super)+int(Super_Attacks_Performed)*0.5+int(UltraOrUnitSuper)*0.5)

            print("Defense: " + str(defense))
    elif character_id == "1011061":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")

            hit_defense=0

            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            dodge_activated1= input("Enter whether it is within first 7 turns from start of turn for this character (Yes- Type 1, No - Type 0) : ")

            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1 + 1.5 +float(support) + int(dodge_activated1) * 0.3) * float(defense_input)  *(1+float(Leader_Skill)) *  (1) *  (1+float(Support_from_Super))

            print("Defense: " + str(defense))
        else:
            print("Character information not found.")
    elif character_id == "1017281":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")

            hit_defense=0

            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            dodge_activated= input("Enter number of time traveller allies (1- Type 1, 2 - Type 2) : ")
            dodge_activated1= input("Enter whether received an attack within the same turn (Yes- Type 1, No - Type 0) : ")
            dodge_activated2= input("Enter number of attacks received so far (1- Type 1, 2 - Type 2) : ")
            if(int(dodge_activated2)>=3):
                dodge_activated2=3
            else:
                dodge_activated2=int(dodge_activated2)

            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1 + 1.3 +float(support) + int(dodge_activated) * 0.3) * float(defense_input)  *(1+float(Leader_Skill)) *  (1+int(dodge_activated1)* -0.3 + int(dodge_activated2)*0.1) *  (1+float(Support_from_Super) + int(Super_Attacks_Performed)*0.3)

            print("Defense: " + str(defense))
        else:
            print("Character information not found.")
    elif character_id == "1011171":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")

            hit_defense=0

            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            dodge_activated= input("Enter number of Ki Spheres Obtained during the turn (1- Type 1, 2 - Type 2) : ")

            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1 + 1.2 +float(support) + int(dodge_activated) * -0.06) * float(defense_input)  *(1+float(Leader_Skill)) *  (1) *  (1+float(Support_from_Super))

            print("Defense: " + str(defense))
        else:
            print("Character information not found.")
    elif character_id == "4019761":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            dodge_activated= input("Enter number of Ki Spheres obtained during the turn (1- Type 1, 2 - Type 2) : ")
            if (int(dodge_activated)>=2):
                dodge_activated=0.6
            else:
                dodge_activated=0
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1 + 2.6+dodge_activated +float(support) ) * float(defense_input)  *(1+float(Leader_Skill)) *  (1+1.2) *  (1+float(Support_from_Super)+int(Super_Attacks_Performed)*0.3)

            print("Defense: " + str(defense))
        else:
            print("Character information not found.")
    elif character_id == "4019751":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            dodge_activated= input("Enter number of Ki Spheres obtained during the turn (1- Type 1, 2 - Type 2) : ")
            if (int(dodge_activated)>=4):
                dodge_activated=0.5
            else:
                dodge_activated=0
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1 + 2.5+dodge_activated +float(support) ) * float(defense_input)  *(1+float(Leader_Skill)) *  (1+1) *  (1+float(Support_from_Super)+int(Super_Attacks_Performed)*0.3)

            print("Defense: " + str(defense))
        else:
            print("Character information not found.")
    elif character_id == "1019741":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1 + 2 +float(support) ) * float(defense_input)  *(1+float(Leader_Skill)) *  (1+1) *  (1+float(Support_from_Super)+int(Super_Attacks_Performed)*0.3)

            print("Defense: " + str(defense))
        else:
            print("Character information not found.")
    elif character_id == "1013951":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            dodge_activated= input("Enter number of Ki Spheres obtained during the turn (1- Type 1, 2 - Type 2) : ")
            dodge_activated1= input("Enter how many rainbow ki spheres obtained during the turn (1- Type 1, 2 - Type 2) : ")
            if (int(dodge_activated1)>4):
                dodge_activated1=4

            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1 + int(dodge_activated1) * 0.22 +float(support) + int(dodge_activated) * 0.22) * float(defense_input)  *(1+float(Leader_Skill)) *  (1+0.8) *  (1+  float(Support_from_Super)+Stack_Defense + int (Super_Attacks_Performed) * 0.5 )

            print("Defense: " + str(defense))
        else:
            print("Character information not found.")
    elif character_id == "1020031":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")

            hit_defense=0

            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            dodge_activated= input("Enter whether Android 18 attacking in the same turn(Yes- Type 1, No - Type 0) : ")

            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1 +1.8+int(dodge_activated)*1.2 +float(support)) * float(defense_input)  *(1+float(Leader_Skill)) *  (1) *  (1+float(Support_from_Super))

            print("Defense: " + str(defense))
        else:
            print("Character information not found.")
    elif character_id == "1015671":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")

            hit_defense=0

            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            dodge_activated= input("Enter number of U6 allies attacking in the same turn(1- Type 1, 0 - Type 0) : ")

            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1 +int(dodge_activated)*0.2 +float(support)) * float(defense_input)  *(1+float(Leader_Skill)) *  (1+1.6) *  (1+float(Support_from_Super)+int (Super_Attacks_Performed) * 0.3 )

            print("Defense: " + str(defense))
        else:
            print("Character information not found.")
    elif character_id == "1021351":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")

            hit_defense=0

            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            dodge_activated= input("Enter whether there is another Representatives of Universe 7 Category ally attacking in the same turn(Yes- Type 1, No - Type 0) : ")
            dodge_activated1= input("Enter how many turns this character has appeared(1- Type 1, 0 - Type 0) : ")
            if (int(dodge_activated1)>=4):
                dodge_activated1=4
            else:
                dodge_activated1=int(dodge_activated1)

            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1 +int(dodge_activated)*0.2 +float(support)) * float(defense_input)  *(1+float(Leader_Skill)) *  (1+1.2 + int(dodge_activated1)*0.2) *  (1+float(Support_from_Super))

            print("Defense: " + str(defense))
        else:
            print("Character information not found.")
    elif character_id == "1029701":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")

            hit_defense=0

            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")


            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1 +2+float(support)) * float(defense_input)  *(1+float(Leader_Skill)) *  (1) *  (1+float(Support_from_Super) + Stack_Defense + int(Super_Attacks_Performed)*0.2  + int (UltraOrUnitSuper) * 1)

            print("Defense: " + str(defense))
    elif character_id == "1017471":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")

            hit_defense=0

            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            dodge_activated= input("Enter whether there is another Namekians Category ally on the team(Yes- Type 1, No - Type 0) : ")
            dodge_activated = int(dodge_activated)*1.5
            
            dodge_activated2= input("Enter whether there is an ally whose name includes piccolo on the team(Yes- Type 1, No - Type 0) : ")
            dodge_activated2 = int(dodge_activated2)*0.5
            dodge_activated1= input("Enter how many turns this character's first entry turn(1- Type 1, 0 - Type 0) : ")
            if (int(dodge_activated1)>3):
                dodge_activated1=0
            else:
                dodge_activated1=1.5

            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1 +1.5+dodge_activated + dodge_activated1+ dodge_activated2 +float(support)) * float(defense_input)  *(1+float(Leader_Skill)) *  (1) *  (1+float(Support_from_Super) + Stack_Defense + int(Super_Attacks_Performed)*0.5 )

            print("Defense: " + str(defense))
    elif character_id == "1011141":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")

            hit_defense=0

            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            dodge_activated= input("Enter how many hits this character has received(1- Type 1, 0 - Type 0) : ")
            if (int(dodge_activated)>=4):
                dodge_activated=1.2
            else:
                dodge_activated=int(dodge_activated)*0.3
            dodge_activated1= input("Enter how many turns this character has appeared(1- Type 1, 0 - Type 0) : ")
            if (int(dodge_activated1)>=3):
                dodge_activated1=0
            else:
                dodge_activated1=0.5

            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1 +0.5+dodge_activated1 +float(support)) * float(defense_input)  *(1+float(Leader_Skill)) *  (1+dodge_activated) *  (1+float(Support_from_Super)+Stack_Defense+int(Super_Attacks_Performed)*0.3+int(UltraOrUnitSuper)*0.3)

            print("Defense: " + str(defense))
        else:
            print("Character information not found.")
    elif character_id == "1017701":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")

            hit_defense=0

            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            dodge_activated= input("Enter whether attacking an enemy who's in DEF down or ATK down status(Yes- Type 1, No - Type 0) : ")

            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1 +1.5+int(dodge_activated)* 1 +float(support)) * float(defense_input)  *(1+float(Leader_Skill)) *  (1) *  (1+ float(Support_from_Super) + int(Super_Attacks_Performed)*0.5)

            print("Defense: " + str(defense))
        else:
            print("Character information not found.")
    elif character_id == "4015071":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")

            hit_defense=0

            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            dodge_activated= input("Enter whether target enemy is in ATK Down or DEF Down status(Yes- Type 1, No - Type 0) : ")
            dodge_activated1= input("Enter how many turns this character has been out(1- Type 1, 2- Type 2) : ")
            if(dodge_activated1>=7):
                dodge_activated1=0
            else:
                dodge_activated1=1

            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1 +1.4+int(dodge_activated1)* 0.8    +int(dodge_activated)* 0.8     +float(support)) * float(defense_input)  *(1+float(Leader_Skill)) *  (1+0.8) *  (1+float(Support_from_Super))

            print("Defense: " + str(defense))
        else:
            print("Character information not found.")
    elif character_id == "1019901":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")

            hit_defense=0

            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            dodge_activated= input("Enter whether target enemy is in DEF Down status(Yes- Type 1, No - Type 0) : ")
            dodge_activated1= input("Enter how many turns this character has been out(1- Type 1, 2- Type 2) : ")
            if(dodge_activated1>=5):
                dodge_activated1=0
            else:
                dodge_activated1=1

            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1 +0.5+int(dodge_activated1)* 0.5  +float(support)) * float(defense_input)  *(1+float(Leader_Skill)) *  (1+int(dodge_activated)* 0.8    + 1) *  (1+ float(Support_from_Super) + int(Super_Attacks_Performed)*0.3)

            print("Defense: " + str(defense))
        else:
            print("Character information not found.")
    elif character_id == "1013941":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")

            hit_defense=0

            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            dodge_activated= input("Enter whether there is a Universe Survival Saga or Tournament Participants Category enemy(Yes- Type 1, No - Type 0) : ")

            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1 +2+int(dodge_activated)* 1.111 +float(support)) * float(defense_input)  *(1+float(Leader_Skill)) *  (1+0.5) *  (1+ float(Support_from_Super) + int(Super_Attacks_Performed)*0.5)

            print("Defense: " + str(defense))
        else:
            print("Character information not found.")
    elif character_id == "1014331":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")

            hit_defense=0

            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            dodge_activated= input("Enter whether all allies attacking in the same turn are either in Revenge, GT Boss, or Sworn Enemies categories (Yes- Type 1, No - Type 0) : ")

            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1 +1.5 +float(support)) * float(defense_input)  *(1+float(Leader_Skill)) *  (1+int(dodge_activated)*1) *  (1+float(Support_from_Super)+int (Super_Attacks_Performed) * 0.3 )

            print("Defense: " + str(defense))
        else:
            print("Character information not found.")
    elif character_id == "1014351":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")

            hit_defense=0

            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            dodge_activated= input("Enter whether all allies attacking in the same turn are either in Revenge, GT Boss, or Sworn Enemies categories (Yes- Type 1, No - Type 0) : ")

            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1 +1.5 +float(support)) * float(defense_input)  *(1+float(Leader_Skill)) *  (1+int(dodge_activated)*1) *  (1+ float(Support_from_Super)+int (Super_Attacks_Performed) * 0.3 )

            print("Defense: " + str(defense))
        else:
            print("Character information not found.")
    elif character_id == "1027621":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")

            hit_defense=0

            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            dodge_activated= input("Enter what slot character is placed in (1- Type 1, 2 - Type 2) : ")
            if (int(dodge_activated)==1):
                dodge_activated1=0
            else:
                dodge_activated1=1

            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1 + int(dodge_activated1) * 1.59 + 2 +float(support)) * float(defense_input)  *(1+float(Leader_Skill)) *  (1+1.5) *  (1+ float(Support_from_Super) + int(Super_Attacks_Performed)*0.3)

            print("Defense: " + str(defense))
        else:
            print("Character information not found.")
    elif character_id == "1026531":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")

            hit_defense=0

            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            dodge_activated2= input("Enter how many hits taken (1- Type 1, 2 - Type 2) : ")
            if(int(dodge_activated2)>=10):
                dodge_activated2=10
            else:
                dodge_activated2=int(dodge_activated2)
            dodge_activated3= input("Enter how many times guard has been activated (1- Type 1, 2 - Type 2) : ")
            if(int(dodge_activated3)>=5):
                dodge_activated3=5
            else:
                dodge_activated3=int(dodge_activated3)
            dodge_activated1= input("Enter whether intro is still up (Yes- Type 1, No - Type 0) : ")
            dodge_activated= input("Enter whether a revive has been activated (Yes- Type 1, No - Type 0) : ")
            if (int(dodge_activated)==1):
                dodge_activated=1
            else:
                dodge_activated=0

            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1 + int(dodge_activated1)*1.01+ int(dodge_activated) * 1.5 + 1.5 +float(support)) * float(defense_input)  *(1+float(Leader_Skill)) *  (1+dodge_activated2 * 0.1 +dodge_activated3*0.2) *  (1+float(Support_from_Super))

            print("Defense: " + str(defense))
        else:
            print("Character information not found.")
    elif character_id == "1029471":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")

            hit_defense=0

            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")

            dodge_activated1= input("Enter Number of attacks performed by this character (1- Type 1, 2 - Type 2) : ")
            dodge_activated1=int(dodge_activated1)*0.3
            if (float(dodge_activated1)>=1.5):
                dodge_activated1=1.5
            

            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1 + 2+ +float(support)) * float(defense_input)  *(1+float(Leader_Skill)) *  (1+dodge_activated1) *  (1+float(Support_from_Super)+ int(UltraOrUnitSuper)*0.8+int(Super_Attacks_Performed)*0.3)

            print("Defense: " + str(defense))
    elif character_id == "1029441":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")

            hit_defense=0

            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")

            dodge_activated1= input("Enter whether intro is still up (Yes- Type 1, No - Type 0) : ")
            dodge_activated1=int(dodge_activated1)*0.4
            dodge_activated2=0
            dodge_activated= input("Enter whether a revive has been activated (Yes- Type 1, No - Type 0) : ")
            if (int(dodge_activated)==1):
                dodge_activated=0.6
                dodge_activated2= input("Enter whether this character's own revive is the one that activated (Yes- Type 1, No - Type 0) : ")
                if (int(dodge_activated2)==1):
                    dodge_activated2=0.6
                else:
                    dodge_activated2=0                
            else:
                dodge_activated=0

            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter whether chracter activated the high chance of further raising defense(Yes- Type 1, No - Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter whether chracter activated the high chance of further raising defense(Yes- Type 1, No - Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter whether chracter activated the high chance of further raising defense(Yes- Type 1, No - Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter whether chracter activated the high chance of further raising defense(Yes- Type 1, No - Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1 + 2.6+dodge_activated1+dodge_activated2 +float(support)) * float(defense_input)  *(1+float(Leader_Skill)) *  (1+dodge_activated) *  (1+float(Support_from_Super)+ int(UltraOrUnitSuper)*1+int(Super_Attacks_Performed)*1+int(Super_Attacks_Performed1)*0.3)

            print("Defense: " + str(defense))
    elif character_id == "1021991":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")

            hit_defense=0

            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            dodge_activated2= input("Enter how many hits taken (1- Type 1, 2 - Type 2) : ")
            if(int(dodge_activated2)>=6):
                dodge_activated2=6
            else:
                dodge_activated2=int(dodge_activated2)

            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1 + 1.2+ +float(support)) * float(defense_input)  *(1+float(Leader_Skill)) *  (1+dodge_activated2 * 0.05) *  (1+float(Support_from_Super)+Stack_Defense+int(Super_Attacks_Performed)*0.3)

            print("Defense: " + str(defense))
        else:
            print("Character information not found.")
    elif character_id == "1028811":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")

            hit_defense=0

            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            dodge_activated= input("Enter whether a revive has been activated (Yes- Type 1, No - Type 0) : ")
            if (int(dodge_activated)==1):
                dodge_activated=1
            else:
                dodge_activated=0

            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1 + int(dodge_activated) * 1 + 1.5 +float(support)) * float(defense_input)  *(1+float(Leader_Skill)) *  (1+1.5 ) *  (1+ float(Support_from_Super) + int(Super_Attacks_Performed)*0.3 + float(Stack_Defense))

            print("Defense: " + str(defense))
        else:
            print("Character information not found.")
    elif character_id == "1028791":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")

            hit_defense=0

            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            dodge_activated= input("Enter what slot character is placed in (1- Type 1, 2 - Type 2) : ")
            if (int(dodge_activated)==1):
                dodge_activated=1
            else:
                dodge_activated=0

            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1 + int(dodge_activated) * 1 + 1.5 +float(support)) * float(defense_input)  *(1+float(Leader_Skill)) *  (1+1.5 ) *  (1+ float(Support_from_Super) + int(Super_Attacks_Performed)*0.5)

            print("Defense: " + str(defense))
        else:
            print("Character information not found.")
    elif character_id == "1027621":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")

            hit_defense=0

            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            dodge_activated= input("Enter what slot character is placed in (1- Type 1, 2 - Type 2) : ")
            if (int(dodge_activated)==1):
                dodge_activated=0
            else:
                dodge_activated=1
            dodge_activated1= input("Enter how many dodges character has done (1- Type 1, 2 - Type 2) : ")
            if (int(dodge_activated1)>=4):
                dodge_activated1=0.77
            else:
                dodge_activated1=0.20 * int (dodge_activated1)

            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1 + int(dodge_activated) * 0.77 + 1.77 +float(support)) * float(defense_input)  *(1+float(Leader_Skill)) *  (1+0.77 + dodge_activated1) *  (1+ float(Support_from_Super) + int(Super_Attacks_Performed)*0.3)

            print("Defense: " + str(defense))
        else:
            print("Character information not found.")
    elif character_id == "1022161":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")

            hit_defense=0

            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            dodge_activated= input("Enter number of enemies (1- Type 1, 2 - Type 2) : ")
            if (int(dodge_activated)>=2):
                dodge_activated1=1
                dodge_activated2=0
            else:
                dodge_activated2=1
                dodge_activated1=0

            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1 + 3.5 +float(support)) * float(defense_input)  *(1+float(Leader_Skill)) *  (1) *  (1+ float(Support_from_Super) + int(Super_Attacks_Performed)*0.5)

            print("Defense: " + str(defense))
        else:
            print("Character information not found.")
    elif character_id == "1013121":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")

            hit_defense=0

            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            dodge_activated= input("Enter number of enemies (1- Type 1, 2 - Type 2) : ")
            dodge_activated=int(dodge_activated)*0.2

            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1 + 1.5+dodge_activated  +float(support)) * float(defense_input)  *(1+float(Leader_Skill)) *  (1+1.5) *  (1+ float(Support_from_Super) + int(Super_Attacks_Performed)*0.5)

            print("Defense: " + str(defense))
        else:
            print("Character information not found.")
    elif character_id == "1020011":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")

            hit_defense=0

            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            dodge_activated= input("Enter number of Universe 11 allies (1- Type 1, 2 - Type 2) : ")
            if (int(dodge_activated)>=3):
                dodge_activated=1
            else:
                dodge_activated=0
            dodge_activated1= input("Enter whether there is a Universe 11 ally attacking in the same turn (Yes- Type 1, No - Type 0) : ")

            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1.5 + int(dodge_activated1) * 1.1+ int(dodge_activated) * 1.1 + 1.1 +float(support)) * float(defense_input)  *(1+float(Leader_Skill)) *  (1) *  (1+ float(Support_from_Super) + int(Super_Attacks_Performed)*0.3)

            print("Defense: " + str(defense))
        else:
            print("Character information not found.")

    elif character_id == "4026491":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")

            hit_defense=0

            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            dodge_activated= input("Enter whether its still 6 turns from this character's first turn (Yes- Type 1, No - Type 0) : ")
            dodge_activated1= input("Enter whether buff of ATK & DEF +60% for 3 turns after receiving an attack is active (Yes- Type 1, No - Type 0) : ")
            dodge_activated2= input("Enter whether there is a Universe 6 ally attacking in the same turn (Yes- Type 1, No - Type 0) : ")

            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0

            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
            if (int(UltraOrUnitSuper)==1):
                UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
            if (int(UltraOrUnitSuper)==1):
                UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
            if (int(UltraOrUnitSuper)==1):
                UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
            if (int(UltraOrUnitSuper)==1):
                UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+1.6+int(dodge_activated)*0.6+int(dodge_activated2)*1.6  +float(support)) * float(defense_input)  *(1+float(Leader_Skill)) *  (1+ int(dodge_activated1) * 0.6) *  (1+ float(Support_from_Super)+int(Super_Attacks_Performed)*0.3)

            print("Defense: " + str(defense))
    elif character_id == "1012651":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")

            hit_defense=0

            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            dodge_activated2= input("Enter whether buff of DEF +80% for 4 turns after receiving an attack is active (Yes- Type 1, No - Type 0) : ")
            dodge_activated1= input("Enter whether there is a Vegeta's Family Category ally attacking in the same turn (Yes- Type 1, No - Type 0) : ")

            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0

            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
            if (int(UltraOrUnitSuper)==1):
                UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
            if (int(UltraOrUnitSuper)==1):
                UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
            if (int(UltraOrUnitSuper)==1):
                UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
            if (int(UltraOrUnitSuper)==1):
                UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+1.22+int(dodge_activated1)*1.22  +float(support)) * float(defense_input)  *(1+float(Leader_Skill)) *  (1+ int(dodge_activated2) * 0.8) *  (1+ float(Support_from_Super))

            print("Defense: " + str(defense))
    elif character_id == "1024031":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")

            hit_defense=0

            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            dodge_activated2= input("Enter number of Pure Saiyan Category Allies on the team (1- Type 1, 2 - Type 2) : ")
            dodge_activated2=int(dodge_activated2)*0.1
            dodge_activated1= input("Enter whether there is a Vegeta's Family Category ally attacking in the same turn (Yes- Type 1, No - Type 0) : ")
            dodge_activated1=int(dodge_activated1)*0.5
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0

            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
            if (int(UltraOrUnitSuper)==1):
                UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
            if (int(UltraOrUnitSuper)==1):
                UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
            if (int(UltraOrUnitSuper)==1):
                UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
            if (int(UltraOrUnitSuper)==1):
                UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+1.7+dodge_activated2+dodge_activated1 +float(support)) * float(defense_input)  *(1+float(Leader_Skill)) *  (1) *  (1+ float(Support_from_Super)+int(Super_Attacks_Performed)*0.3)

            print("Defense: " + str(defense))
    elif character_id == "1026481":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")

            hit_defense=0

            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")

            dodge_activated1= input("Enter whether there is a Universe 6 ally attacking in the same turn (Yes- Type 1, No - Type 0) : ")

            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0

            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
            if (int(UltraOrUnitSuper)==1):
                UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
            if (int(UltraOrUnitSuper)==1):
                UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
            if (int(UltraOrUnitSuper)==1):
                UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
            if (int(UltraOrUnitSuper)==1):
                UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1.6+1 + int(dodge_activated1) * 1.6 +float(support)) * float(defense_input)  *(1+float(Leader_Skill)) *  (1+0.6) *  (1+ float(Support_from_Super))

            print("Defense: " + str(defense))

    elif character_id == "1027511":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")

            hit_defense=0

            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            dodge_activated= input("Enter slot character is placed in (1- Type 1, 2 - Type 2) : ")

        if (int(dodge_activated)==1):
            dodge_activated=1.3
        else:
            dodge_activated=0
        dodge_activated2= input("Enter number of turns from this character's start of turn (1- Type 1, 2 - Type 2) : ")
        if(int(dodge_activated2)<=5 and int(dodge_activated)==1):
            dodge_activated2=1
        else:
            dodge_activated2=0

        Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
        Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
        Which_Super_Stacks= 5
        Stack_Defense= 0
        UltraOrUnitSuper1=0
        if (Character_Stacks=="True"):
            Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
        if (Character_Stacks=='True'):
            Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
            No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
            if (int(No_of_Turns)==99):
                Stacks= input("Number of Stacks so far before current turn : ")
                Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            else:
                Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                if (int(Float_Character)==1):
                    if(int(No_of_Turns)==3):
                        Stacks=0
                        Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                        Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                        Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                        Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                        Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                        Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                        Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                if (int(Float_Character)==0):
                    if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                        Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                        Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                        Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                        Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                        Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                        Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if( int(No_of_Turns)==9):
                        Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                        Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
        if (Which_Super_Stacks==5):
            Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
            Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
            UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
            if (int(UltraOrUnitSuper)==1):
                UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

        if (int(Which_Super_Stacks)==0):
            Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
            Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
            UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
            if (int(UltraOrUnitSuper)==1):
                UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

        if (int(Which_Super_Stacks)==1):
            Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
            Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
            UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
            if (int(UltraOrUnitSuper)==1):
                UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

        if (int(Which_Super_Stacks)==2):
            Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
            Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
            UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
            if (int(UltraOrUnitSuper)==1):
                UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


        defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+dodge_activated +dodge_activated2+1.5+float(support)) * float(defense_input)  *(1+float(Leader_Skill)) *  (1) *  (1+ float(Support_from_Super) + int(Super_Attacks_Performed)*0.3)

        print("Defense: " + str(defense))
    elif character_id == "1025731":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")

            hit_defense=0

            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            dodge_activated= input("Enter slot character is placed in (1- Type 1, 2 - Type 2) : ")

        if (int(dodge_activated)==1):
            dodge_activated=1
        else:
            dodge_activated=0
        

        Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
        Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
        Which_Super_Stacks= 5
        Stack_Defense= 0
        UltraOrUnitSuper1=0
        if (Character_Stacks=="True"):
            Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
        if (Character_Stacks=='True'):
            Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
            No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
            if (int(No_of_Turns)==99):
                Stacks= input("Number of Stacks so far before current turn : ")
                Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            else:
                Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                if (int(Float_Character)==1):
                    if(int(No_of_Turns)==3):
                        Stacks=0
                        Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                        Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                        Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                        Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                        Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                        Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                        Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                if (int(Float_Character)==0):
                    if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                        Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                        Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                        Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                        Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                        Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                        Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if( int(No_of_Turns)==9):
                        Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                        Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
        if (Which_Super_Stacks==5):
            Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
            Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
            UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
            if (int(UltraOrUnitSuper)==1):
                UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

        if (int(Which_Super_Stacks)==0):
            Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
            Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
            UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
            if (int(UltraOrUnitSuper)==1):
                UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

        if (int(Which_Super_Stacks)==1):
            Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
            Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
            UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
            if (int(UltraOrUnitSuper)==1):
                UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

        if (int(Which_Super_Stacks)==2):
            Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
            Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
            UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
            if (int(UltraOrUnitSuper)==1):
                UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


        defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+dodge_activated +2+float(support)) * float(defense_input)  *(1+float(Leader_Skill)) *  (1) *  (1+ float(Support_from_Super) + int(Super_Attacks_Performed)*0.3+int(UltraOrUnitSuper)*0.5+Stack_Defense)

        print("Defense: " + str(defense))
    elif character_id == "1025771":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")

            hit_defense=0

            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            dodge_activated= input("Enter slot character is placed in (1- Type 1, 2 - Type 2) : ")

        if (int(dodge_activated)==1):
            dodge_activated=1
        else:
            dodge_activated=0
        

        Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
        Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
        Which_Super_Stacks= 5
        Stack_Defense= 0
        UltraOrUnitSuper1=0
        if (Character_Stacks=="True"):
            Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
        if (Character_Stacks=='True'):
            Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
            No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
            if (int(No_of_Turns)==99):
                Stacks= input("Number of Stacks so far before current turn : ")
                Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            else:
                Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                if (int(Float_Character)==1):
                    if(int(No_of_Turns)==3):
                        Stacks=0
                        Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                        Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                        Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                        Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                        Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                        Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                        Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                if (int(Float_Character)==0):
                    if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                        Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                        Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                        Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                        Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                        Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                        Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if( int(No_of_Turns)==9):
                        Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                        Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
        if (Which_Super_Stacks==5):
            Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
            Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
            UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
            if (int(UltraOrUnitSuper)==1):
                UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

        if (int(Which_Super_Stacks)==0):
            Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
            Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
            UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
            if (int(UltraOrUnitSuper)==1):
                UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

        if (int(Which_Super_Stacks)==1):
            Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
            Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
            UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
            if (int(UltraOrUnitSuper)==1):
                UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

        if (int(Which_Super_Stacks)==2):
            Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
            Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
            UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
            if (int(UltraOrUnitSuper)==1):
                UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


        defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+dodge_activated +2+float(support)) * float(defense_input)  *(1+float(Leader_Skill)) *  (1) *  (1+ float(Support_from_Super) + int(Super_Attacks_Performed)*0.3+int(UltraOrUnitSuper)*0.5)


        print("Defense: " + str(defense))
    elif character_id == "1026341":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")

            hit_defense=0

            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            dodge_activated= input("Enter number of Phy Ki Spheres Obtained (1- Type 1, 2 - Type 2) : ")

            if (int(dodge_activated)>=1):
                dodge_activated=0.5
            else:
                dodge_activated=0
            dodge_activated2= input("Enter number of turns from this character's start of turn (1- Type 1, 2 - Type 2) : ")
            if(int(dodge_activated2)>=10 ):
                dodge_activated2=-0.1
            else:
                dodge_activated2=int(dodge_activated2)*-0.01
            dodge_activated1=int(dodge_activated)*(0.3+dodge_activated2)
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
            if (int(UltraOrUnitSuper)==1):
                UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
            if (int(UltraOrUnitSuper)==1):
                UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
            if (int(UltraOrUnitSuper)==1):
                UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
            if (int(UltraOrUnitSuper)==1):
                UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1 +dodge_activated1+1+float(support)) * float(defense_input)  *(1+float(Leader_Skill)) *  (1+dodge_activated) *  (1+ float(Support_from_Super) + int(Super_Attacks_Performed)*0.3)

            print("Defense: " + str(defense))
    elif character_id == "1025841":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")

            hit_defense=0

            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            dodge_activated= input("Enter number of  Ki Spheres Obtained (1- Type 1, 2 - Type 2) : ")

            if (int(dodge_activated)>=3):
                dodge_activated=1.34
            else:
                dodge_activated=0
            
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
            if (int(UltraOrUnitSuper)==1):
                UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
            if (int(UltraOrUnitSuper)==1):
                UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
            if (int(UltraOrUnitSuper)==1):
                UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
            if (int(UltraOrUnitSuper)==1):
                UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1 +1.34+float(support)) * float(defense_input)  *(1+float(Leader_Skill)) *  (1+dodge_activated) *  (1+ float(Support_from_Super) + int(Super_Attacks_Performed)*0.3)

            print("Defense: " + str(defense))

    elif character_id == "1026351":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")

            hit_defense=0

            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            dodge_activated= input("Enter number of Ki Spheres Obtained (1- Type 1, 2 - Type 2) : ")

            if (int(dodge_activated)>=2):
                dodge_activated=0.5
            else:
                dodge_activated=0
            dodge_activated2= input("Enter number of turns from this character's start of turn (1- Type 1, 2 - Type 2) : ")
            if(int(dodge_activated2)>=5 ):
                dodge_activated2=-0.1
            else:
                dodge_activated2=int(dodge_activated2)*-0.02
            dodge_activated1=int(dodge_activated)*(0.3+dodge_activated2)
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
            if (int(UltraOrUnitSuper)==1):
                UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            

            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1 +dodge_activated1+1+float(support)) * float(defense_input)  *(1+float(Leader_Skill)) *  (1+dodge_activated) *  (1+ float(Support_from_Super) + int(Super_Attacks_Performed)*0.3)

            print("Defense: " + str(defense))
    elif character_id == "4029481":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")

            hit_defense=0

            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            dodge_activated= input("Enter number of Ki Spheres Obtained (1- Type 1, 2 - Type 2) : ")
            dodge_activated=int(dodge_activated)*0.5
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            
            
            

            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1 +float(support)) * float(defense_input)  *(1+float(Leader_Skill)) *  (1+dodge_activated) *  (1+ float(Support_from_Super) )

            print("Defense: " + str(defense))
    elif character_id == "1021651":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")

            hit_defense=0

            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            dodge_activated= input("Enter slot character is placed in (1- Type 1, 2 - Type 2) : ")
            if (int(dodge_activated)==3):
                dodge_activated=0
            elif (int(dodge_activated)==2):
                dodge_activated=0.5
            else:
                dodge_activated=1


            dodge_activated1= input("Enter whether there is a character with the name Bulma in the team or another character with the name Trunks attacking in the same turn (Yes- Type 1, No - Type 0) : ")
            dodge_activated1=int(dodge_activated1) * 0.5
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+dodge_activated +float(support)) * float(defense_input)  *(1+float(Leader_Skill)) *  (1+dodge_activated1) *  (1+ float(Support_from_Super) + int(Super_Attacks_Performed)*0.5+int(UltraOrUnitSuper)*0.5)

            print("Defense: " + str(defense))
    elif character_id == "1029621":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")

            hit_defense=0

            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            dodge_activated= input("Enter slot character is placed in (1- Type 1, 2 - Type 2) : ")
            if (int(dodge_activated)==3):
                dodge_activated=0.6
            elif (int(dodge_activated)==2):
                dodge_activated=0.4
            else:
                dodge_activated=0.4



            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+2+dodge_activated +float(support)) * float(defense_input)  *(1+float(Leader_Skill)) *  (1+2) *  (1+ float(Support_from_Super) + int(Super_Attacks_Performed)*0.3)

            print("Defense: " + str(defense))
    elif character_id == "1015811":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")

            hit_defense=0

            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            dodge_activated= input("Enter number of Universe 6 allies on the team (1- Type 1, 2 - Type 2) : ")
            if (int(dodge_activated)>=6):
                dodge_activated=0.6
            else:
                dodge_activated=int(dodge_activated)*0.1
            dodge_activated1= input("Enter whether ATK & DEF +60% for 3 turns after receiving an attack is active(Yes- Type 1, No - Type 0) : ")
            dodge_activated1=int(dodge_activated1)*0.6
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+1.6 + dodge_activated +float(support)) * float(defense_input)  *(1+float(Leader_Skill)) *  (1+dodge_activated1) *  (1+ float(Support_from_Super) +Stack_Defense+ int(Super_Attacks_Performed)*0.3)

            print("Defense: " + str(defense))
        else:
            print("Character information not found.")
    elif character_id == "1029281":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")

            hit_defense=0

            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            dodge_activated= input("Enter number of Universe 6 or Namekian Category allies on the team (whichever is more) (1- Type 1, 2 - Type 2) : ")
   
            dodge_activated=int(dodge_activated)*0.5
           
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+dodge_activated  +float(support)) * float(defense_input)  *(1+float(Leader_Skill)) *  (1+1) *  (1+ float(Support_from_Super) +Stack_Defense+ int(Super_Attacks_Performed)*0.3)

            print("Defense: " + str(defense))
    elif character_id == "1015841":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")

            hit_defense=0

            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            dodge_activated= input("Enter whether HP is 60% or less at start of turn (Yes- Type 1, No - Type 0) : ")
            dodge_activated=int(dodge_activated)*0.2

            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+1.6+0.4+dodge_activated  +float(support)) * float(defense_input)  *(1+float(Leader_Skill)) *  (1+1.2) *  (1+ float(Support_from_Super) + int(Super_Attacks_Performed)*0.3)

            print("Defense: " + str(defense))
        else:
            print("Character information not found.")
    elif character_id == "4029711":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")

            hit_defense=0

            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            dodge_activated= input("Enter whether HP is 70% or more at start of turn (Yes- Type 1, No - Type 0) : ")
            dodge_activated=int(dodge_activated)*0.7

            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+2.5+dodge_activated  +float(support)) * float(defense_input)  *(1+float(Leader_Skill)) *  (1) *  (1+ float(Support_from_Super) + int(Super_Attacks_Performed)*0.2 + Stack_Defense + int(UltraOrUnitSuper)*1)

            print("Defense: " + str(defense))
    elif character_id == "1022811":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")

            hit_defense=0

            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            dodge_activated= input("Enter whether there is a character whose name include goku on the team (Yes- Type 1, No - Type 0) : ")
            if (int(dodge_activated)==1):
                dodge_activated=0.59
            else:
                dodge_activated=0
            dodge_activated1= input("Enter whether there is a character whose name include goku on the turn (Yes- Type 1, No - Type 0) : ")
            if (int(dodge_activated1)==1):
                dodge_activated1=0.59
            else:
                dodge_activated1=0
            dodge_activated2= input("Enter whether HP is 58% or less when character performs a Ultra Super Attack (Yes- Type 1, No - Type 0) : ")
            if (int(dodge_activated2)==1):
                dodge_activated2=0.59
            else:
                dodge_activated2=0
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+dodge_activated1+dodge_activated+dodge_activated2 +float(support)) * float(defense_input)  *(1+float(Leader_Skill)) *  (1+int(UltraOrUnitSuper)*0.58+0.58) *  (1+ float(Support_from_Super) +int(UltraOrUnitSuper)*0.3)

            print("Defense: " + str(defense))
        else:
            print("Character information not found.")
    elif character_id == "1013111":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")

            hit_defense=0

            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            dodge_activated= input("Enter number of World Tournament, Warriors Raised on Earth, or Turtle School category allies (1- Type 1, 2 - Type 2) : ")
            dodge_activated=int(dodge_activated)*0.1

            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+1.2 + dodge_activated +float(support)) * float(defense_input)  *(1+float(Leader_Skill)) *  (1+1.2) *  (1+ float(Support_from_Super))

            print("Defense: " + str(defense))
        else:
            print("Character information not found.")
    elif character_id == "1006211":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            dodge_activated= input("Enter how many turns from first appearance (1- Type 1, 2 - Type 2) : ")
            if (int(dodge_activated)>=4):
                dodge_activated=0
            else:
                dodge_activated=1
            dodge_activated1= input("Enter whether character's Ki is 11 or less (Yes- Type 1, No - Type 0) : ")
            if (int(dodge_activated1)==1):
                dodge_activated1=1
            else:
                dodge_activated1=0
            dodge_activated2= input("Enter how many Super Attacks Performed so far (1- Type 1, 0 - Type 0) : ")
            if (int(dodge_activated2)>=3):
                dodge_activated2=1.5
            else:
                dodge_activated2=int(dodge_activated2) *0.5

            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+ 1.5 + int(dodge_activated) * 0.33 +float(support)) * float(defense_input)  *(1+float(Leader_Skill)) *  (1 + dodge_activated2  + 1 + float(dodge_activated1)*1 ) *  (1+float(Support_from_Super))

            print("Defense: " + str(defense))
        else:
            print("Character information not found.")

    elif character_id == "1014721":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")

            dodge_activated1= input("Enter whether HP is 50% or more at start of turn (Yes- Type 1, No - Type 0) : ")
            if (int(dodge_activated1)==1):
                dodge_activated1=1
            else:
                dodge_activated1=0
            dodge_activated2= input("Enter how many Super Attacks Performed so far (1- Type 1, 0 - Type 0) : ")
            if (int(dodge_activated2)>=3):
                dodge_activated2=0.58
            else:
                dodge_activated2=int(dodge_activated2) *0.2

            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+ 1.5 + dodge_activated1  +float(support)) * float(defense_input)  *(1+float(Leader_Skill)) *  (1 +dodge_activated2 ) *  (1+float(Support_from_Super)+int(Super_Attacks_Performed)*0.3)

            print("Defense: " + str(defense))
        else:
            print("Character information not found.")
    elif character_id == "1014911":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")

            dodge_activated1= input("Enter whether HP is 77% or below at start of turn (Yes- Type 1, No - Type 0) : ")
            if (int(dodge_activated1)==1):
                dodge_activated1=0.17
            else:
                dodge_activated1=0
            dodge_activated= input("Enter how many Attacks received by this character so far (1- Type 1, 0 - Type 0) : ")
            if (int(dodge_activated)>=3):
                dodge_activated=0.5
            else:
                dodge_activated=int(dodge_activated) *0.17

            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
            if (int(UltraOrUnitSuper)==1):
                UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

           

            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+ 1.8 + dodge_activated1  +float(support)) * float(defense_input)  *(1+float(Leader_Skill)) *  (1 +dodge_activated ) *  (1+float(Support_from_Super)+int(Super_Attacks_Performed)*0.3)

            print("Defense: " + str(defense))
    elif character_id == "1016461":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            dodge_activated1= input("Enter whether there is a vegeta family enemy (Yes- Type 1, No - Type 0) : ")
            if (int(dodge_activated1)==1):
                dodge_activated1=1
            else:
                dodge_activated1=0

            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+ int(dodge_activated1) * 0.7 +float(support)) * float(defense_input)  *(1+float(Leader_Skill)) *  (1+1) *  (1+float(Support_from_Super) + int(Super_Attacks_Performed)*0.2 + Stack_Defense)

            print("Defense: " + str(defense))
        else:
            print("Character information not found.")
    elif character_id == "1016901":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            dodge_activated1= input("Enter whether there is a movie bosses enemy (Yes- Type 1, No - Type 0) : ")
            if (int(dodge_activated1)==1):
                dodge_activated1=1
            else:
                dodge_activated1=0

            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+ 0.4 + int(dodge_activated1) * 1 +float(support)) * float(defense_input)  *(1+float(Leader_Skill)) *  (1) *  (1+float(Support_from_Super))

            print("Defense: " + str(defense))
        else:
            print("Character information not found.")
    elif character_id == "1026511":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):

                Super_Attacks_Performed = input("Enter Number of normal/non-unit-super 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter normal/non-unit 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of normal/non-unit-super 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter normal/non-unit 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of normal/non-unit-super 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter normal/non-unit 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of normal/non-unit-super 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter normal/non-unit 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+ 0.8 + 0.4 +float(support)) * float(defense_input)  *(1+float(Leader_Skill)) *  (1+1.6) *  (1 + float(Support_from_Super) + int(Super_Attacks_Performed)*0.3)

            print("Defense: " + str(defense))
        else:
            print("Character information not found.")
    elif character_id == "1028591":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            dodge_activated1= input("Enter whether there is an ally whose name includes Frieza (Frieza Soldier excluded) on the Turn (Yes- Type 1, No - Type 0) : ")
            if (int(dodge_activated1)==1):
                dodge_activated1=1
            else:
                dodge_activated1=0

            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):

                Super_Attacks_Performed = input("Enter Number of normal/non-unit-super 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter normal/non-unit 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of normal/non-unit-super 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter normal/non-unit 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of normal/non-unit-super 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter normal/non-unit 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of normal/non-unit-super 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter normal/non-unit 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+ 2+ dodge_activated1 +float(support)) * float(defense_input)  *(1+float(Leader_Skill)) *  (1+1) *  (1 + float(Support_from_Super) + int(Super_Attacks_Performed)*0.3)

            print("Defense: " + str(defense))
        else:
            print("Character information not found.")
    elif character_id == "1014111":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            dodge_activated = input("Enter number of turns passed since character's first appearance : ")
            if(int(dodge_activated)>=5):
                dodge_activated=-0.2
            else:
                dodge_activated=int(dodge_activated)*-0.05
            dodge_activated1= input("Enter ki Character has (12-Type 12, 8- Type 8) : ")
            if(int(dodge_activated1)>=9):
                dodge_activated1=0.5
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):

                Super_Attacks_Performed = input("Enter Number of normal/non-unit-super 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter normal/non-unit 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of normal/non-unit-super 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter normal/non-unit 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of normal/non-unit-super 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter normal/non-unit 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of normal/non-unit-super 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter normal/non-unit 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+ 1.7+float(dodge_activated)  +float(support)) * float(defense_input)  *(1+float(Leader_Skill)) *  (1+float(dodge_activated1)) *  (1+ float(Support_from_Super) + int(Super_Attacks_Performed)*0.5)

            print("Defense: " + str(defense))
        else:
            print("Character information not found.")
    elif character_id == "1008821":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            ki_Spheres_obtained = input("Enter number of Ki Spheres Obtained : ")
            if(int(ki_Spheres_obtained)>=6):
                dodge_activated=0.3
            else:
                dodge_activated=0
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):

                Super_Attacks_Performed = input("Enter Number of normal/non-unit-super 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter normal/non-unit 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of normal/non-unit-super 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter normal/non-unit 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of normal/non-unit-super 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter normal/non-unit 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of normal/non-unit-super 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter normal/non-unit 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+ int(dodge_activated)  +float(support)) * float(defense_input)  *(1+float(Leader_Skill)) *  (1) *  (1+ Stack_Defense + float(Support_from_Super) + int(Super_Attacks_Performed)*0.3)

            print("Defense: " + str(defense))
        else:
            print("Character information not found.")
    elif character_id == "4017911":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            ki_Spheres_obtained = input("Enter number of Ki Spheres Obtained : ")
            if(int(ki_Spheres_obtained)>=4):
                dodge_activated=0.3
            elif(int(ki_Spheres_obtained)>=6):
                dodge_activated=0.7
            elif(int(ki_Spheres_obtained)>=8):
                dodge_activated=1.2
            else:
                dodge_activated=0
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):

                Super_Attacks_Performed = input("Enter Number of normal/non-unit-super 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter normal/non-unit 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of normal/non-unit-super 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter normal/non-unit 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of normal/non-unit-super 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter normal/non-unit 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of normal/non-unit-super 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter normal/non-unit 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+ 1.8  +float(support)) * float(defense_input)  *(1+float(Leader_Skill)) *  (1+dodge_activated) *  (1 + int(UltraOrUnitSuper)*0.5 +float(Support_from_Super) + int(Super_Attacks_Performed)*0.5)

            print("Defense: " + str(defense))
        else:
            print("Character information not found.")
    elif character_id == "1028491":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            ki_Spheres_obtained = input("Enter number of hits received so far in battle: ")
            if(int(ki_Spheres_obtained)>=3 ):
                dodge_activated=0.8
            else:
                dodge_activated=0.31*int(ki_Spheres_obtained)
            hit_health = input("Enter amount of health when the character receives an attack for the 1st time in a turn(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):

                Super_Attacks_Performed = input("Enter Number of normal/non-unit-super 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter normal/non-unit 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of normal/non-unit-super 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter normal/non-unit 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of normal/non-unit-super 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter normal/non-unit 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of normal/non-unit-super 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter normal/non-unit 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+ 1.5 +float(support)) * float(defense_input)  *(1+float(Leader_Skill)) *  (1+dodge_activated+float(hit_health)*1.5) *  (1+Stack_Defense+float(Support_from_Super) + int(Super_Attacks_Performed)*0.2)

            print("Defense: " + str(defense))
    elif character_id == "1021981":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            ki_Spheres_obtained = input("Enter number of hits received so far in battle: ")
            if(int(ki_Spheres_obtained)>=6 ):
                dodge_activated=0.3
            else:
                dodge_activated=0.05*int(ki_Spheres_obtained)
            dodge_activated1 = input("Enter whether buff of DEF +30% for 6 turns after receiving attack is active(Yes- Type 1, No- Type 0) : ")
            dodge_activated1=int(dodge_activated1)*0.3
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):

                Super_Attacks_Performed = input("Enter Number of normal/non-unit-super 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter normal/non-unit 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of normal/non-unit-super 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter normal/non-unit 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of normal/non-unit-super 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter normal/non-unit 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of normal/non-unit-super 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter normal/non-unit 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+ 1.5 +float(support)) * float(defense_input)  *(1+float(Leader_Skill)) *  (1+dodge_activated+dodge_activated1) *  (1+Stack_Defense+float(Support_from_Super) + int(Super_Attacks_Performed)*0.3)

            print("Defense: " + str(defense))
    elif character_id == "1014711":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            dodge_activated = input("Enter whether buff of High chance of an additional DEF +100% is active(Yes- Type 1, No- Type 0) : ")
            dodge_activated=int(dodge_activated)*1
            dodge_activated1 = input("Enter whether buff of Great chance of an additional ATK & DEF +150% is active(Yes- Type 1, No- Type 0) : ")
            dodge_activated1=int(dodge_activated1)*1.5
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):

                Super_Attacks_Performed = input("Enter Number of normal/non-unit-super 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter normal/non-unit 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of normal/non-unit-super 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter normal/non-unit 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of normal/non-unit-super 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter normal/non-unit 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of normal/non-unit-super 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter normal/non-unit 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+dodge_activated+dodge_activated1+1.5 +float(support)) * float(defense_input)  *(1+float(Leader_Skill)) *  (1) *  (1+Stack_Defense+float(Support_from_Super) + int(Super_Attacks_Performed)*0.5)

            print("Defense: " + str(defense))
    elif character_id == "1018361":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            dodge_activated1 = input("Enter whether buff ofGreat chance of an additional DEF +12% for all allies is active(Yes- Type 1, No- Type 0) : ")
            dodge_activated1=int(dodge_activated1)*0.12
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):

                Super_Attacks_Performed = input("Enter Number of normal/non-unit-super 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter normal/non-unit 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of normal/non-unit-super 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter normal/non-unit 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of normal/non-unit-super 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter normal/non-unit 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of normal/non-unit-super 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter normal/non-unit 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+ 1.6+dodge_activated1 +float(support)) * float(defense_input)  *(1+float(Leader_Skill)) *  (1) *  (1+float(Support_from_Super) + int(Super_Attacks_Performed)*1)

            print("Defense: " + str(defense))
    elif character_id == "1020911":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            ki_Spheres_obtained = input("Enter number of enemies: ")
            if(int(ki_Spheres_obtained)==1 ):
                dodge_activated=1.5
            else:
                dodge_activated=2

            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):

                Super_Attacks_Performed = input("Enter Number of normal/non-unit-super 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter normal/non-unit 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of normal/non-unit-super 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter normal/non-unit 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of normal/non-unit-super 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter normal/non-unit 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of normal/non-unit-super 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter normal/non-unit 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+ 1.5+dodge_activated +float(support)) * float(defense_input)  *(1+float(Leader_Skill)) *  (1) *  (1+float(Support_from_Super) + int(Super_Attacks_Performed)*0.5)

            print("Defense: " + str(defense))
    elif character_id == "1020911":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            ki_Spheres_obtained = input("Enter number of enemies: ")
            if(int(ki_Spheres_obtained)>=2 ):
                dodge_activated1=0.7
            else:
                dodge_activated1=0
            dodge_activated= input("Enter whether HP is 50% or more at start of turn (Yes- Type 1, No - Type 0) : ")
            dodge_activated=int(dodge_activated)*0.3
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0

            if (Which_Super_Stacks==5):

                Super_Attacks_Performed = input("Enter Number of normal/non-unit-super 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter normal/non-unit 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
            if (int(UltraOrUnitSuper)==1):
                UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            

            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+ 1.5+dodge_activated +dodge_activated1+float(support)) * float(defense_input)  *(1+float(Leader_Skill)) *  (1+0.5) *  (1+float(Support_from_Super) + int(Super_Attacks_Performed)*0.3)

            print("Defense: " + str(defense))
    elif character_id == "1021051":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            ki_Spheres_obtained = input("Enter number of enemies: ")
            if(int(ki_Spheres_obtained)==1 ):
                dodge_activated=0.3
            elif(int(ki_Spheres_obtained)==2):
                dodge_activated=0.4
            else:
                dodge_activated=0.5
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):

                Super_Attacks_Performed = input("Enter Number of normal/non-unit-super 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter normal/non-unit 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of normal/non-unit-super 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter normal/non-unit 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of normal/non-unit-super 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter normal/non-unit 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of normal/non-unit-super 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter normal/non-unit 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+ 1+dodge_activated +float(support)) * float(defense_input)  *(1+float(Leader_Skill)) *  (1) *  (1+float(Support_from_Super) + int(Super_Attacks_Performed)*0.3)

            print("Defense: " + str(defense))
    elif character_id == "4021061":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            ki_Spheres_obtained = input("Enter number of Ki Spheres Obtained : ")
            if(int(ki_Spheres_obtained)>=3 ):
                dodge_activated=0.15
            elif(int(ki_Spheres_obtained)>=6):
                dodge_activated=0.3
            else:
                dodge_activated=0
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):

                Super_Attacks_Performed = input("Enter Number of normal/non-unit-super 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter normal/non-unit 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of normal/non-unit-super 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter normal/non-unit 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of normal/non-unit-super 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter normal/non-unit 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of normal/non-unit-super 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter normal/non-unit 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+ 1.8 +float(support)) * float(defense_input)  *(1+float(Leader_Skill)) *  (1+dodge_activated) *  (1+float(Support_from_Super))

            print("Defense: " + str(defense))
        else:
            print("Character information not found.")
    elif character_id == "1022861":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            dodge_activated=input("Enter number of Universal Survival Saga Allies on the team(1%- Type 1, 2-Type 2) : ")
            dodge_activated=int(dodge_activated)
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):

                Super_Attacks_Performed = input("Enter Number of normal/non-unit-super 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter normal/non-unit 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of normal/non-unit-super 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter normal/non-unit 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of normal/non-unit-super 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter normal/non-unit 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of normal/non-unit-super 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter normal/non-unit 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+1.3+ int(dodge_activated)  *0.06+0.4+float(support)) * float(defense_input)  *(1+float(Leader_Skill)) *  (1) *  (1+ float(Support_from_Super)+Stack_Defense + int(UltraOrUnitSuper)*0.2)

            print("Defense: " + str(defense))
        else:
            print("Character information not found.")
    elif character_id == "1022011":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            dodge_activated=input("Enter number of movie hero allies on the team (1- Type 1, 2 - Type 2) : ")
            dodge_activated1= input("Enter whether there is an ally whose name includes Tapion on the Turn (Yes- Type 1, No - Type 0) : ")
            if (int(dodge_activated1)==1):
                dodge_activated1=1
            else:
                dodge_activated1=0
            if(dodge_activated1==1):
                Unit_Super_Attacks_Performed= 0.5
                support1=0.4
            else:
                Unit_Super_Attacks_Performed= 0
                support1=0
            dodge_activated2= input("Enter whether there is a movie bosses enemy (Yes- Type 1, No - Type 0) : ")
            if (int(dodge_activated2)==1):
                support1=0.4
            else:
                support1=0

            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):

                Super_Attacks_Performed = input("Enter Number of normal/non-unit-super 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter normal/non-unit 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of normal/non-unit-super 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter normal/non-unit 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of normal/non-unit-super 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter normal/non-unit 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of normal/non-unit-super 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter normal/non-unit 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+ 1.2+int(dodge_activated)*0.15 + support1 +float(support)) * float(defense_input)  *(1+float(Leader_Skill)) *  (1+1) *  (1+ int(UltraOrUnitSuper)*0.5 + float(Support_from_Super) + int(Super_Attacks_Performed)*0.3)

            print("Defense: " + str(defense))
        else:
            print("Character information not found.")
    elif character_id == "1019101":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            dodge_activated=input("Enter number of Team Bardock allies on the team (1- Type 1, 2 - Type 2) : ")
            if(int(dodge_activated)>=5):
                dodge_activated=1
            else:
                dodge_activated=int(dodge_activated)*0.2
            dodge_activated1= input("Enter whether there is an Team Bardock Category ally on the Turn (Yes- Type 1, No - Type 0) : ")
            if (int(dodge_activated1)==1):
                dodge_activated1=0.5
            else:
                dodge_activated1=0
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):

                Super_Attacks_Performed = input("Enter Number of normal/non-unit-super 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter normal/non-unit 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of normal/non-unit-super 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter normal/non-unit 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of normal/non-unit-super 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter normal/non-unit 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of normal/non-unit-super 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter normal/non-unit 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+ 1.7+dodge_activated1+dodge_activated+float(support)) * float(defense_input)  *(1+float(Leader_Skill)) *  (1) *  (1+ int(UltraOrUnitSuper)*0.5 + float(Support_from_Super) + int(Super_Attacks_Performed)*0.5)

            print("Defense: " + str(defense))
        else:
            print("Character information not found.")
    elif character_id == "1025231":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            dodge_activated= input("Enter whether there target enemy is in ATK Down or DEF Down status (Yes- Type 1, No - Type 0) : ")
            dodge_activated1= input("Enter whether there is a ally whose name includes Paikuhan on the team (Yes- Type 1, No - Type 0) : ")
            dodge_activated2= input("Enter how many super class allies on the team (1- Type 1, 2 - Type 2) : ")
            if (int(dodge_activated1)==1):
                dodge_activated1=1
            else:
                dodge_activated1=0


            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):

                Super_Attacks_Performed = input("Enter Number of normal/non-unit-super 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter normal/non-unit 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of normal/non-unit-super 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter normal/non-unit 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of normal/non-unit-super 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter normal/non-unit 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of normal/non-unit-super 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter normal/non-unit 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+ 1.04+ int(dodge_activated)*1.04 + int(dodge_activated2)*0.1 +float(support)) * float(defense_input)  *(1+float(Leader_Skill)) *  (1) *  (1+ int(UltraOrUnitSuper)*0.5 + float(Support_from_Super) + int(Super_Attacks_Performed)*0.3)

            print("Defense: " + str(defense))
        else:
            print("Character information not found.")
    elif character_id == "1028921":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            dodge_activated= input("Enter whether there are 2 or more other category allies of either DB Saga or Warriors Raised on Earth and whether its the first 4 turns(No - Type 0, Yes - Type 1) : ")
            dodge_activated1= input("Enter how many DB Saga Characters on the team (1- Type 1, 2 - Type 2) : ")

            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+ 0.77+ int(dodge_activated1) * 0.17 + int(dodge_activated) * 0.82 +float(support)) * float(defense_input)  *(1+float(Leader_Skill)) *  (1 +0.77) *  (1 + int(UltraOrUnitSuper)* 0.5 +float(Stack_Defense) +  float(Support_from_Super) + 0.5*int(Super_Attacks_Performed))

            print("Defense: " + str(defense))
        else:
            print("Character information not found.")
    elif character_id == "1020841":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            dodge_activated= input("Enter whether there is is another Dragon Ball Heroes Category ally attacking in the same turn(No - Type 0, Yes - Type 1) : ")
            dodge_activated=int(dodge_activated)*1
            dodge_activated1= input("Enter whether additional DEF +150% for 5 turns after receiving an attack is active(No - Type 0, Yes - Type 1) : ")
            dodge_activated1=int(dodge_activated1)*1.5
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+ 1.5+dodge_activated +float(support)) * float(defense_input)  *(1+float(Leader_Skill)) *  (1 +dodge_activated1) *  (1+ float(Support_from_Super) + 0.3*int(Super_Attacks_Performed))

            print("Defense: " + str(defense))
        else:
            print("Character information not found.")
    elif character_id == "1020831":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            dodge_activated= input("Enter whether there are 3 or more Crossover Category allies on the team(No - Type 0, Yes - Type 1) : ")
            dodge_activated=int(dodge_activated)*1.2
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+ int(dodge_activated) +float(support)) * float(defense_input)  *(1+float(Leader_Skill)) *  (1 +1.6) *  (1+ float(Support_from_Super) + 0.3*int(Super_Attacks_Performed))

            print("Defense: " + str(defense))
        else:
            print("Character information not found.")
    elif character_id == "1028721":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            dodge_activated= input("Enter how many Special Pose Allies on the team? (1- Type 1, 2 - Type 2) : ")
            if (int(dodge_activated)>=5):
                dodge_activated=1
            else:
                dodge_activated=0
            dodge_activated1= input("Enter whether character obtained a Ki Sphere other than an Int Ki Sphere during the turn (Yes- Type 1, No - Type 0) : ")
            if (int(dodge_activated1)==1):
                dodge_activated1=1
            else:
                dodge_activated1=0

            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+ 1.5 + int(dodge_activated) * 1.5 +float(support) + float(dodge_activated1)*0.5) * float(defense_input)  *(1+float(Leader_Skill)) *  (1 ) *  (1 + int(UltraOrUnitSuper)* 1  +float(Stack_Defense) +  float(Support_from_Super) + 0.5*int(Super_Attacks_Performed))

            print("Defense: " + str(defense))
        else:
            print("Character information not found.")
    elif character_id == "4020101":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")

            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks="True"
            Which_Super_Stacks= 5
            Stack_Defense= 0
            Stack_Defense1= 0
            UltraOrUnitSuper1=0
            No_of_Turns=99
            if (Character_Stacks=='True'):
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks in pre-transformed state : ")
                    Stacks_Multiplier=0.5
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    Float_Character = input("Did u float Character off in post-transformed state?(Yes - Type 1, No - Type 0 )  : ")
                    Float_Character1 = input("Is this character's first turn after transforming?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1 or int(Float_Character1)==1):
                        Stack_Defense1=0
                    else:
                        Stacks1= input("Enter Number of Stacks in Previous turn if Character was transformed in previous turn : ")
                        Stack_Defense1= int(Stacks1)*0.5
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stacks_Multiplier=0.5
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+ 2.58 +float(support)) * float(defense_input)  *(1+float(Leader_Skill)) *  (1 ) *  (1 +float(Stack_Defense1) +float(Stack_Defense)+  float(Support_from_Super) + 0.5* int(Super_Attacks_Performed))

            print("Defense: " + str(defense))
        else:
            print("Character information not found.")
    elif character_id == "4019611":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")

            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks="True"
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks =0
            if (Character_Stacks=='True'):
                Stacks_Multiplier = 0.5
                No_of_Turns = 3
                if (int(No_of_Turns)==3):
                    Stacks1= input("Is this Character's first appearance (Yes- Type 1, No- Type 0 : ")
                    if (int(Stacks1)==1):
                        Stacks=input("How many Stacks in Pre-Transformed Evil Buu Last Turn (1- Type 1, 2- Type 2 : ")
                        Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                        if (int(Float_Character)==1):
                            Stack_Defense= 0
                        else:
                            Stack_Defense=int(Stacks) *0.3
                    else:
                        Stacks=input("How many Stacks in Post-Transformed Super Buu Last Turn (1- Type 1, 2- Type 2 : ")
                        Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                        if (int(Float_Character)==1):
                            Stack_Defense= 0
                        else:
                            Stack_Defense=int(Stacks) *0.5
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+ 2  +float(support)) * float(defense_input)  *(1+float(Leader_Skill)) *  (1 ) *  (1  +float(Stack_Defense)+ float(Support_from_Super) +0.5*  int(Super_Attacks_Performed))

            print("Defense: " + str(defense))
        else:
            print("Character information not found.")
    elif character_id == "1020091":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            lol11 = input("Is this Character's First Turn?(Yes - Type 1, No - Type 0 )  : ")
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")

            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = "True"
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = "0"
            if (Character_Stacks=='True'):
                Stacks_Multiplier = 0.5
                No_of_Turns = 99
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+ 1.58 +int(lol11)*0.58  +float(support)) * float(defense_input)  *(1+float(Leader_Skill)) *  (1 ) *  (1  +float(Stack_Defense)+  float(Support_from_Super) + 0.5*int(Super_Attacks_Performed))

            print("Defense: " + str(defense))
        else:
            print("Character information not found.")
    elif character_id == "4019601":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            dodge_activated1= input("Enter whether  there are Majin Power Category enemies (Yes- Type 1, No - Type 0) : ")
            if(int(dodge_activated1)==1):
                dodge_activated1=0
            else:
                dodge_activated1=1

            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks="True"
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = 0
            if (Character_Stacks=='True'):
                Stacks_Multiplier = 0.3
                No_of_Turns = 3
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+ 1.5 + int(dodge_activated1) * 0.5 +float(support)) * float(defense_input)  *(1+float(Leader_Skill)) *  (1 ) *  (1  +float(Stack_Defense)+  float(Support_from_Super) + 0.3* int(Super_Attacks_Performed))

            print("Defense: " + str(defense))
        else:
            print("Character information not found.")
    elif character_id == "1019591":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            dodge_activated1= input("Enter whether  there are Majin Power Category enemies (Yes- Type 1, No - Type 0) : ")
            if(int(dodge_activated1)==1):
                dodge_activated1=0
            else:
                dodge_activated1=1

            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+ 1.5 + int(dodge_activated1) * 0.5 +float(support)) * float(defense_input)  *(1+float(Leader_Skill)) *  (1 ) *  (1  +  float(Support_from_Super) + 0.3*int(Super_Attacks_Performed))

            print("Defense: " + str(defense))
        else:
            print("Character information not found.")
    elif character_id == "1021011":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            dodge_activated1= input("Enter whether  target enemy is in ATK Down status, in DEF Down status, stunned or the target enemy's Super Attack is sealed (Yes- Type 1, No - Type 0) : ")

            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+ 1.5 + int(dodge_activated1) * 0.5 +float(support)) * float(defense_input)  *(1+float(Leader_Skill)) *  (1 +0.5) *  (1 + int(UltraOrUnitSuper)* 0.5  +  float(Support_from_Super) +0.3* int(Super_Attacks_Performed))

            print("Defense: " + str(defense))
        else:
            print("Character information not found.")
    elif character_id == "1025801":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            dodge_activated= input("Enter whether there 5 or more Warriors Raised on Earth Category allies on the team and its the character's first 4 turns (Yes- Type 1, No - Type 0) : ")
            if (int(dodge_activated)==1):
                dodge_activated=1.5
            else:
                dodge_activated=0
            hits = input("Enter number of attacks performed so far in battle(1- Type 1, 2- Type 2) : ")
            if(int(hits)>=5):
                hits=1.5
            else:
                hits = int(hits)* 0.3
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+ 1.5 +dodge_activated +float(support)) * float(defense_input)  *(1+float(Leader_Skill)) *  (1 +hits) *  (1+float(Support_from_Super))

            print("Defense: " + str(defense))
        else:
            print("Character information not found.")
    elif character_id == "1028891":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            dodge_activated= input("Enter whether its the first 2 turns and whether there are another 2 or more Majin Buu Saga Category allies on the team upon the character's entry (Yes- Type 1, No - Type 0) : ")
            dodge_activated1 = input("Enter amount of Ki Character has(8- Type 8, 12-Type 12, 24-Type 24) : ")
            if (int(dodge_activated1)>=12 and int(dodge_activated1)<=17):
                dodge_activated1=0.58
            elif(int(dodge_activated1)>=18):
                dodge_activated1=0.58 + 0.58
            else:
                dodge_activated1=0
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+ 1.8 +int(dodge_activated)* 0.58 +float(support)) * float(defense_input)  *(1+float(Leader_Skill)) *  (1 +dodge_activated1) *  (1 + int(UltraOrUnitSuper)* 0.3  +  float(Support_from_Super) + 0.3*int(Super_Attacks_Performed))

            print("Defense: " + str(defense))
        else:
            print("Character information not found.")
    elif character_id == "1014501":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            dodge_activated1= input("Enter amount of hp you were at during start of turn (10%- Type 10, 70%-Type 70) : ")
            if (int(dodge_activated1)<=59):
                dodge_activated1=0.2

            else:
                dodge_activated1=0
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = "False"
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+ 0.89 +dodge_activated1 +float(support)) * float(defense_input)  *(1+float(Leader_Skill)) *  (1 ) *  (1   +  float(Support_from_Super) + int(UltraOrUnitSuper)*0.3 )


            print("Defense: " + str(defense))
        else:
            print("Character information not found.")
    elif character_id == "1009921":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            dodge_activated1= input("Enter amount of hp you were at during start of turn (10%- Type 10, 70%-Type 70) : ")
            if (int(dodge_activated1)<=49):
                dodge_activated1=1

            else:
                dodge_activated1=0.8
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = "False"
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1 +dodge_activated1 +float(support)) * float(defense_input)  *(1+float(Leader_Skill)) *  (1 ) *  (1   +  float(Support_from_Super) + int(UltraOrUnitSuper)*0 )


            print("Defense: " + str(defense))
    elif character_id == "1003311":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            dodge_activated1= input("Enter amount of hp you were at during start of turn (10%- Type 10, 70%-Type 70) : ")
            if (int(dodge_activated1)>=70):
                dodge_activated1=0.7
            elif(int(dodge_activated1)<=69):
                dodge_activated1=0.5
            else:
                dodge_activated1=0
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = "False"
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)



            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+ 1.5 +dodge_activated1 +float(support)) * float(defense_input)  *(1+float(Leader_Skill)) *  (1 +2.5) *  (1   +  float(Support_from_Super) )


            print("Defense: " + str(defense))
    elif character_id == "1023061":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            dodge_activated= input("Enter number of turns from this character's start of turn (3- Type 3, 4 - Type 4) : ")
            
            dodge_activated1= input("Enter amount of hp you were at during start of turn (10%- Type 10, 70%-Type 70) : ")
            if (int(dodge_activated)<=5):
                dodge_activated=0
            elif(int(dodge_activated)>=6 and int(dodge_activated1)<=59):
                
                dodge_activated=0.59
            else:
                dodge_activated=0
            dodge_activated1=float(dodge_activated1)/100 * 2

                
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = "False"
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)



            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+ 1.5 +dodge_activated1 +dodge_activated+float(support)) * float(defense_input)  *(1+float(Leader_Skill)) *  (1) *  (1   +  float(Support_from_Super) )


            print("Defense: " + str(defense))
    elif character_id == "1023091":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            dodge_activated= input("Enter slot character is in (3- Type 3) : ")
            

            if (int(dodge_activated)<=2):
                dodge_activated=0.6
            else:
                dodge_activated=0


                
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = "False"
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)

            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+ 1.7 +dodge_activated +float(support)) * float(defense_input)  *(1+float(Leader_Skill)) *  (1 +2.5) *  (1   +  float(Support_from_Super)+int(Super_Attacks_Performed)*0.3+ int(UltraOrUnitSuper)*0.5 )


            print("Defense: " + str(defense))
    elif character_id == "1021811":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Videl gets DEF - 20% on his active so type -0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            dodge_activated= input("Enter slot character is in (3- Type 3) : ")
            

            if (int(dodge_activated)==3):
                dodge_activated=1.58
            else:
                dodge_activated=0
            dodge_activated1= input("Enter no of attacks evaded by this character so far (3- Type 3) : ")
            if (int(dodge_activated1)>=2):
                dodge_activated1=0.6
            else:
                dodge_activated1=int(dodge_activated1)*0.3

            dodge_activated2 = input("Did This Character Receive an Attack in this turn? (Yes - Type 1, No - Type 0 ) : ")
            dodge_activated2=int(dodge_activated2)*0.58
                
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = "False"
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)

            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+ 1.8 +dodge_activated +float(support)) * float(defense_input)  *(1+float(Leader_Skill)) *  (1 +dodge_activated1+dodge_activated2) *  (1   +  float(Support_from_Super)+int(Super_Attacks_Performed)*0.5 )


            print("Defense: " + str(defense))
    elif character_id == "1022681":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Videl gets DEF - 20% on his active so type -0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            dodge_activated= input("Enter no of attacks performed by this character so far (3- Type 3) : ")
            

            if (int(dodge_activated)>=2):
                dodge_activated=1.1
            else:
                dodge_activated=int(dodge_activated)*0.55
            
                
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = "False"
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)

            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+2.2 +float(support)) * float(defense_input)  *(1+float(Leader_Skill)) *  (1 +dodge_activated) *  (1   +  float(Support_from_Super)+int(Super_Attacks_Performed)*0.5 )


            print("Defense: " + str(defense))
    elif character_id == "1029331":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Videl gets DEF - 20% on his active so type -0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            dodge_activated= input("Enter no of DB Saga Category Allies on the team excluding this character (3- Type 3) : ")
            

            if (int(dodge_activated)>=4):
                dodge_activated=2
            else:
                dodge_activated=0
            
                
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = "False"
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)

            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+ 2 +dodge_activated +float(support)) * float(defense_input)  *(1+float(Leader_Skill)) *  (1 +0.5) *  (1   +  float(Support_from_Super)+int(Super_Attacks_Performed)*0.3+Stack_Defense )


            print("Defense: " + str(defense))
    elif character_id == "1022721":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: STR Future gohan's active gives himself 20% DEF on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
  
            
            dodge_activated1 = input("Is the buff of 'a Great Chance of an additional 40% ATK and DEF on super' active on this character? (Yes - Type 1, No - Type 0 ) : ")
            dodge_activated1=int(dodge_activated1)*0.4
            dodge_activated2 = input("Is the opponent debuffed at all? (Yes - Type 1, No - Type 0 ) : ")
            dodge_activated2=int(dodge_activated2)*0.4
            dodge_activated3 = input("Is there another peppy gal category ally on the team other than this character? (Yes - Type 1, No - Type 0 ) : ")
            dodge_activated3=int(dodge_activated3)*1.4            
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = "False"
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)

            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+ 1.4 +dodge_activated3 +float(support)) * float(defense_input)  *(1+float(Leader_Skill)) *  (1 +dodge_activated1+dodge_activated2+1.4) *  (1   +  float(Support_from_Super)+int(Super_Attacks_Performed)*0.5 )


            print("Defense: " + str(defense))
    elif character_id == "1015311":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            dodge_activated1= input("Enter amount of hp you were at during start of turn (10%- Type 10, 70%-Type 70) : ")
            if (int(dodge_activated1)<=80):
                dodge_activated1=0.5
            else:
                dodge_activated1=0
            dodge_activated= input("Enter whether there is another Movie Heroes Category ally attacking in the same turn (Yes - Type 1, No - Type 0) : ")
            if (int(dodge_activated)==1):
                dodge_activated=0.5
            else:
                dodge_activated=0
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = "False"
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)

            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+ 2+dodge_activated +dodge_activated1 +float(support)) * float(defense_input)  *(1+float(Leader_Skill)) *  (1) *  (1   +  float(Support_from_Super)+int(Super_Attacks_Performed)*0.5 )


            print("Defense: " + str(defense))
        else:
            print("Character information not found.")
    elif character_id == "1014131":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            dodge_activated1= input("Enter amount of hp you were at during start of turn (10%- Type 10, 70%-Type 70) : ")
            dodge_activated1=(int(dodge_activated1)/100)*1
            dodge_activated2 = input("Enter Whether all allies attacking in the same turn are Super Class characters (Yes - Type 1, No - Type 0) : ")
            dodge_activated2=int(dodge_activated2)*0.59
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = "False"
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+ 1.59+dodge_activated2 +dodge_activated1 +float(support)) * float(defense_input)  *(1+float(Leader_Skill)) *  (1) *  (1   +  float(Support_from_Super) +int(Super_Attacks_Performed)*0.3)


            print("Defense: " + str(defense))
        else:
            print("Character information not found.")
    elif character_id == "1024931":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            dodge_activated1= input("Enter amount of hp you were at during start of turn (10%- Type 10, 70%-Type 70) : ")
            dodge_activated1=float(dodge_activated1)/100 
            dodge_activated2= input("Enter amount of attacks received by this character (1- Type 1, 2-Type 2) : ")
            dodge_activated2=int(dodge_activated2)*0.15
            if (int(dodge_activated2)>=0.6):
                dodge_activated2=0.6
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = "False"
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)

            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+ 1.3 +dodge_activated1 +float(support)) * float(defense_input)  *(1+float(Leader_Skill)) *  (1 +dodge_activated2) *  (1   +  float(Support_from_Super) +int(Super_Attacks_Performed)*0.3+int(UltraOrUnitSuper)*0.3)

            print("Defense: " + str(defense))
        else:
            print("Character information not found.")
    elif character_id == "1017901":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            dodge_activated1= input("Enter amount of hp you were at during start of turn (10%- Type 10, 70%-Type 70) : ")
            dodge_activated1=(float(dodge_activated1)/100)* 1.2
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = "False"
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)

            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+ 1.2 +dodge_activated1 +float(support)) * float(defense_input)  *(1+float(Leader_Skill)) *  (1 +0.5) *  (1   +  float(Support_from_Super) +int(Super_Attacks_Performed)*0.3)


            print("Defense: " + str(defense))
    elif character_id == "1014131":
        if passive:

            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            ki_Spheres_obtained = input("Enter number of Ki Spheres Obtained : ")
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            dodge_activated1= input("Enter amount of hp you were at during start of turn (10%- Type 10, 70%-Type 70) : ")
            dodge_activated= input("Enter number of super class allies on the turn including himself (1- Type 1, 3-Type 3) : ")
            if (int(dodge_activated)<3):
                dodge_activated= 0
            else:
                dodge_activated=0.59

            dodge_activated1=(float(dodge_activated1))/100
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = "False"
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)



            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+ 1.59 +dodge_activated1 +float(support)+dodge_activated) * float(defense_input)  *(1+float(Leader_Skill)) *  (1) *  (1   +int(Super_Attacks_Performed) *0.3+ float(Support_from_Super) )


            print("Defense: " + str(defense))
        else:
            print("Character information not found.")
    elif character_id == "1015051":
        if passive:

            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            ki_Spheres_obtained = input("Enter number of Ki Spheres Obtained : ")
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            dodge_activated1= input("Enter amount of hp you were at during start of turn (10%- Type 10, 70%-Type 70) : ")
            dodge_activated=input("Enter Whether character received an attack this turn(Yes- Type 1, No - Type 0) : ")
            dodge_activated=int(dodge_activated)*0.6
            dodge_activated1=(float(dodge_activated1))/100 *1.2
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = "False"
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)



            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+ 1.2 +dodge_activated1 +float(support)) * float(defense_input)  *(1+float(Leader_Skill)) *  (1+dodge_activated) *  (1   + float(Support_from_Super) )


            print("Defense: " + str(defense))
    elif character_id == "1012161":
        if passive:
            lol=0
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            ki_Spheres_obtained = input("Enter number of Ki Spheres Obtained : ")
            if(int(ki_Spheres_obtained)>=5):
                lol=0.5
            else:
                lol=0
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            dodge_activated1= input("Enter amount of hp you were at during start of turn (10%- Type 10, 70%-Type 70) : ")
            dodge_activated= input("Enter number of extreme class allies on the team (1- Type 1, 3-Type 3) : ")
            if (int(dodge_activated)>5):
                dodge_activated= 0.5
            else:
                dodge_activated=int(dodge_activated)*0.1

            dodge_activated1=(100- float(dodge_activated1))/100
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = "False"
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)

            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (lol+1+ 1.5 +dodge_activated1 +float(support)+dodge_activated) * float(defense_input)  *(1+float(Leader_Skill)) *  (1) *  (1   +  float(Support_from_Super)+int(Super_Attacks_Performed)*0.3+int(UltraOrUnitSuper)*0.3 )


            print("Defense: " + str(defense))
        else:
            print("Character information not found.")

    elif character_id == "1013321":
        if passive:
            lol=0
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            ki_Spheres_obtained = input("Enter number of enemies u are facing(1-Type 1, 2 - Type 2) : ")
            if(int(ki_Spheres_obtained)>=2):
                lol=1.8
            else:
                lol=0

            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = "False"
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)

            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (lol+1+ 1.8 +float(support)) * float(defense_input)  *(1+float(Leader_Skill)) *  (1 ) *  (1   +  float(Support_from_Super) + int(Super_Attacks_Performed)*0.2)


            print("Defense: " + str(defense))
        else:
            print("Character information not found.")
    elif character_id == "1024951":
        if passive:
            lol=0
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            ki_Spheres_obtained = input("Enter number of enemies u are facing(1-Type 1, 2 - Type 2) : ")
            if(int(ki_Spheres_obtained)>=2):
                lol=1
            else:
                lol=0.5
            ki_Spheres_obtained1 = input("Enter whether buff of an additional ATK & DEF +50% and medium chance of performing a critical hit for 3 turns after receiving an attack is active(Yes-Type 1, No - Type 0) : ")
            if(int(ki_Spheres_obtained1)==1):
                lol1=0.5
            else:
                lol1=0
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = "False"
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)

            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (lol+1+ 2.3 +float(support)) * float(defense_input)  *(1+float(Leader_Skill)) *  (1 + lol1) *  (1   +  float(Support_from_Super) + int(Super_Attacks_Performed)*0.3)


            print("Defense: " + str(defense))
        else:
            print("Character information not found.")
    elif character_id == "1027951":
        if passive:
            lol=0
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            ki_Spheres_obtained = input("Enter number of enemies u are facing(1-Type 1, 2 - Type 2) : ")
            if(int(ki_Spheres_obtained)>=2):
                lol=1.5
            else:
                lol=1

            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            dodge_activated= input("Enter number of Defenders of Justice allies on the team (1- Type 1, 3-Type 3) : ")
            if(int(dodge_activated)==1):
                dodge_activated=1
            else:
                dodge_activated=int(dodge_activated)*0.07
            ki_Spheres_obtained1 = input("Enter whether attacking extreme class enemies (Yes-Type 1, No - Type 0) : ")
            if(int(ki_Spheres_obtained1)==1):
                ki_Spheres_obtained1=1
            else:
                ki_Spheres_obtained1=0
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = "False"
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)

            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (lol+1+ 1+ki_Spheres_obtained1 +dodge_activated +float(support)) * float(defense_input)  *(1+float(Leader_Skill)) *  (1 ) *  (1   +  float(Support_from_Super) + int(Super_Attacks_Performed)*0.3)


            print("Defense: " + str(defense))
        else:
            print("Character information not found.")
    elif character_id == "1021851":
        if passive:
            lol=0
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            dodge_activated= input("Enter number of Defenders of Justice allies on the team (1- Type 1, 3-Type 3) : ")

            dodge_activated=int(dodge_activated)*0.1
            ki_Spheres_obtained1 = input("Enter whether attacking extreme class enemies (Yes-Type 1, No - Type 0) : ")
            if(int(ki_Spheres_obtained1)==1):
                ki_Spheres_obtained1=0.58
            else:
                ki_Spheres_obtained1=0
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = "False"
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            

            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
            if (int(UltraOrUnitSuper)==1):
                UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+ 1.58 +dodge_activated +float(support)) * float(defense_input)  *(1+float(Leader_Skill)) *  (1+ki_Spheres_obtained1+0.58 ) *  (1   +  float(Support_from_Super) + int(Super_Attacks_Performed)*0.5)


            print("Defense: " + str(defense))

    elif character_id == "1022221":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            dodge_activated1= input("Enter whether there is a heavenly events category ally attacking in the same turn (Yes- Type 1, No - Type 0) : ")
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+ 1.58 +0.58 + int(dodge_activated1) * 0.58+float(support)) * float(defense_input)  *(1+float(Leader_Skill)) *  (1 +0.5) *  (1 + int(UltraOrUnitSuper)* 0.5  +  float(Support_from_Super) + 0.3*int(Super_Attacks_Performed))

            print("Defense: " + str(defense))
        else:
            print("Character information not found.")
    elif character_id == "1011081":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            dodge_activated1= input("Enter number of heavenly events category ally attacking in the same turn excluding this character (1- Type 1, 0 - Type 0) : ")
            dodge_activated1=int(dodge_activated1)*0.5
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
            if (int(UltraOrUnitSuper)==1):
                UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

           

            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+ 1  +dodge_activated1+float(support)) * float(defense_input)  *(1+float(Leader_Skill)) *  (1 +0.5) *  (1  +  float(Support_from_Super) + 0.3*int(Super_Attacks_Performed))

            print("Defense: " + str(defense))
    elif character_id == "1005311":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            dodge_activated= input("Enter number of Realm of Gods category ally attacking in the same turn excluding this character (1- Type 1, 0 - Type 0) : ")
            dodge_activated=int(dodge_activated)*0.6
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
            if (int(UltraOrUnitSuper)==1):
                UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

           

            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+ 1.6+dodge_activated  +float(support)) * float(defense_input)  *(1+float(Leader_Skill)) *  (1) *  (1  +  float(Support_from_Super)+int(Super_Attacks_Performed)*0.3 )

            print("Defense: " + str(defense))
    elif character_id == "1005321":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            dodge_activated= input("Enter number of Realm of Gods category ally attacking in the same turn excluding this character (1- Type 1, 0 - Type 0) : ")
            dodge_activated=int(dodge_activated)*0.6
            dodge_activated1= input("Enter number of Bond of Master and Disciple category ally attacking in the same turn excluding this character (1- Type 1, 0 - Type 0) : ")
            dodge_activated1=int(dodge_activated1)*0.6
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
 

            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+ dodge_activated  +dodge_activated1+float(support)) * float(defense_input)  *(1+float(Leader_Skill)) *  (1 +1.2) *  (1  +  float(Support_from_Super) )

            print("Defense: " + str(defense))
    elif character_id == "1013211":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            dodge_activated= input("Enter number of turns character has been on rotation (1- Type 1, 2 - Type 2) : ")
            if(int(dodge_activated)>3):
                dodge_activated=0.6
            else:
                dodge_activated=int(dodge_activated)*0.2
            dodge_activated1= input("Enter amount of HP at start of turn (100%- Type 100, 20% - Type 20) : ")
            dodge_activated1=(100-float(dodge_activated1))/100 * 1.2
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")



            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")



            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+ 1.2 +dodge_activated1+float(support)) * float(defense_input)  *(1+float(Leader_Skill)) *  (1+dodge_activated) *  (1 + Stack_Defense+ float(Support_from_Super) + 0.3*int(Super_Attacks_Performed))

            print("Defense: " + str(defense))
        else:
            print("Character information not found.")
    elif character_id == "1006671":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            dodge_activated1= input("Enter amount of HP at start of turn (100%- Type 100, 20% - Type 20) : ")
            if(int(dodge_activated1)<=79):
                dodge_activated1=0.4
            else:
                dodge_activated1=1.2
                
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")



            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")



            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+dodge_activated1+float(support)) * float(defense_input)  *(1+float(Leader_Skill)) *  (1) *  (1 + float(Support_from_Super) + 0*int(Super_Attacks_Performed))

            print("Defense: " + str(defense))
    elif character_id == "1006691":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            dodge_activated1= input("Enter amount of HP at start of turn (100%- Type 100, 20% - Type 20) : ")
            if(int(dodge_activated1)<=79):
                dodge_activated1=0.4
            else:
                dodge_activated1=1.2
                
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")



            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")



            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+dodge_activated1+float(support)) * float(defense_input)  *(1+float(Leader_Skill)) *  (1) *  (1 + float(Support_from_Super) + 0*int(Super_Attacks_Performed))

            print("Defense: " + str(defense))
    elif character_id == "1012961":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            dodge_activated1= input("Enter amount of HP at start of turn (100%- Type 100, 20% - Type 20) : ")
            dodge_activated1=(100-float(dodge_activated1))/100 * 1.8
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")



            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")



            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+ 1.8 +dodge_activated1+float(support)) * float(defense_input)  *(1+float(Leader_Skill)) *  (1) *  (1 + Stack_Defense+ float(Support_from_Super) + 0.4*int(Super_Attacks_Performed))

            print("Defense: " + str(defense))
        else:
            print("Character information not found.")
    elif character_id == "1016311":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            dodge_activated1= input("Enter amount of HP at start of turn (100%- Type 100, 20% - Type 20) : ")
            dodge_activated1=(float(dodge_activated1))/100 * 1
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")



            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")



            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+1+0.2+dodge_activated1+float(support)) * float(defense_input)  *(1+float(Leader_Skill)) *  (1) *  (1 + float(Support_from_Super) + 0.3*int(Super_Attacks_Performed))

            print("Defense: " + str(defense))
        else:
            print("Character information not found.")
    elif character_id == "1013861":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            dodge_activated1= input("Enter amount of HP at start of turn (100%- Type 100, 20% - Type 20) : ")
            dodge_activated1=(100-float(dodge_activated1))/100 * 1.58
            dodge_activated= input("Enter whether your team has a Future Saga Category ally whose name includes Trunks attacking in the same turn (Yes- Type 1, No - Type 0) : ")
            dodge_activated=int(dodge_activated)*1.2
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")



            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")



            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+dodge_activated+dodge_activated1+float(support)) * float(defense_input)  *(1+float(Leader_Skill)) *  (1) *  (1 + float(Support_from_Super) + 0.5*int(Super_Attacks_Performed))

            print("Defense: " + str(defense))
        else:
            print("Character information not found.")
    elif character_id == "1027371":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            dodge_activated1= input("Enter whether the buff of additional DEF +50% and reduces damage received by 30% within the same turn every time the character performs a Super Attack 2 times in battle is active (Yes- Type 1, No - Type 0) : ")
            if(int(dodge_activated1)==1):
                dodge_activated1=0.5
            else:
                dodge_activated1=0
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")



            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")



            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+1.5+float(support)+0.5) * float(defense_input)  *(1+float(Leader_Skill)) *  (1+dodge_activated1+0.5) *  (1 + float(Support_from_Super) + 0.3*int(Super_Attacks_Performed))

            print("Defense: " + str(defense))
        else:
            print("Character information not found.")
    elif character_id == "1027391":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            dodge_activated1= input("Enter whether there is a Super Or Extreme Class Enemy at start of character's attacking turn (Super- Type 1, Extreme - Type 0) : ")
            if(int(dodge_activated1)==1):
                dodge_activated1=0.5
            else:
                dodge_activated1=0
            dodge_activated= input("Enter how many turns this character has faced a Super Class Enemy (1- Type 1, 2 - Type 2) : ")
            if(int(dodge_activated)>=4):
                dodge_activated=2
            else:
                dodge_activated=int(dodge_activated)*0.5
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")



            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")



            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+1.5+float(support)+dodge_activated1+0.5) * float(defense_input)  *(1+float(Leader_Skill)) *  (1+dodge_activated) *  (1 + float(Support_from_Super) + 0.3*int(Super_Attacks_Performed))

            print("Defense: " + str(defense))
        else:
            print("Character information not found.")
    elif character_id == "1013261":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            
            dodge_activated= input("Enter number of Ki Spheres Obtained (1- Type 1, 2 - Type 2) : ")

            dodge_activated=int(dodge_activated)*0.12
            dodge_activated1= input("Enter how many Giant Form Category allies on the team (1- Type 1, 2 - Type 2) : ")

            dodge_activated1=int(dodge_activated1)*0.01
            if (dodge_activated1>=0.03):
                dodge_activated1=0.03
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")



            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")



            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+float(support)+dodge_activated1+dodge_activated) * float(defense_input)  *(1+float(Leader_Skill)) *  (1) *  (1 + float(Support_from_Super) + 0*int(Super_Attacks_Performed))

            print("Defense: " + str(defense))
    elif character_id == "1015871":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            
            dodge_activated= input("Enter number of Giant Form Category ally on the team (1- Type 1, 2 - Type 2) : ")
            if(int(dodge_activated)>=3):
                dodge_activated=6000
            else:
                dodge_activated=int(dodge_activated)*2000
                  
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")



            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")



            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+float(support)) * float(defense_input)  *(1+float(Leader_Skill)) *  (1) *  (1 + float(Support_from_Super) + 0*int(Super_Attacks_Performed)) +dodge_activated +7000

            print("Defense: " + str(defense))
    elif character_id == "1015871":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            
            dodge_activated= input("Enter how many turns from this character's start of turn (1- Type 1, 2 - Type 2) : ")
            if(int(dodge_activated)>=5):
                dodge_activated=0
            else:
                dodge_activated=0.4
            dodge_activated1= input("Enter how many attacks performed by this character (1- Type 1, 2 - Type 2) : ")
            if(int(dodge_activated1)>=4):
                dodge_activated1=1.2
            else:
                dodge_activated1=int(dodge_activated1) *0.3           
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")



            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")



            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+float(support)+dodge_activated) * float(defense_input)  *(1+float(Leader_Skill)) *  (1+dodge_activated1) *  (1 + float(Support_from_Super) + 0.5*int(Super_Attacks_Performed))

            print("Defense: " + str(defense))
    elif character_id == "1015881":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            
            dodge_activated= input("Enter how many turns from this character's start of turn (1- Type 1, 2 - Type 2) : ")
            if(int(dodge_activated)>=5):
                dodge_activated=0
            else:
                dodge_activated=0.4
            dodge_activated1= input("Enter how many attacks performed by this character (1- Type 1, 2 - Type 2) : ")
            if(int(dodge_activated1)>=6):
                dodge_activated1=1.8
            else:
                dodge_activated1=int(dodge_activated1) *0.3           
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")



            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")



            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+float(support)+dodge_activated) * float(defense_input)  *(1+float(Leader_Skill)) *  (1+dodge_activated1) *  (1 + float(Support_from_Super) + 0*int(Super_Attacks_Performed))

            print("Defense: " + str(defense))
    elif character_id == "1017021":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            dodge_activated1= input("Enter whether there is a Super Or Extreme Class Enemy (Super- Type 1, Extreme - Type 0) : ")
            if(int(dodge_activated1)==1):
                dodge_activated1=1.4
            else:
                dodge_activated1=0.7
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")



            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")



            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+0.7+float(support)) * float(defense_input)  *(1+float(Leader_Skill)) *  (1+dodge_activated1+0.7) *  (1 + float(Support_from_Super) + 0.5*int(Super_Attacks_Performed))

            print("Defense: " + str(defense))
        else:
            print("Character information not found.")
    elif character_id == "1017061":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            dodge_activated1= input("Enter whether there is a Future Saga Category Enemy (Yes- Type 1, No - Type 0) : ")
            dodge_activated1=int(dodge_activated1)*0.8
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")



            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")



            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+1.7+float(support)) * float(defense_input)  *(1+float(Leader_Skill)) *  (1+dodge_activated1) *  (1 + float(Support_from_Super) + 0.3*int(Super_Attacks_Performed))

            print("Defense: " + str(defense))
        else:
            print("Character information not found.")
    elif character_id == "1019281":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            dodge_activated= input("Enter whether your team has a Future Saga Category ally whose name includes Super Saiyan God SS on the team (Yes- Type 1, No - Type 0) : ")
            dodge_activated=int(dodge_activated)*1.5
            dodge_activated1= input("Enter whether there is a Future Saga Category Enemy (Yes- Type 1, No - Type 0) : ")
            dodge_activated1=int(dodge_activated1)*1
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")



            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")



            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+1.5+dodge_activated+dodge_activated1+float(support)) * float(defense_input)  *(1+float(Leader_Skill)) *  (1) *  (1 + float(Support_from_Super) + 0.5*int(Super_Attacks_Performed))

            print("Defense: " + str(defense))
        else:
            print("Character information not found.")
    elif character_id == "1012991":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            dodge_activated1= input("Enter amount of HP at start of turn (100%- Type 100, 20% - Type 20) : ")
            dodge_activated1=(float(dodge_activated1))/100 * 1.2
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")



            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")



            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+ 1.8 +dodge_activated1+float(support)) * float(defense_input)  *(1+float(Leader_Skill)) *  (1) *  (1 +  float(Support_from_Super) + 0.3*int(Super_Attacks_Performed))

            print("Defense: " + str(defense))
        else:
            print("Character information not found.")
    elif character_id == "1016611":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            dodge_activated1= input("Enter amount of HP at start of turn (100%- Type 100, 20% - Type 20) : ")
            dodge_activated1=(float(dodge_activated1))/100 * 1.5
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")



            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")



            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+ 1.5 +dodge_activated1+float(support)) * float(defense_input)  *(1+float(Leader_Skill)) *  (1 +0.5) *  (1 +  float(Support_from_Super) + 0.3*int(Super_Attacks_Performed))

            print("Defense: " + str(defense))
        else:
            print("Character information not found.")
    elif character_id == "1016611":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            dodge_activated1= input("Enter amount of HP at start of turn (100%- Type 100, 20% - Type 20) : ")
            dodge_activated1=(float(dodge_activated1))/100 * 1.5
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")



            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")



            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+ 1.50+dodge_activated1 +float(support)) * float(defense_input)  *(1+float(Leader_Skill)) *  (1 +0.5) *  (1 +  float(Support_from_Super) + 0.3*int(Super_Attacks_Performed))

            print("Defense: " + str(defense))
        else:
            print("Character information not found.")
    elif character_id == "1014491":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")



            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")



            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+ 1 +float(support)) * float(defense_input)  *(1+float(Leader_Skill)) *  (1 +0.8) *  (1 +  float(Support_from_Super) + 0.3*int(Super_Attacks_Performed))

            print("Defense: " + str(defense))
        else:
            print("Character information not found.")
    elif character_id == "1016571":
        if passive:
            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))
            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            dodge_activated1= input("Enter amount of HP at start of turn (100%- Type 100, 20% - Type 20) : ")
            dodge_activated1=(100-float(dodge_activated1))/100 * 1.59
            dodge_activated= input("Enter number of turns that character has been on rotation (1- Type 1, 2 - Type 2) : ")
            if(int(dodge_activated)>=3):
                dodge_activated=0.59
            else:
                dodge_activated=int(dodge_activated)*0.2
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")



            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")



            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")

            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+ 1.59 +dodge_activated1+float(support)) * float(defense_input)  *(1+float(Leader_Skill)) *  (1 +dodge_activated) *  (1 +  float(Support_from_Super) + 0.3*int(Super_Attacks_Performed))

            print("Defense: " + str(defense))

        else:
            print("Character information not found.")
    else:
        if passive:

            support_memory= input("Enter Support Memory Buff if Any (25%- Type 0.25, 0 - Type 0) : ")
            Support_from_Super = input("Enter Support from another character's Super Attack like int DokkanFest Tournament of Power Androids 17&18's 2 Turn Support from their Unit Super Attack(25%- Type 0.25, 0- Type 0) : ")
            defense_links = input("Enter Links that Give Defense(25%- Type 0.25) : ")
            domain=input("Enter Domain Buff to Character if any (0- Type 0, 25% -0.25) : ")


            bullet_points = extract_bullet_points(passive)
            

            defense_input = input("Enter Hidden Potential Defense Stat : ")
            active_skill_active = input("Is a Active Skill Defense Buff active on this character? (Yes - Type 1, No - Type 0 )(Eg: LR STR Future gohan's active gives himself 20% DEF or LR Int Ginyu Force's Active Skill gives Allies 15% DEF) : ")
            active_skill_effect=0
            Which_Super_Stacks= 5
            Stack_Defense= 0
            UltraOrUnitSuper1=0
            if (active_skill_active=="1"):
                active_skill_effect = float(input("If Active Gives Defense, type (Eg: Future gohan gets DEF + 20% on his active so type 0.2) : "))

            support = input("Enter amount of Support(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0) : ")
            ki_Spheres_obtained = input("Enter number of Ki Spheres Obtained : ")

            defense_multiplier_onKiSphereAttack = search_defense_multiplier2(bullet_points)* float(ki_Spheres_obtained)
            Sphere_Defense= kiSpheres(bullet_points,0) * float(ki_Spheres_obtained)
            defense_multiplier = search_defense_multiplier(bullet_points)
            defense_multiplier_multiply = search_defense_multiplier1(bullet_points)
            Sphere_Condition=  kiSphereslol(bullet_points,0)
            Leader_Skill = input("Enter LeaderSkill Percentage(A 340%/double 170% leader skill is 3.4)  : ")
            Character_Stacks = input("Enter Whether character Stacks Defense on Super(If no, type False. If yes, type True. (If u are using post-transformation Character but character stacks pre-transformation, also type True)))  : ")

            if (Character_Stacks=="True"):
                Which_Super_Stacks = input("Enter Whether character Stacks Defense on Normal Super or Ultra/Unit Super(Enter 0 for normal Super, Enter 1 for Ultra/Unit Super, Enter 2 for both) : ")
            if (Character_Stacks=='True'):
                Stacks_Multiplier = input("Enter Stacking Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                No_of_Turns = input("Enter How long Defense Stack lasts(3 turns- Type 3, 5 turns- Type 5, permanent- Type 99 )  : ")
                if (int(No_of_Turns)==99):
                    Stacks= input("Number of Stacks so far before current turn : ")
                    Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                else:
                    Float_Character = input("Did u float Character off?(Yes - Type 1, No - Type 0 )  : ")
                    if (int(Float_Character)==1):
                        if(int(No_of_Turns)==3):
                            Stacks=0
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==4 or int(No_of_Turns)==5):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==6 or int(No_of_Turns)==7):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==8 or int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                    if (int(Float_Character)==0):
                        if(int(No_of_Turns)==3 or int(No_of_Turns)==4):
                            Stacks= input("Enter Number of Stacks in Previous Appearance  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if(int(No_of_Turns)==5 or int(No_of_Turns)==6):
                            Stacks= input("Enter Number of Stacks in Previous 2 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==7  or int(No_of_Turns)==8):
                            Stacks= input("Enter Number of Stacks in Previous 3 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
                        if( int(No_of_Turns)==9):
                            Stacks= input("Enter Number of Stacks in Previous 4 Appearances  : ")
                            Stack_Defense= float(Stacks) * float(Stacks_Multiplier)
            if (Which_Super_Stacks==5):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")


            if (int(Which_Super_Stacks)==0):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")



            if (int(Which_Super_Stacks)==1):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")



            if (int(Which_Super_Stacks)==2):
                Super_Attacks_Performed = input("Enter Number of 12 ki Super Attacks Performed during this turn: ")
                Super_Attacks_Performed1 = input("Enter 12 ki Super Attack Multiplier(if raise defense by 30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
                UltraOrUnitSuper= input("Enter Whether character Performed Unit or Ultra Super during this turn (Type 1 if Performed, Type 0 if didn't perform) : ")
                if (int(UltraOrUnitSuper)==1):
                    UltraOrUnitSuper1 = input("Enter Ultra/Unit Super Attack Multiplier(30%- Type 0.3, 50%-Type 0.5, 100%-Type 1.0, 0%-Type 0)  : ")
            


            defense = (1+float(support_memory))*(1+float(domain)) * (1+float(defense_links)) * (1+active_skill_effect) * (1+defense_multiplier+Sphere_Defense+Sphere_Condition + float(support)) * float(defense_input)  *(1+float(Leader_Skill))*(1+defense_multiplier_multiply+defense_multiplier_onKiSphereAttack) *  (1+float(Support_from_Super) + int(Super_Attacks_Performed)*float(Super_Attacks_Performed1)+int(UltraOrUnitSuper) *float(UltraOrUnitSuper1)+float(Stack_Defense))
            # Define colors for background and text

            print("Defense: " + str(defense))

        else:
            print("Character information not found.")




if __name__ == "__main__":
    check_for_updates()
    # Install missing external packages
    for package in required_packages:
        try:
            __import__(package)
        except ImportError:
            print(f"Installing {package}...")
        install(package)
    while True:
        
        user_input = input("Do you want to run the Calculator? (y/n): ")
        main()
        if user_input.lower() != 'y':
            print("Exiting...")
            break
